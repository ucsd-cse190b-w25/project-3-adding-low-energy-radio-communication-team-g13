
youlostit-ble.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cb8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  08004e48  08004e48  00005e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fc0  08004fc0  0000619c  2**0
                  CONTENTS
  4 .ARM          00000008  08004fc0  08004fc0  00005fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004fc8  08004fc8  0000619c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fc8  08004fc8  00005fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fcc  08004fcc  00005fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000019c  20000000  08004fd0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  2000019c  0800516c  0000619c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a8  0800516c  000064a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000619c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000abc9  00000000  00000000  000061cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020e1  00000000  00000000  00010d95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d8  00000000  00000000  00012e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000074c  00000000  00000000  00013850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027694  00000000  00000000  00013f9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b09f  00000000  00000000  0003b630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0fd6  00000000  00000000  000466cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001376a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ee0  00000000  00000000  001376e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009c  00000000  00000000  0013a5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000019c 	.word	0x2000019c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004e30 	.word	0x08004e30

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001a0 	.word	0x200001a0
 80001cc:	08004e30 	.word	0x08004e30

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	@ 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__aeabi_d2iz>:
 800083c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000840:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000844:	d215      	bcs.n	8000872 <__aeabi_d2iz+0x36>
 8000846:	d511      	bpl.n	800086c <__aeabi_d2iz+0x30>
 8000848:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800084c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000850:	d912      	bls.n	8000878 <__aeabi_d2iz+0x3c>
 8000852:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000856:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800085a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800085e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000862:	fa23 f002 	lsr.w	r0, r3, r2
 8000866:	bf18      	it	ne
 8000868:	4240      	negne	r0, r0
 800086a:	4770      	bx	lr
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	4770      	bx	lr
 8000872:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000876:	d105      	bne.n	8000884 <__aeabi_d2iz+0x48>
 8000878:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 800087c:	bf08      	it	eq
 800087e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000882:	4770      	bx	lr
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop

0800088c <ble_init>:
int16_t connectionHandler[2] = {-1, -1}; // Little Endian Format for connection handler

/**
 * Initializes the BLE module with appropriate settings
 */
void ble_init(){
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af02      	add	r7, sp, #8
	//fetching the reset event
	rxEvent=(uint8_t*)malloc(EVENT_STARTUP_SIZE);
 8000892:	2006      	movs	r0, #6
 8000894:	f003 fb20 	bl	8003ed8 <malloc>
 8000898:	4603      	mov	r3, r0
 800089a:	461a      	mov	r2, r3
 800089c:	4b70      	ldr	r3, [pc, #448]	@ (8000a60 <ble_init+0x1d4>)
 800089e:	601a      	str	r2, [r3, #0]
	int res;

	while(!dataAvailable);
 80008a0:	bf00      	nop
 80008a2:	4b70      	ldr	r3, [pc, #448]	@ (8000a64 <ble_init+0x1d8>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d0fb      	beq.n	80008a2 <ble_init+0x16>
	res=fetchBleEvent(rxEvent,EVENT_STARTUP_SIZE);
 80008aa:	4b6d      	ldr	r3, [pc, #436]	@ (8000a60 <ble_init+0x1d4>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	2106      	movs	r1, #6
 80008b0:	4618      	mov	r0, r3
 80008b2:	f000 f905 	bl	8000ac0 <fetchBleEvent>
 80008b6:	6078      	str	r0, [r7, #4]

	if(res==BLE_OK){
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d111      	bne.n	80008e2 <ble_init+0x56>
	res=checkEventResp(rxEvent,EVENT_STATUP_DATA,EVENT_STARTUP_SIZE);
 80008be:	4b68      	ldr	r3, [pc, #416]	@ (8000a60 <ble_init+0x1d4>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	2206      	movs	r2, #6
 80008c4:	4968      	ldr	r1, [pc, #416]	@ (8000a68 <ble_init+0x1dc>)
 80008c6:	4618      	mov	r0, r3
 80008c8:	f000 f984 	bl	8000bd4 <checkEventResp>
 80008cc:	6078      	str	r0, [r7, #4]
	if(res==BLE_OK){
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d106      	bne.n	80008e2 <ble_init+0x56>
	   stackInitCompleteFlag|=0x01;
 80008d4:	4b65      	ldr	r3, [pc, #404]	@ (8000a6c <ble_init+0x1e0>)
 80008d6:	881b      	ldrh	r3, [r3, #0]
 80008d8:	f043 0301 	orr.w	r3, r3, #1
 80008dc:	b29a      	uxth	r2, r3
 80008de:	4b63      	ldr	r3, [pc, #396]	@ (8000a6c <ble_init+0x1e0>)
 80008e0:	801a      	strh	r2, [r3, #0]
	}
	}
	HAL_Delay(10);
 80008e2:	200a      	movs	r0, #10
 80008e4:	f001 fbfa 	bl	80020dc <HAL_Delay>
	free(rxEvent);
 80008e8:	4b5d      	ldr	r3, [pc, #372]	@ (8000a60 <ble_init+0x1d4>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4618      	mov	r0, r3
 80008ee:	f003 fafb 	bl	8003ee8 <free>

	//INIT GATT
	if(BLE_command(ACI_GATT_INIT,sizeof(ACI_GATT_INIT),ACI_GATT_INIT_COMPLETE,sizeof(ACI_GATT_INIT_COMPLETE),0)==BLE_OK){
 80008f2:	2300      	movs	r3, #0
 80008f4:	9300      	str	r3, [sp, #0]
 80008f6:	2307      	movs	r3, #7
 80008f8:	4a5d      	ldr	r2, [pc, #372]	@ (8000a70 <ble_init+0x1e4>)
 80008fa:	2104      	movs	r1, #4
 80008fc:	485d      	ldr	r0, [pc, #372]	@ (8000a74 <ble_init+0x1e8>)
 80008fe:	f000 fa8f 	bl	8000e20 <BLE_command>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d106      	bne.n	8000916 <ble_init+0x8a>
	   stackInitCompleteFlag|=0x02;
 8000908:	4b58      	ldr	r3, [pc, #352]	@ (8000a6c <ble_init+0x1e0>)
 800090a:	881b      	ldrh	r3, [r3, #0]
 800090c:	f043 0302 	orr.w	r3, r3, #2
 8000910:	b29a      	uxth	r2, r3
 8000912:	4b56      	ldr	r3, [pc, #344]	@ (8000a6c <ble_init+0x1e0>)
 8000914:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 8000916:	4b52      	ldr	r3, [pc, #328]	@ (8000a60 <ble_init+0x1d4>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4618      	mov	r0, r3
 800091c:	f003 fae4 	bl	8003ee8 <free>

	//INIT GAP, actually the handle that i get is a GATT handle of a service, will change the name later
	if(BLE_command(ACI_GAP_INIT,sizeof(ACI_GAP_INIT),ACI_GAP_INIT_COMPLETE,sizeof(ACI_GAP_INIT_COMPLETE),3)==BLE_OK){
 8000920:	2303      	movs	r3, #3
 8000922:	9300      	str	r3, [sp, #0]
 8000924:	2307      	movs	r3, #7
 8000926:	4a54      	ldr	r2, [pc, #336]	@ (8000a78 <ble_init+0x1ec>)
 8000928:	2107      	movs	r1, #7
 800092a:	4854      	ldr	r0, [pc, #336]	@ (8000a7c <ble_init+0x1f0>)
 800092c:	f000 fa78 	bl	8000e20 <BLE_command>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d11b      	bne.n	800096e <ble_init+0xe2>
	   stackInitCompleteFlag|=0x04;
 8000936:	4b4d      	ldr	r3, [pc, #308]	@ (8000a6c <ble_init+0x1e0>)
 8000938:	881b      	ldrh	r3, [r3, #0]
 800093a:	f043 0304 	orr.w	r3, r3, #4
 800093e:	b29a      	uxth	r2, r3
 8000940:	4b4a      	ldr	r3, [pc, #296]	@ (8000a6c <ble_init+0x1e0>)
 8000942:	801a      	strh	r2, [r3, #0]
	   memcpy(GAP_SERVICE_HANDLE,rxEvent+7,2);
 8000944:	4b46      	ldr	r3, [pc, #280]	@ (8000a60 <ble_init+0x1d4>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	3307      	adds	r3, #7
 800094a:	881b      	ldrh	r3, [r3, #0]
 800094c:	b29a      	uxth	r2, r3
 800094e:	4b4c      	ldr	r3, [pc, #304]	@ (8000a80 <ble_init+0x1f4>)
 8000950:	801a      	strh	r2, [r3, #0]
	   memcpy(GAP_CHAR_NAME_HANDLE,rxEvent+9,2);
 8000952:	4b43      	ldr	r3, [pc, #268]	@ (8000a60 <ble_init+0x1d4>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	3309      	adds	r3, #9
 8000958:	881b      	ldrh	r3, [r3, #0]
 800095a:	b29a      	uxth	r2, r3
 800095c:	4b49      	ldr	r3, [pc, #292]	@ (8000a84 <ble_init+0x1f8>)
 800095e:	801a      	strh	r2, [r3, #0]
	   memcpy(GAP_CHAR_APP_HANDLE,rxEvent+11,2);
 8000960:	4b3f      	ldr	r3, [pc, #252]	@ (8000a60 <ble_init+0x1d4>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	330b      	adds	r3, #11
 8000966:	881b      	ldrh	r3, [r3, #0]
 8000968:	b29a      	uxth	r2, r3
 800096a:	4b47      	ldr	r3, [pc, #284]	@ (8000a88 <ble_init+0x1fc>)
 800096c:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 800096e:	4b3c      	ldr	r3, [pc, #240]	@ (8000a60 <ble_init+0x1d4>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4618      	mov	r0, r3
 8000974:	f003 fab8 	bl	8003ee8 <free>

	//SET THE NAME OF THE BOARD IN THE SERVICE CREATED AUTOMATICALLY
	updateCharValue(GAP_SERVICE_HANDLE,GAP_CHAR_NAME_HANDLE,0,sizeof(deviceName),deviceName);
 8000978:	4b44      	ldr	r3, [pc, #272]	@ (8000a8c <ble_init+0x200>)
 800097a:	9300      	str	r3, [sp, #0]
 800097c:	2307      	movs	r3, #7
 800097e:	2200      	movs	r2, #0
 8000980:	4940      	ldr	r1, [pc, #256]	@ (8000a84 <ble_init+0x1f8>)
 8000982:	483f      	ldr	r0, [pc, #252]	@ (8000a80 <ble_init+0x1f4>)
 8000984:	f000 fb12 	bl	8000fac <updateCharValue>
	stackInitCompleteFlag|=0x08;
 8000988:	4b38      	ldr	r3, [pc, #224]	@ (8000a6c <ble_init+0x1e0>)
 800098a:	881b      	ldrh	r3, [r3, #0]
 800098c:	f043 0308 	orr.w	r3, r3, #8
 8000990:	b29a      	uxth	r2, r3
 8000992:	4b36      	ldr	r3, [pc, #216]	@ (8000a6c <ble_init+0x1e0>)
 8000994:	801a      	strh	r2, [r3, #0]
	free(rxEvent);
 8000996:	4b32      	ldr	r3, [pc, #200]	@ (8000a60 <ble_init+0x1d4>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4618      	mov	r0, r3
 800099c:	f003 faa4 	bl	8003ee8 <free>

	//INIT AUTH
	if(BLE_command(ACI_GAP_SET_AUTH,sizeof(ACI_GAP_SET_AUTH),ACI_GAP_SET_AUTH_RESP,sizeof(ACI_GAP_SET_AUTH_RESP),0)==BLE_OK){
 80009a0:	2300      	movs	r3, #0
 80009a2:	9300      	str	r3, [sp, #0]
 80009a4:	2307      	movs	r3, #7
 80009a6:	4a3a      	ldr	r2, [pc, #232]	@ (8000a90 <ble_init+0x204>)
 80009a8:	2110      	movs	r1, #16
 80009aa:	483a      	ldr	r0, [pc, #232]	@ (8000a94 <ble_init+0x208>)
 80009ac:	f000 fa38 	bl	8000e20 <BLE_command>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d106      	bne.n	80009c4 <ble_init+0x138>
	   stackInitCompleteFlag|=0x10;
 80009b6:	4b2d      	ldr	r3, [pc, #180]	@ (8000a6c <ble_init+0x1e0>)
 80009b8:	881b      	ldrh	r3, [r3, #0]
 80009ba:	f043 0310 	orr.w	r3, r3, #16
 80009be:	b29a      	uxth	r2, r3
 80009c0:	4b2a      	ldr	r3, [pc, #168]	@ (8000a6c <ble_init+0x1e0>)
 80009c2:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 80009c4:	4b26      	ldr	r3, [pc, #152]	@ (8000a60 <ble_init+0x1d4>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4618      	mov	r0, r3
 80009ca:	f003 fa8d 	bl	8003ee8 <free>

	//SET_TX_LEVEL
	if(BLE_command(ACI_HAL_SET_TX_POWER_LEVEL,sizeof(ACI_HAL_SET_TX_POWER_LEVEL),ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE,sizeof(ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE),0)==BLE_OK){
 80009ce:	2300      	movs	r3, #0
 80009d0:	9300      	str	r3, [sp, #0]
 80009d2:	2307      	movs	r3, #7
 80009d4:	4a30      	ldr	r2, [pc, #192]	@ (8000a98 <ble_init+0x20c>)
 80009d6:	2106      	movs	r1, #6
 80009d8:	4830      	ldr	r0, [pc, #192]	@ (8000a9c <ble_init+0x210>)
 80009da:	f000 fa21 	bl	8000e20 <BLE_command>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d106      	bne.n	80009f2 <ble_init+0x166>
	   stackInitCompleteFlag|=0x20;
 80009e4:	4b21      	ldr	r3, [pc, #132]	@ (8000a6c <ble_init+0x1e0>)
 80009e6:	881b      	ldrh	r3, [r3, #0]
 80009e8:	f043 0320 	orr.w	r3, r3, #32
 80009ec:	b29a      	uxth	r2, r3
 80009ee:	4b1f      	ldr	r3, [pc, #124]	@ (8000a6c <ble_init+0x1e0>)
 80009f0:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 80009f2:	4b1b      	ldr	r3, [pc, #108]	@ (8000a60 <ble_init+0x1d4>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4618      	mov	r0, r3
 80009f8:	f003 fa76 	bl	8003ee8 <free>

	//SET SCAN RESPONSE DATA
	if(BLE_command(HCI_LE_SET_SCAN_RESPONSE_DATA,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA),HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE),0)==BLE_OK){
 80009fc:	2300      	movs	r3, #0
 80009fe:	9300      	str	r3, [sp, #0]
 8000a00:	2307      	movs	r3, #7
 8000a02:	4a27      	ldr	r2, [pc, #156]	@ (8000aa0 <ble_init+0x214>)
 8000a04:	2124      	movs	r1, #36	@ 0x24
 8000a06:	4827      	ldr	r0, [pc, #156]	@ (8000aa4 <ble_init+0x218>)
 8000a08:	f000 fa0a 	bl	8000e20 <BLE_command>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d106      	bne.n	8000a20 <ble_init+0x194>
	   stackInitCompleteFlag|=0x40;
 8000a12:	4b16      	ldr	r3, [pc, #88]	@ (8000a6c <ble_init+0x1e0>)
 8000a14:	881b      	ldrh	r3, [r3, #0]
 8000a16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a1a:	b29a      	uxth	r2, r3
 8000a1c:	4b13      	ldr	r3, [pc, #76]	@ (8000a6c <ble_init+0x1e0>)
 8000a1e:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 8000a20:	4b0f      	ldr	r3, [pc, #60]	@ (8000a60 <ble_init+0x1d4>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4618      	mov	r0, r3
 8000a26:	f003 fa5f 	bl	8003ee8 <free>

	//This will start the advertisment,
	setConnectable();
 8000a2a:	f000 f979 	bl	8000d20 <setConnectable>

	//add the nordic UART service
	addService(UUID_NORDIC_UART_SERVICE,NORDIC_UART_SERVICE_HANDLE,SET_ATTRIBUTES(7)); //SET_ATTRIBUTES(1+2+3*2+3+3));//1 atribute service +2 attribute char readable+3*(2 NOTIFYABLE READABLE charachteristics)
 8000a2e:	2207      	movs	r2, #7
 8000a30:	491d      	ldr	r1, [pc, #116]	@ (8000aa8 <ble_init+0x21c>)
 8000a32:	481e      	ldr	r0, [pc, #120]	@ (8000aac <ble_init+0x220>)
 8000a34:	f000 fa40 	bl	8000eb8 <addService>

	//add the nordic UART charachteristics
	addCharacteristic(UUID_CHAR_READ,READ_CHAR_HANDLE,NORDIC_UART_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),NOTIFIBLE);
 8000a38:	2310      	movs	r3, #16
 8000a3a:	9300      	str	r3, [sp, #0]
 8000a3c:	2314      	movs	r3, #20
 8000a3e:	4a1a      	ldr	r2, [pc, #104]	@ (8000aa8 <ble_init+0x21c>)
 8000a40:	491b      	ldr	r1, [pc, #108]	@ (8000ab0 <ble_init+0x224>)
 8000a42:	481c      	ldr	r0, [pc, #112]	@ (8000ab4 <ble_init+0x228>)
 8000a44:	f000 fa70 	bl	8000f28 <addCharacteristic>
	addCharacteristic(UUID_CHAR_WRITE,WRITE_CHAR_HANDLE,NORDIC_UART_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),WRITABLE);
 8000a48:	2304      	movs	r3, #4
 8000a4a:	9300      	str	r3, [sp, #0]
 8000a4c:	2314      	movs	r3, #20
 8000a4e:	4a16      	ldr	r2, [pc, #88]	@ (8000aa8 <ble_init+0x21c>)
 8000a50:	4919      	ldr	r1, [pc, #100]	@ (8000ab8 <ble_init+0x22c>)
 8000a52:	481a      	ldr	r0, [pc, #104]	@ (8000abc <ble_init+0x230>)
 8000a54:	f000 fa68 	bl	8000f28 <addCharacteristic>

	if(stackInitCompleteFlag==255){
	  //turn on led blue if everything was fine
	//  HAL_GPIO_WritePin(CPU_LED_GPIO_Port,CPU_LED_Pin,GPIO_PIN_SET);
	}
	return;
 8000a58:	bf00      	nop
}
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	200002d0 	.word	0x200002d0
 8000a64:	200002d4 	.word	0x200002d4
 8000a68:	20000000 	.word	0x20000000
 8000a6c:	200002ce 	.word	0x200002ce
 8000a70:	2000000c 	.word	0x2000000c
 8000a74:	20000008 	.word	0x20000008
 8000a78:	2000001c 	.word	0x2000001c
 8000a7c:	20000014 	.word	0x20000014
 8000a80:	200001b8 	.word	0x200001b8
 8000a84:	200001bc 	.word	0x200001bc
 8000a88:	200001c0 	.word	0x200001c0
 8000a8c:	200000f4 	.word	0x200000f4
 8000a90:	20000034 	.word	0x20000034
 8000a94:	20000024 	.word	0x20000024
 8000a98:	20000044 	.word	0x20000044
 8000a9c:	2000003c 	.word	0x2000003c
 8000aa0:	20000070 	.word	0x20000070
 8000aa4:	2000004c 	.word	0x2000004c
 8000aa8:	200002c4 	.word	0x200002c4
 8000aac:	200000fc 	.word	0x200000fc
 8000ab0:	200002cc 	.word	0x200002cc
 8000ab4:	2000011c 	.word	0x2000011c
 8000ab8:	200002c8 	.word	0x200002c8
 8000abc:	2000010c 	.word	0x2000010c

08000ac0 <fetchBleEvent>:
	 if(BLE_command(ACI_HAL_SET_STANDBY,sizeof(ACI_HAL_SET_STANDBY),ACI_HAL_SET_STANDBY_COMPLETE,sizeof(ACI_HAL_SET_STANDBY_COMPLETE),0)==BLE_OK){
	 }
	 free(rxEvent);
}

int fetchBleEvent(uint8_t *container, int size){
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08c      	sub	sp, #48	@ 0x30
 8000ac4:	af02      	add	r7, sp, #8
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	6039      	str	r1, [r7, #0]

  uint8_t master_header[]={0x0b,0x00,0x00,0x00,0x00};
 8000aca:	4a3d      	ldr	r2, [pc, #244]	@ (8000bc0 <fetchBleEvent+0x100>)
 8000acc:	f107 0318 	add.w	r3, r7, #24
 8000ad0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ad4:	6018      	str	r0, [r3, #0]
 8000ad6:	3304      	adds	r3, #4
 8000ad8:	7019      	strb	r1, [r3, #0]
  uint8_t slave_header[5];

  //Wait until it is available an event coming from the BLE module (GPIO PIN COULD CHANGE ACCORDING TO THE BOARD)
  if(HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8000ada:	2140      	movs	r1, #64	@ 0x40
 8000adc:	4839      	ldr	r0, [pc, #228]	@ (8000bc4 <fetchBleEvent+0x104>)
 8000ade:	f001 fddd 	bl	800269c <HAL_GPIO_ReadPin>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d065      	beq.n	8000bb4 <fetchBleEvent+0xf4>

  HAL_Delay(5);
 8000ae8:	2005      	movs	r0, #5
 8000aea:	f001 faf7 	bl	80020dc <HAL_Delay>
  //PIN_CS of SPI2 LOW
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 8000aee:	2200      	movs	r2, #0
 8000af0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000af4:	4834      	ldr	r0, [pc, #208]	@ (8000bc8 <fetchBleEvent+0x108>)
 8000af6:	f001 fde9 	bl	80026cc <HAL_GPIO_WritePin>

  //SPI2 in this case, it could change according to the board
  //we send a byte containing a request of reading followed by 4 dummy bytes
  HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 8000afa:	f107 0210 	add.w	r2, r7, #16
 8000afe:	f107 0118 	add.w	r1, r7, #24
 8000b02:	2301      	movs	r3, #1
 8000b04:	9300      	str	r3, [sp, #0]
 8000b06:	2305      	movs	r3, #5
 8000b08:	4830      	ldr	r0, [pc, #192]	@ (8000bcc <fetchBleEvent+0x10c>)
 8000b0a:	f002 fe5f 	bl	80037cc <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000b0e:	2201      	movs	r2, #1
 8000b10:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b14:	482c      	ldr	r0, [pc, #176]	@ (8000bc8 <fetchBleEvent+0x108>)
 8000b16:	f001 fdd9 	bl	80026cc <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000b1a:	2001      	movs	r0, #1
 8000b1c:	f001 fade 	bl	80020dc <HAL_Delay>
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 8000b20:	2200      	movs	r2, #0
 8000b22:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b26:	4828      	ldr	r0, [pc, #160]	@ (8000bc8 <fetchBleEvent+0x108>)
 8000b28:	f001 fdd0 	bl	80026cc <HAL_GPIO_WritePin>

  HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 8000b2c:	f107 0210 	add.w	r2, r7, #16
 8000b30:	f107 0118 	add.w	r1, r7, #24
 8000b34:	2301      	movs	r3, #1
 8000b36:	9300      	str	r3, [sp, #0]
 8000b38:	2305      	movs	r3, #5
 8000b3a:	4824      	ldr	r0, [pc, #144]	@ (8000bcc <fetchBleEvent+0x10c>)
 8000b3c:	f002 fe46 	bl	80037cc <HAL_SPI_TransmitReceive>

  //let's get the size of data available
  int dataSize;
  dataSize=(slave_header[3]|slave_header[4]<<8);
 8000b40:	7cfb      	ldrb	r3, [r7, #19]
 8000b42:	461a      	mov	r2, r3
 8000b44:	7d3b      	ldrb	r3, [r7, #20]
 8000b46:	021b      	lsls	r3, r3, #8
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	627b      	str	r3, [r7, #36]	@ 0x24
  int i;
  char dummy=0xff;
 8000b4c:	23ff      	movs	r3, #255	@ 0xff
 8000b4e:	73fb      	strb	r3, [r7, #15]

  if(dataSize>size){
 8000b50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	dd01      	ble.n	8000b5c <fetchBleEvent+0x9c>
	  dataSize=size;
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if(dataSize>0){
 8000b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	dd1f      	ble.n	8000ba2 <fetchBleEvent+0xe2>
	    //let's fill the get the bytes availables and insert them into the container variable
  		for(i=0;i<dataSize;i++){
 8000b62:	2300      	movs	r3, #0
 8000b64:	623b      	str	r3, [r7, #32]
 8000b66:	e00d      	b.n	8000b84 <fetchBleEvent+0xc4>
  		HAL_SPI_TransmitReceive(&hspi3,(uint8_t*)&dummy,container+i,1,1);
 8000b68:	6a3b      	ldr	r3, [r7, #32]
 8000b6a:	687a      	ldr	r2, [r7, #4]
 8000b6c:	441a      	add	r2, r3
 8000b6e:	f107 010f 	add.w	r1, r7, #15
 8000b72:	2301      	movs	r3, #1
 8000b74:	9300      	str	r3, [sp, #0]
 8000b76:	2301      	movs	r3, #1
 8000b78:	4814      	ldr	r0, [pc, #80]	@ (8000bcc <fetchBleEvent+0x10c>)
 8000b7a:	f002 fe27 	bl	80037cc <HAL_SPI_TransmitReceive>
  		for(i=0;i<dataSize;i++){
 8000b7e:	6a3b      	ldr	r3, [r7, #32]
 8000b80:	3301      	adds	r3, #1
 8000b82:	623b      	str	r3, [r7, #32]
 8000b84:	6a3a      	ldr	r2, [r7, #32]
 8000b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	dbed      	blt.n	8000b68 <fetchBleEvent+0xa8>

  		}
  		HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b92:	480d      	ldr	r0, [pc, #52]	@ (8000bc8 <fetchBleEvent+0x108>)
 8000b94:	f001 fd9a 	bl	80026cc <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
        return -1;
  	}

  //let's stop the SPI2
  dataAvailable=0;
 8000b98:	4b0d      	ldr	r3, [pc, #52]	@ (8000bd0 <fetchBleEvent+0x110>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
  return BLE_OK;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	e00a      	b.n	8000bb8 <fetchBleEvent+0xf8>
  		HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ba8:	4807      	ldr	r0, [pc, #28]	@ (8000bc8 <fetchBleEvent+0x108>)
 8000baa:	f001 fd8f 	bl	80026cc <HAL_GPIO_WritePin>
        return -1;
 8000bae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000bb2:	e001      	b.n	8000bb8 <fetchBleEvent+0xf8>
  }else{
  return -2;
 8000bb4:	f06f 0301 	mvn.w	r3, #1
  }
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3728      	adds	r7, #40	@ 0x28
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	08004e48 	.word	0x08004e48
 8000bc4:	48001000 	.word	0x48001000
 8000bc8:	48000c00 	.word	0x48000c00
 8000bcc:	200002d8 	.word	0x200002d8
 8000bd0:	200002d4 	.word	0x200002d4

08000bd4 <checkEventResp>:


int checkEventResp(uint8_t *event, uint8_t *reference, int size){
 8000bd4:	b480      	push	{r7}
 8000bd6:	b087      	sub	sp, #28
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	60f8      	str	r0, [r7, #12]
 8000bdc:	60b9      	str	r1, [r7, #8]
 8000bde:	607a      	str	r2, [r7, #4]
	int j=0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	617b      	str	r3, [r7, #20]

	for(j=0;j<size;j++){
 8000be4:	2300      	movs	r3, #0
 8000be6:	617b      	str	r3, [r7, #20]
 8000be8:	e00f      	b.n	8000c0a <checkEventResp+0x36>

		if(event[j]!=reference[j]){
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	68fa      	ldr	r2, [r7, #12]
 8000bee:	4413      	add	r3, r2
 8000bf0:	781a      	ldrb	r2, [r3, #0]
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	68b9      	ldr	r1, [r7, #8]
 8000bf6:	440b      	add	r3, r1
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	d002      	beq.n	8000c04 <checkEventResp+0x30>
			return -1;
 8000bfe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c02:	e007      	b.n	8000c14 <checkEventResp+0x40>
	for(j=0;j<size;j++){
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	3301      	adds	r3, #1
 8000c08:	617b      	str	r3, [r7, #20]
 8000c0a:	697a      	ldr	r2, [r7, #20]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	429a      	cmp	r2, r3
 8000c10:	dbeb      	blt.n	8000bea <checkEventResp+0x16>
		}
	}

return BLE_OK;
 8000c12:	2300      	movs	r3, #0
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	371c      	adds	r7, #28
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <sendCommand>:

void sendCommand(uint8_t *command,int size){
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08a      	sub	sp, #40	@ 0x28
 8000c24:	af02      	add	r7, sp, #8
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	6039      	str	r1, [r7, #0]

	  uint8_t master_header[]={0x0a,0x00,0x00,0x00,0x00};
 8000c2a:	4a1f      	ldr	r2, [pc, #124]	@ (8000ca8 <sendCommand+0x88>)
 8000c2c:	f107 0310 	add.w	r3, r7, #16
 8000c30:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c34:	6018      	str	r0, [r3, #0]
 8000c36:	3304      	adds	r3, #4
 8000c38:	7019      	strb	r1, [r3, #0]
	  uint8_t slave_header[5];

	  int result;

	do{
	  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c40:	481a      	ldr	r0, [pc, #104]	@ (8000cac <sendCommand+0x8c>)
 8000c42:	f001 fd43 	bl	80026cc <HAL_GPIO_WritePin>

	  //wait until it is possible to write
	  //while(!dataAvailable);
	  HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 8000c46:	f107 0208 	add.w	r2, r7, #8
 8000c4a:	f107 0110 	add.w	r1, r7, #16
 8000c4e:	2301      	movs	r3, #1
 8000c50:	9300      	str	r3, [sp, #0]
 8000c52:	2305      	movs	r3, #5
 8000c54:	4816      	ldr	r0, [pc, #88]	@ (8000cb0 <sendCommand+0x90>)
 8000c56:	f002 fdb9 	bl	80037cc <HAL_SPI_TransmitReceive>
	  int bufferSize=(slave_header[2]<<8|slave_header[1]);
 8000c5a:	7abb      	ldrb	r3, [r7, #10]
 8000c5c:	021b      	lsls	r3, r3, #8
 8000c5e:	7a7a      	ldrb	r2, [r7, #9]
 8000c60:	4313      	orrs	r3, r2
 8000c62:	61bb      	str	r3, [r7, #24]
	  if(bufferSize>=size){
 8000c64:	69ba      	ldr	r2, [r7, #24]
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	db09      	blt.n	8000c80 <sendCommand+0x60>
		HAL_SPI_Transmit(&hspi3,command,size,1);
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	b29a      	uxth	r2, r3
 8000c70:	2301      	movs	r3, #1
 8000c72:	6879      	ldr	r1, [r7, #4]
 8000c74:	480e      	ldr	r0, [pc, #56]	@ (8000cb0 <sendCommand+0x90>)
 8000c76:	f002 fc34 	bl	80034e2 <HAL_SPI_Transmit>
		result=0;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	61fb      	str	r3, [r7, #28]
 8000c7e:	e002      	b.n	8000c86 <sendCommand+0x66>
	  }else{
		result=-1;
 8000c80:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c84:	61fb      	str	r3, [r7, #28]
	  }
	  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000c86:	2201      	movs	r2, #1
 8000c88:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c8c:	4807      	ldr	r0, [pc, #28]	@ (8000cac <sendCommand+0x8c>)
 8000c8e:	f001 fd1d 	bl	80026cc <HAL_GPIO_WritePin>
	  dataAvailable=0;
 8000c92:	4b08      	ldr	r3, [pc, #32]	@ (8000cb4 <sendCommand+0x94>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
	}while(result!=0);
 8000c98:	69fb      	ldr	r3, [r7, #28]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d1cd      	bne.n	8000c3a <sendCommand+0x1a>

}
 8000c9e:	bf00      	nop
 8000ca0:	bf00      	nop
 8000ca2:	3720      	adds	r7, #32
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	08004e50 	.word	0x08004e50
 8000cac:	48000c00 	.word	0x48000c00
 8000cb0:	200002d8 	.word	0x200002d8
 8000cb4:	200002d4 	.word	0x200002d4

08000cb8 <catchBLE>:

void catchBLE(){
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
      int result=fetchBleEvent(buffer,127);
 8000cbe:	217f      	movs	r1, #127	@ 0x7f
 8000cc0:	4813      	ldr	r0, [pc, #76]	@ (8000d10 <catchBLE+0x58>)
 8000cc2:	f7ff fefd 	bl	8000ac0 <fetchBleEvent>
 8000cc6:	6078      	str	r0, [r7, #4]
	  if(result==BLE_OK){
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d11b      	bne.n	8000d06 <catchBLE+0x4e>
		  if(checkEventResp(buffer,EVENT_DISCONNECTED,3)==BLE_OK){
 8000cce:	2203      	movs	r2, #3
 8000cd0:	4910      	ldr	r1, [pc, #64]	@ (8000d14 <catchBLE+0x5c>)
 8000cd2:	480f      	ldr	r0, [pc, #60]	@ (8000d10 <catchBLE+0x58>)
 8000cd4:	f7ff ff7e 	bl	8000bd4 <checkEventResp>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d101      	bne.n	8000ce2 <catchBLE+0x2a>
			  // This automatically sets your device to be discoverable
			  // as soon as it disconnects from a device
			  setConnectable();
 8000cde:	f000 f81f 	bl	8000d20 <setConnectable>
		  }
		  if(checkEventResp(buffer, EVENT_CONNECTED, 5)==BLE_OK){
 8000ce2:	2205      	movs	r2, #5
 8000ce4:	490c      	ldr	r1, [pc, #48]	@ (8000d18 <catchBLE+0x60>)
 8000ce6:	480a      	ldr	r0, [pc, #40]	@ (8000d10 <catchBLE+0x58>)
 8000ce8:	f7ff ff74 	bl	8000bd4 <checkEventResp>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d109      	bne.n	8000d06 <catchBLE+0x4e>
			  // Little Endian Format
			  *(connectionHandler) = buffer[5];
 8000cf2:	4b07      	ldr	r3, [pc, #28]	@ (8000d10 <catchBLE+0x58>)
 8000cf4:	795b      	ldrb	r3, [r3, #5]
 8000cf6:	b21a      	sxth	r2, r3
 8000cf8:	4b08      	ldr	r3, [pc, #32]	@ (8000d1c <catchBLE+0x64>)
 8000cfa:	801a      	strh	r2, [r3, #0]
			  *(connectionHandler + 1) = buffer[6];
 8000cfc:	4b04      	ldr	r3, [pc, #16]	@ (8000d10 <catchBLE+0x58>)
 8000cfe:	799b      	ldrb	r3, [r3, #6]
 8000d00:	b21a      	sxth	r2, r3
 8000d02:	4b06      	ldr	r3, [pc, #24]	@ (8000d1c <catchBLE+0x64>)
 8000d04:	805a      	strh	r2, [r3, #2]
		  }
	  }else{
		  //something bad is happening if I am here
	  }
}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	200001c4 	.word	0x200001c4
 8000d14:	200000e8 	.word	0x200000e8
 8000d18:	200000ec 	.word	0x200000ec
 8000d1c:	2000012c 	.word	0x2000012c

08000d20 <setConnectable>:

void setConnectable(){
 8000d20:	b590      	push	{r4, r7, lr}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
	   uint8_t* rxEvent;
	   //Start advertising
	   uint8_t *localname;
	   int res;
	   localname=(uint8_t*)malloc(sizeof(deviceName)+5);//carattere di terminazione+listauid+slavetemp
 8000d26:	200c      	movs	r0, #12
 8000d28:	f003 f8d6 	bl	8003ed8 <malloc>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	60fb      	str	r3, [r7, #12]
	   memcpy(localname,deviceName,sizeof(deviceName));
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	4a36      	ldr	r2, [pc, #216]	@ (8000e0c <setConnectable+0xec>)
 8000d34:	6810      	ldr	r0, [r2, #0]
 8000d36:	6018      	str	r0, [r3, #0]
 8000d38:	8891      	ldrh	r1, [r2, #4]
 8000d3a:	7992      	ldrb	r2, [r2, #6]
 8000d3c:	8099      	strh	r1, [r3, #4]
 8000d3e:	719a      	strb	r2, [r3, #6]
	   localname[sizeof(deviceName)+1]=0x00;
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	3308      	adds	r3, #8
 8000d44:	2200      	movs	r2, #0
 8000d46:	701a      	strb	r2, [r3, #0]
	   localname[sizeof(deviceName)+2]=0x00;
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	3309      	adds	r3, #9
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	701a      	strb	r2, [r3, #0]
	   localname[sizeof(deviceName)+3]=0x00;
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	330a      	adds	r3, #10
 8000d54:	2200      	movs	r2, #0
 8000d56:	701a      	strb	r2, [r3, #0]
	   localname[sizeof(deviceName)+4]=0x00;
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	330b      	adds	r3, #11
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	701a      	strb	r2, [r3, #0]
	   localname[sizeof(deviceName)]=0x00;
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	3307      	adds	r3, #7
 8000d64:	2200      	movs	r2, #0
 8000d66:	701a      	strb	r2, [r3, #0]


	   ACI_GAP_SET_DISCOVERABLE[11]=sizeof(deviceName)+1;
 8000d68:	4b29      	ldr	r3, [pc, #164]	@ (8000e10 <setConnectable+0xf0>)
 8000d6a:	2208      	movs	r2, #8
 8000d6c:	72da      	strb	r2, [r3, #11]
	   ACI_GAP_SET_DISCOVERABLE[3]=sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE)-4;
 8000d6e:	4b28      	ldr	r3, [pc, #160]	@ (8000e10 <setConnectable+0xf0>)
 8000d70:	2215      	movs	r2, #21
 8000d72:	70da      	strb	r2, [r3, #3]

	   uint8_t *discoverableCommand;
	   discoverableCommand=(uint8_t*)malloc(sizeof(ACI_GAP_SET_DISCOVERABLE)+sizeof(deviceName)+5);
 8000d74:	2019      	movs	r0, #25
 8000d76:	f003 f8af 	bl	8003ed8 <malloc>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	60bb      	str	r3, [r7, #8]
	   memcpy(discoverableCommand,ACI_GAP_SET_DISCOVERABLE,sizeof(ACI_GAP_SET_DISCOVERABLE));
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	4a23      	ldr	r2, [pc, #140]	@ (8000e10 <setConnectable+0xf0>)
 8000d82:	461c      	mov	r4, r3
 8000d84:	4613      	mov	r3, r2
 8000d86:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000d88:	6020      	str	r0, [r4, #0]
 8000d8a:	6061      	str	r1, [r4, #4]
 8000d8c:	60a2      	str	r2, [r4, #8]
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	7323      	strb	r3, [r4, #12]
	   memcpy(discoverableCommand+sizeof(ACI_GAP_SET_DISCOVERABLE),localname,sizeof(deviceName)+5);
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	330d      	adds	r3, #13
 8000d96:	220c      	movs	r2, #12
 8000d98:	68f9      	ldr	r1, [r7, #12]
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f003 fad1 	bl	8004342 <memcpy>

	   sendCommand(discoverableCommand,sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE));
 8000da0:	2119      	movs	r1, #25
 8000da2:	68b8      	ldr	r0, [r7, #8]
 8000da4:	f7ff ff3c 	bl	8000c20 <sendCommand>
	   rxEvent=(uint8_t*)malloc(7);
 8000da8:	2007      	movs	r0, #7
 8000daa:	f003 f895 	bl	8003ed8 <malloc>
 8000dae:	4603      	mov	r3, r0
 8000db0:	607b      	str	r3, [r7, #4]
	   while(!dataAvailable);
 8000db2:	bf00      	nop
 8000db4:	4b17      	ldr	r3, [pc, #92]	@ (8000e14 <setConnectable+0xf4>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d0fb      	beq.n	8000db4 <setConnectable+0x94>
	   res=fetchBleEvent(rxEvent,7);
 8000dbc:	2107      	movs	r1, #7
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f7ff fe7e 	bl	8000ac0 <fetchBleEvent>
 8000dc4:	6038      	str	r0, [r7, #0]
	   if(res==BLE_OK){
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d10f      	bne.n	8000dec <setConnectable+0xcc>
	   res=checkEventResp(rxEvent,ACI_GAP_SET_DISCOVERABLE_COMPLETE,7);
 8000dcc:	2207      	movs	r2, #7
 8000dce:	4912      	ldr	r1, [pc, #72]	@ (8000e18 <setConnectable+0xf8>)
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f7ff feff 	bl	8000bd4 <checkEventResp>
 8000dd6:	6038      	str	r0, [r7, #0]
	   if(res==BLE_OK){
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d106      	bne.n	8000dec <setConnectable+0xcc>
		   stackInitCompleteFlag|=0x80;
 8000dde:	4b0f      	ldr	r3, [pc, #60]	@ (8000e1c <setConnectable+0xfc>)
 8000de0:	881b      	ldrh	r3, [r3, #0]
 8000de2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000de6:	b29a      	uxth	r2, r3
 8000de8:	4b0c      	ldr	r3, [pc, #48]	@ (8000e1c <setConnectable+0xfc>)
 8000dea:	801a      	strh	r2, [r3, #0]
	   }
	   }

	   free(rxEvent);
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	f003 f87b 	bl	8003ee8 <free>
	   free(discoverableCommand);
 8000df2:	68b8      	ldr	r0, [r7, #8]
 8000df4:	f003 f878 	bl	8003ee8 <free>
	   free(localname);
 8000df8:	68f8      	ldr	r0, [r7, #12]
 8000dfa:	f003 f875 	bl	8003ee8 <free>
	   HAL_Delay(10);
 8000dfe:	200a      	movs	r0, #10
 8000e00:	f001 f96c 	bl	80020dc <HAL_Delay>
}
 8000e04:	bf00      	nop
 8000e06:	3714      	adds	r7, #20
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd90      	pop	{r4, r7, pc}
 8000e0c:	200000f4 	.word	0x200000f4
 8000e10:	20000078 	.word	0x20000078
 8000e14:	200002d4 	.word	0x200002d4
 8000e18:	20000088 	.word	0x20000088
 8000e1c:	200002ce 	.word	0x200002ce

08000e20 <BLE_command>:
 * @param sizeRes Expected size of the response result.
 * @param returnHandles Number of handles expected in the response (each handle occupies 2 bytes).
 * @return int Returns BLE_OK if the command was successfully executed and the event response is valid,
 *             or an error code if something went wrong.
 */
int BLE_command(uint8_t* command, int size, uint8_t* result, int sizeRes, int returnHandles){
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
 8000e2c:	603b      	str	r3, [r7, #0]
	   int response;

	   sendCommand(command,size);
 8000e2e:	68b9      	ldr	r1, [r7, #8]
 8000e30:	68f8      	ldr	r0, [r7, #12]
 8000e32:	f7ff fef5 	bl	8000c20 <sendCommand>
	   rxEvent=(uint8_t*)malloc(sizeRes+2*returnHandles);
 8000e36:	6a3b      	ldr	r3, [r7, #32]
 8000e38:	005a      	lsls	r2, r3, #1
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f003 f84a 	bl	8003ed8 <malloc>
 8000e44:	4603      	mov	r3, r0
 8000e46:	461a      	mov	r2, r3
 8000e48:	4b19      	ldr	r3, [pc, #100]	@ (8000eb0 <BLE_command+0x90>)
 8000e4a:	601a      	str	r2, [r3, #0]

	   long contatore=0;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	613b      	str	r3, [r7, #16]
	   while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8000e50:	e007      	b.n	8000e62 <BLE_command+0x42>
		   contatore++;
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	3301      	adds	r3, #1
 8000e56:	613b      	str	r3, [r7, #16]
		   if(contatore>30000){
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	f247 5230 	movw	r2, #30000	@ 0x7530
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	dc07      	bgt.n	8000e72 <BLE_command+0x52>
	   while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8000e62:	2140      	movs	r1, #64	@ 0x40
 8000e64:	4813      	ldr	r0, [pc, #76]	@ (8000eb4 <BLE_command+0x94>)
 8000e66:	f001 fc19 	bl	800269c <HAL_GPIO_ReadPin>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d0f0      	beq.n	8000e52 <BLE_command+0x32>
 8000e70:	e000      	b.n	8000e74 <BLE_command+0x54>
			   break;
 8000e72:	bf00      	nop
		   }
	   }


	   response=fetchBleEvent(rxEvent,sizeRes+returnHandles*2);
 8000e74:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb0 <BLE_command+0x90>)
 8000e76:	6818      	ldr	r0, [r3, #0]
 8000e78:	6a3b      	ldr	r3, [r7, #32]
 8000e7a:	005a      	lsls	r2, r3, #1
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	4413      	add	r3, r2
 8000e80:	4619      	mov	r1, r3
 8000e82:	f7ff fe1d 	bl	8000ac0 <fetchBleEvent>
 8000e86:	6178      	str	r0, [r7, #20]
	   if(response==BLE_OK){
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d107      	bne.n	8000e9e <BLE_command+0x7e>
		   response=checkEventResp(rxEvent,result,sizeRes);
 8000e8e:	4b08      	ldr	r3, [pc, #32]	@ (8000eb0 <BLE_command+0x90>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	683a      	ldr	r2, [r7, #0]
 8000e94:	6879      	ldr	r1, [r7, #4]
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff fe9c 	bl	8000bd4 <checkEventResp>
 8000e9c:	6178      	str	r0, [r7, #20]
	   }
	   HAL_Delay(10);
 8000e9e:	200a      	movs	r0, #10
 8000ea0:	f001 f91c 	bl	80020dc <HAL_Delay>


	return response;
 8000ea4:	697b      	ldr	r3, [r7, #20]
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3718      	adds	r7, #24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	200002d0 	.word	0x200002d0
 8000eb4:	48001000 	.word	0x48001000

08000eb8 <addService>:

void addService(uint8_t* UUID, uint8_t* handle, int attributes){
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af02      	add	r7, sp, #8
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]


	//memcpy
	memcpy(ADD_PRIMARY_SERVICE+5,UUID,16);
 8000ec4:	4b14      	ldr	r3, [pc, #80]	@ (8000f18 <addService+0x60>)
 8000ec6:	2210      	movs	r2, #16
 8000ec8:	68f9      	ldr	r1, [r7, #12]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f003 fa39 	bl	8004342 <memcpy>
    ADD_PRIMARY_SERVICE[22]=attributes;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	b2da      	uxtb	r2, r3
 8000ed4:	4b11      	ldr	r3, [pc, #68]	@ (8000f1c <addService+0x64>)
 8000ed6:	759a      	strb	r2, [r3, #22]
	   if(BLE_command(ADD_PRIMARY_SERVICE,sizeof(ADD_PRIMARY_SERVICE),ADD_PRIMARY_SERVICE_COMPLETE,sizeof(ADD_PRIMARY_SERVICE_COMPLETE),1)==BLE_OK){
 8000ed8:	2301      	movs	r3, #1
 8000eda:	9300      	str	r3, [sp, #0]
 8000edc:	2307      	movs	r3, #7
 8000ede:	4a10      	ldr	r2, [pc, #64]	@ (8000f20 <addService+0x68>)
 8000ee0:	2117      	movs	r1, #23
 8000ee2:	480e      	ldr	r0, [pc, #56]	@ (8000f1c <addService+0x64>)
 8000ee4:	f7ff ff9c 	bl	8000e20 <BLE_command>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d10a      	bne.n	8000f04 <addService+0x4c>
		   handle[0]=rxEvent[7];
 8000eee:	4b0d      	ldr	r3, [pc, #52]	@ (8000f24 <addService+0x6c>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	79da      	ldrb	r2, [r3, #7]
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	701a      	strb	r2, [r3, #0]
		   handle[1]=rxEvent[8];
 8000ef8:	4b0a      	ldr	r3, [pc, #40]	@ (8000f24 <addService+0x6c>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	3301      	adds	r3, #1
 8000f00:	7a12      	ldrb	r2, [r2, #8]
 8000f02:	701a      	strb	r2, [r3, #0]
	    }
	   free(rxEvent);
 8000f04:	4b07      	ldr	r3, [pc, #28]	@ (8000f24 <addService+0x6c>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f002 ffed 	bl	8003ee8 <free>
}
 8000f0e:	bf00      	nop
 8000f10:	3710      	adds	r7, #16
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20000095 	.word	0x20000095
 8000f1c:	20000090 	.word	0x20000090
 8000f20:	200000a8 	.word	0x200000a8
 8000f24:	200002d0 	.word	0x200002d0

08000f28 <addCharacteristic>:

void addCharacteristic(uint8_t* UUID,uint8_t* handleChar, uint8_t* handleService, uint8_t maxsize, uint8_t proprieties){
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af02      	add	r7, sp, #8
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
 8000f34:	70fb      	strb	r3, [r7, #3]
    memcpy(ADD_CUSTOM_CHAR+7,UUID,16);
 8000f36:	4b19      	ldr	r3, [pc, #100]	@ (8000f9c <addCharacteristic+0x74>)
 8000f38:	2210      	movs	r2, #16
 8000f3a:	68f9      	ldr	r1, [r7, #12]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f003 fa00 	bl	8004342 <memcpy>

	ADD_CUSTOM_CHAR[4]= handleService[0];
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	781a      	ldrb	r2, [r3, #0]
 8000f46:	4b16      	ldr	r3, [pc, #88]	@ (8000fa0 <addCharacteristic+0x78>)
 8000f48:	711a      	strb	r2, [r3, #4]
	ADD_CUSTOM_CHAR[5]= handleService[1];
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	785a      	ldrb	r2, [r3, #1]
 8000f4e:	4b14      	ldr	r3, [pc, #80]	@ (8000fa0 <addCharacteristic+0x78>)
 8000f50:	715a      	strb	r2, [r3, #5]
	ADD_CUSTOM_CHAR[23]= maxsize;
 8000f52:	4a13      	ldr	r2, [pc, #76]	@ (8000fa0 <addCharacteristic+0x78>)
 8000f54:	78fb      	ldrb	r3, [r7, #3]
 8000f56:	75d3      	strb	r3, [r2, #23]
	ADD_CUSTOM_CHAR[25]= proprieties;
 8000f58:	4a11      	ldr	r2, [pc, #68]	@ (8000fa0 <addCharacteristic+0x78>)
 8000f5a:	7e3b      	ldrb	r3, [r7, #24]
 8000f5c:	7653      	strb	r3, [r2, #25]
	if(BLE_command(ADD_CUSTOM_CHAR,sizeof(ADD_CUSTOM_CHAR),ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),1)==BLE_OK){
 8000f5e:	2301      	movs	r3, #1
 8000f60:	9300      	str	r3, [sp, #0]
 8000f62:	2307      	movs	r3, #7
 8000f64:	4a0f      	ldr	r2, [pc, #60]	@ (8000fa4 <addCharacteristic+0x7c>)
 8000f66:	211e      	movs	r1, #30
 8000f68:	480d      	ldr	r0, [pc, #52]	@ (8000fa0 <addCharacteristic+0x78>)
 8000f6a:	f7ff ff59 	bl	8000e20 <BLE_command>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d10a      	bne.n	8000f8a <addCharacteristic+0x62>
        handleChar[0]=rxEvent[7];
 8000f74:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa8 <addCharacteristic+0x80>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	79da      	ldrb	r2, [r3, #7]
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	701a      	strb	r2, [r3, #0]
	    handleChar[1]=rxEvent[8];
 8000f7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa8 <addCharacteristic+0x80>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	3301      	adds	r3, #1
 8000f86:	7a12      	ldrb	r2, [r2, #8]
 8000f88:	701a      	strb	r2, [r3, #0]
	}
	free(rxEvent);
 8000f8a:	4b07      	ldr	r3, [pc, #28]	@ (8000fa8 <addCharacteristic+0x80>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f002 ffaa 	bl	8003ee8 <free>
}
 8000f94:	bf00      	nop
 8000f96:	3710      	adds	r7, #16
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	200000b7 	.word	0x200000b7
 8000fa0:	200000b0 	.word	0x200000b0
 8000fa4:	200000d0 	.word	0x200000d0
 8000fa8:	200002d0 	.word	0x200002d0

08000fac <updateCharValue>:

void updateCharValue(uint8_t* handleService,uint8_t* handleChar, int offset, int size,uint8_t* data){
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b088      	sub	sp, #32
 8000fb0:	af02      	add	r7, sp, #8
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
 8000fb8:	603b      	str	r3, [r7, #0]
	UPDATE_CHAR[3]=size+6;
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	3306      	adds	r3, #6
 8000fc0:	b2da      	uxtb	r2, r3
 8000fc2:	4b21      	ldr	r3, [pc, #132]	@ (8001048 <updateCharValue+0x9c>)
 8000fc4:	70da      	strb	r2, [r3, #3]
	UPDATE_CHAR[4]=handleService[0];
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	781a      	ldrb	r2, [r3, #0]
 8000fca:	4b1f      	ldr	r3, [pc, #124]	@ (8001048 <updateCharValue+0x9c>)
 8000fcc:	711a      	strb	r2, [r3, #4]
	UPDATE_CHAR[5]=handleService[1];
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	785a      	ldrb	r2, [r3, #1]
 8000fd2:	4b1d      	ldr	r3, [pc, #116]	@ (8001048 <updateCharValue+0x9c>)
 8000fd4:	715a      	strb	r2, [r3, #5]
	UPDATE_CHAR[6]=handleChar[0];
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	781a      	ldrb	r2, [r3, #0]
 8000fda:	4b1b      	ldr	r3, [pc, #108]	@ (8001048 <updateCharValue+0x9c>)
 8000fdc:	719a      	strb	r2, [r3, #6]
	UPDATE_CHAR[7]=handleChar[1];
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	785a      	ldrb	r2, [r3, #1]
 8000fe2:	4b19      	ldr	r3, [pc, #100]	@ (8001048 <updateCharValue+0x9c>)
 8000fe4:	71da      	strb	r2, [r3, #7]
	UPDATE_CHAR[8]=offset;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	4b17      	ldr	r3, [pc, #92]	@ (8001048 <updateCharValue+0x9c>)
 8000fec:	721a      	strb	r2, [r3, #8]
	UPDATE_CHAR[9]=size;
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	4b15      	ldr	r3, [pc, #84]	@ (8001048 <updateCharValue+0x9c>)
 8000ff4:	725a      	strb	r2, [r3, #9]

	uint8_t* commandComplete;
	commandComplete=(uint8_t*)malloc(10+size);
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	330a      	adds	r3, #10
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f002 ff6c 	bl	8003ed8 <malloc>
 8001000:	4603      	mov	r3, r0
 8001002:	617b      	str	r3, [r7, #20]
	memcpy(commandComplete,UPDATE_CHAR,10);
 8001004:	220a      	movs	r2, #10
 8001006:	4910      	ldr	r1, [pc, #64]	@ (8001048 <updateCharValue+0x9c>)
 8001008:	6978      	ldr	r0, [r7, #20]
 800100a:	f003 f99a 	bl	8004342 <memcpy>
	memcpy(commandComplete+10,data,size);
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	330a      	adds	r3, #10
 8001012:	683a      	ldr	r2, [r7, #0]
 8001014:	6a39      	ldr	r1, [r7, #32]
 8001016:	4618      	mov	r0, r3
 8001018:	f003 f993 	bl	8004342 <memcpy>

	BLE_command(commandComplete,10+size,ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),0);
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	f103 010a 	add.w	r1, r3, #10
 8001022:	2300      	movs	r3, #0
 8001024:	9300      	str	r3, [sp, #0]
 8001026:	2307      	movs	r3, #7
 8001028:	4a08      	ldr	r2, [pc, #32]	@ (800104c <updateCharValue+0xa0>)
 800102a:	6978      	ldr	r0, [r7, #20]
 800102c:	f7ff fef8 	bl	8000e20 <BLE_command>

	free(commandComplete);
 8001030:	6978      	ldr	r0, [r7, #20]
 8001032:	f002 ff59 	bl	8003ee8 <free>
	free(rxEvent);
 8001036:	4b06      	ldr	r3, [pc, #24]	@ (8001050 <updateCharValue+0xa4>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4618      	mov	r0, r3
 800103c:	f002 ff54 	bl	8003ee8 <free>
}
 8001040:	bf00      	nop
 8001042:	3718      	adds	r7, #24
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	200000d8 	.word	0x200000d8
 800104c:	200000d0 	.word	0x200000d0
 8001050:	200002d0 	.word	0x200002d0

08001054 <i2c_init>:
#include "stm32l475xx.h"
#include "i2c.h"

#define TIMEOUT 1000000

void i2c_init() {
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
    // Disable I2C2 for configuration
    I2C2->CR1 &= ~I2C_CR1_PE;
 8001058:	4b2d      	ldr	r3, [pc, #180]	@ (8001110 <i2c_init+0xbc>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a2c      	ldr	r2, [pc, #176]	@ (8001110 <i2c_init+0xbc>)
 800105e:	f023 0301 	bic.w	r3, r3, #1
 8001062:	6013      	str	r3, [r2, #0]

    // Enable clocks for GPIOB and I2C2
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 8001064:	4b2b      	ldr	r3, [pc, #172]	@ (8001114 <i2c_init+0xc0>)
 8001066:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001068:	4a2a      	ldr	r2, [pc, #168]	@ (8001114 <i2c_init+0xc0>)
 800106a:	f043 0302 	orr.w	r3, r3, #2
 800106e:	64d3      	str	r3, [r2, #76]	@ 0x4c
    RCC->APB1ENR1 |= RCC_APB1ENR1_I2C2EN;
 8001070:	4b28      	ldr	r3, [pc, #160]	@ (8001114 <i2c_init+0xc0>)
 8001072:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001074:	4a27      	ldr	r2, [pc, #156]	@ (8001114 <i2c_init+0xc0>)
 8001076:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800107a:	6593      	str	r3, [r2, #88]	@ 0x58

    // Configure PB10 (SCL) and PB11 (SDA) for Alternate Function (AF4 for I2C)
    GPIOB->MODER &= ~(GPIO_MODER_MODE10 | GPIO_MODER_MODE11);
 800107c:	4b26      	ldr	r3, [pc, #152]	@ (8001118 <i2c_init+0xc4>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a25      	ldr	r2, [pc, #148]	@ (8001118 <i2c_init+0xc4>)
 8001082:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8001086:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= (GPIO_MODER_MODE10_1 | GPIO_MODER_MODE11_1);
 8001088:	4b23      	ldr	r3, [pc, #140]	@ (8001118 <i2c_init+0xc4>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a22      	ldr	r2, [pc, #136]	@ (8001118 <i2c_init+0xc4>)
 800108e:	f443 0320 	orr.w	r3, r3, #10485760	@ 0xa00000
 8001092:	6013      	str	r3, [r2, #0]

    // Configure Alternate Function (AF4) for PB10 and PB11
    GPIOB->AFR[1] &= ~(GPIO_AFRH_AFSEL10 | GPIO_AFRH_AFSEL11);
 8001094:	4b20      	ldr	r3, [pc, #128]	@ (8001118 <i2c_init+0xc4>)
 8001096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001098:	4a1f      	ldr	r2, [pc, #124]	@ (8001118 <i2c_init+0xc4>)
 800109a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800109e:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->AFR[1] |= (GPIO_AFRH_AFSEL10_2 | GPIO_AFRH_AFSEL11_2);
 80010a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001118 <i2c_init+0xc4>)
 80010a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010a4:	4a1c      	ldr	r2, [pc, #112]	@ (8001118 <i2c_init+0xc4>)
 80010a6:	f443 4388 	orr.w	r3, r3, #17408	@ 0x4400
 80010aa:	6253      	str	r3, [r2, #36]	@ 0x24

    // Set PB10 and PB11 to Open-Drain mode
    GPIOB->OTYPER |= (GPIO_OTYPER_OT10 | GPIO_OTYPER_OT11);
 80010ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001118 <i2c_init+0xc4>)
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	4a19      	ldr	r2, [pc, #100]	@ (8001118 <i2c_init+0xc4>)
 80010b2:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 80010b6:	6053      	str	r3, [r2, #4]

    // Enable Pull-up resistors for PB10 and PB11
    GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPD10 | GPIO_PUPDR_PUPD11);
 80010b8:	4b17      	ldr	r3, [pc, #92]	@ (8001118 <i2c_init+0xc4>)
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	4a16      	ldr	r2, [pc, #88]	@ (8001118 <i2c_init+0xc4>)
 80010be:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80010c2:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR |= (GPIO_PUPDR_PUPD10_1 | GPIO_PUPDR_PUPD11_1);
 80010c4:	4b14      	ldr	r3, [pc, #80]	@ (8001118 <i2c_init+0xc4>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	4a13      	ldr	r2, [pc, #76]	@ (8001118 <i2c_init+0xc4>)
 80010ca:	f443 0320 	orr.w	r3, r3, #10485760	@ 0xa00000
 80010ce:	60d3      	str	r3, [r2, #12]

    // Set speed for PB10 and PB11
    GPIOB->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED10 | GPIO_OSPEEDR_OSPEED11);
 80010d0:	4b11      	ldr	r3, [pc, #68]	@ (8001118 <i2c_init+0xc4>)
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	4a10      	ldr	r2, [pc, #64]	@ (8001118 <i2c_init+0xc4>)
 80010d6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80010da:	6093      	str	r3, [r2, #8]
    GPIOB->OSPEEDR |= (GPIO_OSPEEDR_OSPEED10_0 | GPIO_OSPEEDR_OSPEED11_0);
 80010dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001118 <i2c_init+0xc4>)
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001118 <i2c_init+0xc4>)
 80010e2:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 80010e6:	6093      	str	r3, [r2, #8]

    // Enable interrupts for TX, RX, and Transfer Complete
    I2C2->CR1 |= (I2C_CR1_TXIE | I2C_CR1_RXIE | I2C_CR1_TCIE);
 80010e8:	4b09      	ldr	r3, [pc, #36]	@ (8001110 <i2c_init+0xbc>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a08      	ldr	r2, [pc, #32]	@ (8001110 <i2c_init+0xbc>)
 80010ee:	f043 0346 	orr.w	r3, r3, #70	@ 0x46
 80010f2:	6013      	str	r3, [r2, #0]

    // Configure Timing Register for 400 kHz I2C Fast Mode
    I2C2->TIMINGR = (0U << I2C_TIMINGR_PRESC_Pos) | // Prescaler = 0, using 4 MHz clock
 80010f4:	4b06      	ldr	r3, [pc, #24]	@ (8001110 <i2c_init+0xbc>)
 80010f6:	4a09      	ldr	r2, [pc, #36]	@ (800111c <i2c_init+0xc8>)
 80010f8:	611a      	str	r2, [r3, #16]
            (0xC3 << I2C_TIMINGR_SCLH_Pos) | // SCL high period = 195 (Thigh)
            (0x02 << I2C_TIMINGR_SDADEL_Pos) | // Data setup delay = 2
            (0x04 << I2C_TIMINGR_SCLDEL_Pos); // Data hold delay = 4

    // Enable I2C2 Peripheral
    I2C2->CR1 |= I2C_CR1_PE;
 80010fa:	4b05      	ldr	r3, [pc, #20]	@ (8001110 <i2c_init+0xbc>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a04      	ldr	r2, [pc, #16]	@ (8001110 <i2c_init+0xbc>)
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	6013      	str	r3, [r2, #0]
}
 8001106:	bf00      	nop
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	40005800 	.word	0x40005800
 8001114:	40021000 	.word	0x40021000
 8001118:	48000400 	.word	0x48000400
 800111c:	0042c3c7 	.word	0x0042c3c7

08001120 <i2c_transaction>:

uint8_t i2c_transaction(uint8_t address, uint8_t dir, uint8_t* data, uint8_t len) {
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	603a      	str	r2, [r7, #0]
 8001128:	461a      	mov	r2, r3
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
 800112e:	460b      	mov	r3, r1
 8001130:	71bb      	strb	r3, [r7, #6]
 8001132:	4613      	mov	r3, r2
 8001134:	717b      	strb	r3, [r7, #5]
    uint32_t timeout_counter = TIMEOUT;
 8001136:	4b58      	ldr	r3, [pc, #352]	@ (8001298 <i2c_transaction+0x178>)
 8001138:	60fb      	str	r3, [r7, #12]

    while ((I2C2->ISR & I2C_ISR_BUSY) && timeout_counter--) {
 800113a:	e007      	b.n	800114c <i2c_transaction+0x2c>
        if (timeout_counter == 0) {
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d104      	bne.n	800114c <i2c_transaction+0x2c>
            printf("I2C busy timeout\n");
 8001142:	4856      	ldr	r0, [pc, #344]	@ (800129c <i2c_transaction+0x17c>)
 8001144:	f003 f8b0 	bl	80042a8 <puts>
            return 0; // Timeout error
 8001148:	2300      	movs	r3, #0
 800114a:	e0a1      	b.n	8001290 <i2c_transaction+0x170>
    while ((I2C2->ISR & I2C_ISR_BUSY) && timeout_counter--) {
 800114c:	4b54      	ldr	r3, [pc, #336]	@ (80012a0 <i2c_transaction+0x180>)
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d004      	beq.n	8001162 <i2c_transaction+0x42>
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	1e5a      	subs	r2, r3, #1
 800115c:	60fa      	str	r2, [r7, #12]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d1ec      	bne.n	800113c <i2c_transaction+0x1c>
        }
    }

    if (dir == 0) {  // WRITE operation
 8001162:	79bb      	ldrb	r3, [r7, #6]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d146      	bne.n	80011f6 <i2c_transaction+0xd6>
        I2C2->CR2 = (address << 1) | (0 << 10) | (len << 16);
 8001168:	79fb      	ldrb	r3, [r7, #7]
 800116a:	005a      	lsls	r2, r3, #1
 800116c:	797b      	ldrb	r3, [r7, #5]
 800116e:	041b      	lsls	r3, r3, #16
 8001170:	431a      	orrs	r2, r3
 8001172:	4b4b      	ldr	r3, [pc, #300]	@ (80012a0 <i2c_transaction+0x180>)
 8001174:	605a      	str	r2, [r3, #4]
        I2C2->CR2 |= I2C_CR2_START;
 8001176:	4b4a      	ldr	r3, [pc, #296]	@ (80012a0 <i2c_transaction+0x180>)
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	4a49      	ldr	r2, [pc, #292]	@ (80012a0 <i2c_transaction+0x180>)
 800117c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001180:	6053      	str	r3, [r2, #4]

        for (uint8_t i = 0; i < len; i++) {
 8001182:	2300      	movs	r3, #0
 8001184:	72fb      	strb	r3, [r7, #11]
 8001186:	e00f      	b.n	80011a8 <i2c_transaction+0x88>
            while (!(I2C2->ISR & I2C_ISR_TXIS));  // Wait for TX buffer
 8001188:	bf00      	nop
 800118a:	4b45      	ldr	r3, [pc, #276]	@ (80012a0 <i2c_transaction+0x180>)
 800118c:	699b      	ldr	r3, [r3, #24]
 800118e:	f003 0302 	and.w	r3, r3, #2
 8001192:	2b00      	cmp	r3, #0
 8001194:	d0f9      	beq.n	800118a <i2c_transaction+0x6a>
            I2C2->TXDR = data[i];  // Send byte
 8001196:	7afb      	ldrb	r3, [r7, #11]
 8001198:	683a      	ldr	r2, [r7, #0]
 800119a:	4413      	add	r3, r2
 800119c:	781a      	ldrb	r2, [r3, #0]
 800119e:	4b40      	ldr	r3, [pc, #256]	@ (80012a0 <i2c_transaction+0x180>)
 80011a0:	629a      	str	r2, [r3, #40]	@ 0x28
        for (uint8_t i = 0; i < len; i++) {
 80011a2:	7afb      	ldrb	r3, [r7, #11]
 80011a4:	3301      	adds	r3, #1
 80011a6:	72fb      	strb	r3, [r7, #11]
 80011a8:	7afa      	ldrb	r2, [r7, #11]
 80011aa:	797b      	ldrb	r3, [r7, #5]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d3eb      	bcc.n	8001188 <i2c_transaction+0x68>
        }

        while (!(I2C2->ISR & I2C_ISR_TC)) {
 80011b0:	e013      	b.n	80011da <i2c_transaction+0xba>
            if (I2C2->ISR & I2C_ISR_NACKF) {
 80011b2:	4b3b      	ldr	r3, [pc, #236]	@ (80012a0 <i2c_transaction+0x180>)
 80011b4:	699b      	ldr	r3, [r3, #24]
 80011b6:	f003 0310 	and.w	r3, r3, #16
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d00d      	beq.n	80011da <i2c_transaction+0xba>
                I2C2->ICR |= I2C_ICR_NACKCF;
 80011be:	4b38      	ldr	r3, [pc, #224]	@ (80012a0 <i2c_transaction+0x180>)
 80011c0:	69db      	ldr	r3, [r3, #28]
 80011c2:	4a37      	ldr	r2, [pc, #220]	@ (80012a0 <i2c_transaction+0x180>)
 80011c4:	f043 0310 	orr.w	r3, r3, #16
 80011c8:	61d3      	str	r3, [r2, #28]
                I2C2->CR2 |= I2C_CR2_STOP;
 80011ca:	4b35      	ldr	r3, [pc, #212]	@ (80012a0 <i2c_transaction+0x180>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	4a34      	ldr	r2, [pc, #208]	@ (80012a0 <i2c_transaction+0x180>)
 80011d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011d4:	6053      	str	r3, [r2, #4]
                return 0; // NACK received
 80011d6:	2300      	movs	r3, #0
 80011d8:	e05a      	b.n	8001290 <i2c_transaction+0x170>
        while (!(I2C2->ISR & I2C_ISR_TC)) {
 80011da:	4b31      	ldr	r3, [pc, #196]	@ (80012a0 <i2c_transaction+0x180>)
 80011dc:	699b      	ldr	r3, [r3, #24]
 80011de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d0e5      	beq.n	80011b2 <i2c_transaction+0x92>
            }
        }

        I2C2->CR2 |= I2C_CR2_STOP;
 80011e6:	4b2e      	ldr	r3, [pc, #184]	@ (80012a0 <i2c_transaction+0x180>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	4a2d      	ldr	r2, [pc, #180]	@ (80012a0 <i2c_transaction+0x180>)
 80011ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011f0:	6053      	str	r3, [r2, #4]
        return 1;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e04c      	b.n	8001290 <i2c_transaction+0x170>
    } else {  // READ operation
        I2C2->CR2 = (address << 1) | (1 << 10) | (len << 16);
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80011fe:	797b      	ldrb	r3, [r7, #5]
 8001200:	041b      	lsls	r3, r3, #16
 8001202:	431a      	orrs	r2, r3
 8001204:	4b26      	ldr	r3, [pc, #152]	@ (80012a0 <i2c_transaction+0x180>)
 8001206:	605a      	str	r2, [r3, #4]
        I2C2->CR2 |= I2C_CR2_START;
 8001208:	4b25      	ldr	r3, [pc, #148]	@ (80012a0 <i2c_transaction+0x180>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	4a24      	ldr	r2, [pc, #144]	@ (80012a0 <i2c_transaction+0x180>)
 800120e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001212:	6053      	str	r3, [r2, #4]

        for (uint8_t i = 0; i < len; i++) {
 8001214:	2300      	movs	r3, #0
 8001216:	72bb      	strb	r3, [r7, #10]
 8001218:	e010      	b.n	800123c <i2c_transaction+0x11c>
            while (!(I2C2->ISR & I2C_ISR_RXNE));
 800121a:	bf00      	nop
 800121c:	4b20      	ldr	r3, [pc, #128]	@ (80012a0 <i2c_transaction+0x180>)
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	f003 0304 	and.w	r3, r3, #4
 8001224:	2b00      	cmp	r3, #0
 8001226:	d0f9      	beq.n	800121c <i2c_transaction+0xfc>
            data[i] = I2C2->RXDR;
 8001228:	4b1d      	ldr	r3, [pc, #116]	@ (80012a0 <i2c_transaction+0x180>)
 800122a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800122c:	7abb      	ldrb	r3, [r7, #10]
 800122e:	683a      	ldr	r2, [r7, #0]
 8001230:	4413      	add	r3, r2
 8001232:	b2ca      	uxtb	r2, r1
 8001234:	701a      	strb	r2, [r3, #0]
        for (uint8_t i = 0; i < len; i++) {
 8001236:	7abb      	ldrb	r3, [r7, #10]
 8001238:	3301      	adds	r3, #1
 800123a:	72bb      	strb	r3, [r7, #10]
 800123c:	7aba      	ldrb	r2, [r7, #10]
 800123e:	797b      	ldrb	r3, [r7, #5]
 8001240:	429a      	cmp	r2, r3
 8001242:	d3ea      	bcc.n	800121a <i2c_transaction+0xfa>
        }

        while (!(I2C2->ISR & I2C_ISR_TC)) {
 8001244:	e017      	b.n	8001276 <i2c_transaction+0x156>
            if (I2C2->ISR & I2C_ISR_NACKF) {
 8001246:	4b16      	ldr	r3, [pc, #88]	@ (80012a0 <i2c_transaction+0x180>)
 8001248:	699b      	ldr	r3, [r3, #24]
 800124a:	f003 0310 	and.w	r3, r3, #16
 800124e:	2b00      	cmp	r3, #0
 8001250:	d011      	beq.n	8001276 <i2c_transaction+0x156>
                I2C2->CR2 |= I2C_CR2_STOP;
 8001252:	4b13      	ldr	r3, [pc, #76]	@ (80012a0 <i2c_transaction+0x180>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	4a12      	ldr	r2, [pc, #72]	@ (80012a0 <i2c_transaction+0x180>)
 8001258:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800125c:	6053      	str	r3, [r2, #4]
                while (!(I2C2->ISR & I2C_ISR_STOPF));
 800125e:	bf00      	nop
 8001260:	4b0f      	ldr	r3, [pc, #60]	@ (80012a0 <i2c_transaction+0x180>)
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	f003 0320 	and.w	r3, r3, #32
 8001268:	2b00      	cmp	r3, #0
 800126a:	d0f9      	beq.n	8001260 <i2c_transaction+0x140>
                I2C2->ICR = I2C_ICR_STOPCF;
 800126c:	4b0c      	ldr	r3, [pc, #48]	@ (80012a0 <i2c_transaction+0x180>)
 800126e:	2220      	movs	r2, #32
 8001270:	61da      	str	r2, [r3, #28]
                return 0; // NACK received
 8001272:	2300      	movs	r3, #0
 8001274:	e00c      	b.n	8001290 <i2c_transaction+0x170>
        while (!(I2C2->ISR & I2C_ISR_TC)) {
 8001276:	4b0a      	ldr	r3, [pc, #40]	@ (80012a0 <i2c_transaction+0x180>)
 8001278:	699b      	ldr	r3, [r3, #24]
 800127a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800127e:	2b00      	cmp	r3, #0
 8001280:	d0e1      	beq.n	8001246 <i2c_transaction+0x126>
            }
        }

        I2C2->CR2 |= I2C_CR2_STOP;
 8001282:	4b07      	ldr	r3, [pc, #28]	@ (80012a0 <i2c_transaction+0x180>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	4a06      	ldr	r2, [pc, #24]	@ (80012a0 <i2c_transaction+0x180>)
 8001288:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800128c:	6053      	str	r3, [r2, #4]
        return 1;
 800128e:	2301      	movs	r3, #1
    }
}
 8001290:	4618      	mov	r0, r3
 8001292:	3710      	adds	r7, #16
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	000f4240 	.word	0x000f4240
 800129c:	08004e58 	.word	0x08004e58
 80012a0:	40005800 	.word	0x40005800

080012a4 <leds_init>:


/* Include memory map of our MCU */
#include <stm32l475xx.h>

void leds_init(){
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
	// Enable GPIOA and GPIOB clocks
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN; // Enable clock for GPIOA
 80012a8:	4b32      	ldr	r3, [pc, #200]	@ (8001374 <leds_init+0xd0>)
 80012aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ac:	4a31      	ldr	r2, [pc, #196]	@ (8001374 <leds_init+0xd0>)
 80012ae:	f043 0301 	orr.w	r3, r3, #1
 80012b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN; // Enable clock for GPIOB
 80012b4:	4b2f      	ldr	r3, [pc, #188]	@ (8001374 <leds_init+0xd0>)
 80012b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b8:	4a2e      	ldr	r2, [pc, #184]	@ (8001374 <leds_init+0xd0>)
 80012ba:	f043 0302 	orr.w	r3, r3, #2
 80012be:	64d3      	str	r3, [r2, #76]	@ 0x4c

	/* Configure PA5 as an output by clearing all bits and setting the mode */
	GPIOA->MODER &= ~GPIO_MODER_MODE5;
 80012c0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80012ca:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80012ce:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODE5_0;
 80012d0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80012da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012de:	6013      	str	r3, [r2, #0]

	/* Configure the GPIO output as push pull (transistor for high and low) */
	GPIOA->OTYPER &= ~GPIO_OTYPER_OT5;
 80012e0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80012ea:	f023 0320 	bic.w	r3, r3, #32
 80012ee:	6053      	str	r3, [r2, #4]

	/* Disable the internal pull-up and pull-down resistors */
	GPIOA->PUPDR &= GPIO_PUPDR_PUPD5;
 80012f0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80012f4:	68db      	ldr	r3, [r3, #12]
 80012f6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80012fa:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80012fe:	60d3      	str	r3, [r2, #12]

	/* Configure the GPIO to use low speed mode */
	GPIOA->OSPEEDR |= (0x3 << GPIO_OSPEEDR_OSPEED5_Pos);
 8001300:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800130a:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 800130e:	6093      	str	r3, [r2, #8]

	/* Turn off the LED */
	GPIOA->ODR &= ~GPIO_ODR_OD5;
 8001310:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001314:	695b      	ldr	r3, [r3, #20]
 8001316:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800131a:	f023 0320 	bic.w	r3, r3, #32
 800131e:	6153      	str	r3, [r2, #20]

	/* Configure PB14 as an output by clearing all bits and setting the mode */
    GPIOB->MODER &= ~GPIO_MODER_MODE14;
 8001320:	4b15      	ldr	r3, [pc, #84]	@ (8001378 <leds_init+0xd4>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a14      	ldr	r2, [pc, #80]	@ (8001378 <leds_init+0xd4>)
 8001326:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800132a:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= GPIO_MODER_MODE14_0;
 800132c:	4b12      	ldr	r3, [pc, #72]	@ (8001378 <leds_init+0xd4>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a11      	ldr	r2, [pc, #68]	@ (8001378 <leds_init+0xd4>)
 8001332:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001336:	6013      	str	r3, [r2, #0]

    /* Configure the GPIO output as push pull (transistor for high and low) */
    GPIOB->OTYPER &= ~GPIO_OTYPER_OT14;
 8001338:	4b0f      	ldr	r3, [pc, #60]	@ (8001378 <leds_init+0xd4>)
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	4a0e      	ldr	r2, [pc, #56]	@ (8001378 <leds_init+0xd4>)
 800133e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001342:	6053      	str	r3, [r2, #4]

    /* Disable the internal pull-up and pull-down resistors */
    GPIOB->PUPDR &= GPIO_PUPDR_PUPD14;
 8001344:	4b0c      	ldr	r3, [pc, #48]	@ (8001378 <leds_init+0xd4>)
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	4a0b      	ldr	r2, [pc, #44]	@ (8001378 <leds_init+0xd4>)
 800134a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800134e:	60d3      	str	r3, [r2, #12]

    /* Configure the GPIO to use low speed mode */
    GPIOB->OSPEEDR |= (0x3 << GPIO_OSPEEDR_OSPEED14_Pos);
 8001350:	4b09      	ldr	r3, [pc, #36]	@ (8001378 <leds_init+0xd4>)
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	4a08      	ldr	r2, [pc, #32]	@ (8001378 <leds_init+0xd4>)
 8001356:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
 800135a:	6093      	str	r3, [r2, #8]

    /* Turn off the LED */
    GPIOB->ODR &= ~GPIO_ODR_OD14;
 800135c:	4b06      	ldr	r3, [pc, #24]	@ (8001378 <leds_init+0xd4>)
 800135e:	695b      	ldr	r3, [r3, #20]
 8001360:	4a05      	ldr	r2, [pc, #20]	@ (8001378 <leds_init+0xd4>)
 8001362:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001366:	6153      	str	r3, [r2, #20]
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	40021000 	.word	0x40021000
 8001378:	48000400 	.word	0x48000400

0800137c <leds_set>:

void leds_set(uint8_t led)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	71fb      	strb	r3, [r7, #7]
  // TODO implement this

	 // Control LED1 (PA5)
	    if (led & 0x01) {
 8001386:	79fb      	ldrb	r3, [r7, #7]
 8001388:	f003 0301 	and.w	r3, r3, #1
 800138c:	2b00      	cmp	r3, #0
 800138e:	d008      	beq.n	80013a2 <leds_set+0x26>
	        GPIOA->ODR |= (1 << 5); // Turn on LED1
 8001390:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001394:	695b      	ldr	r3, [r3, #20]
 8001396:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800139a:	f043 0320 	orr.w	r3, r3, #32
 800139e:	6153      	str	r3, [r2, #20]
 80013a0:	e007      	b.n	80013b2 <leds_set+0x36>
	    } else {
	    	GPIOA->ODR &= ~GPIO_ODR_OD5; // Turn off LED1
 80013a2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80013a6:	695b      	ldr	r3, [r3, #20]
 80013a8:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80013ac:	f023 0320 	bic.w	r3, r3, #32
 80013b0:	6153      	str	r3, [r2, #20]
	    }

	    // Control LED2 (PB14)
	    if (led & 0x02) {
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	f003 0302 	and.w	r3, r3, #2
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d006      	beq.n	80013ca <leds_set+0x4e>
	        GPIOB->ODR |= (1 << 14); // Turn on LED2
 80013bc:	4b09      	ldr	r3, [pc, #36]	@ (80013e4 <leds_set+0x68>)
 80013be:	695b      	ldr	r3, [r3, #20]
 80013c0:	4a08      	ldr	r2, [pc, #32]	@ (80013e4 <leds_set+0x68>)
 80013c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013c6:	6153      	str	r3, [r2, #20]
	    } else {
	        GPIOB->ODR &= ~GPIO_ODR_OD14; // Turn off LED2
	    }
}
 80013c8:	e005      	b.n	80013d6 <leds_set+0x5a>
	        GPIOB->ODR &= ~GPIO_ODR_OD14; // Turn off LED2
 80013ca:	4b06      	ldr	r3, [pc, #24]	@ (80013e4 <leds_set+0x68>)
 80013cc:	695b      	ldr	r3, [r3, #20]
 80013ce:	4a05      	ldr	r2, [pc, #20]	@ (80013e4 <leds_set+0x68>)
 80013d0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80013d4:	6153      	str	r3, [r2, #20]
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	48000400 	.word	0x48000400

080013e8 <lsm6dsl_init>:
#include "i2c.h"
#include <stdio.h>

uint8_t who_am_i = LSM6DSL_WHO_AM_I;

void lsm6dsl_init() {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
    uint8_t return_value = 0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	71fb      	strb	r3, [r7, #7]
    uint8_t check_value = 0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	717b      	strb	r3, [r7, #5]

    // Send WHO_AM_I register address
    return_value = i2c_transaction(LSM6DSL_I2C_ADDR, 0, &who_am_i, 1);
 80013f6:	2301      	movs	r3, #1
 80013f8:	4a25      	ldr	r2, [pc, #148]	@ (8001490 <lsm6dsl_init+0xa8>)
 80013fa:	2100      	movs	r1, #0
 80013fc:	206a      	movs	r0, #106	@ 0x6a
 80013fe:	f7ff fe8f 	bl	8001120 <i2c_transaction>
 8001402:	4603      	mov	r3, r0
 8001404:	71fb      	strb	r3, [r7, #7]
    if (return_value != 1) {
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d003      	beq.n	8001414 <lsm6dsl_init+0x2c>
        printf("WHO_AM_I send failed\n");
 800140c:	4821      	ldr	r0, [pc, #132]	@ (8001494 <lsm6dsl_init+0xac>)
 800140e:	f002 ff4b 	bl	80042a8 <puts>
        return;
 8001412:	e039      	b.n	8001488 <lsm6dsl_init+0xa0>
    }

    // Read WHO_AM_I register value
    return_value = i2c_transaction(LSM6DSL_I2C_ADDR, 1, &check_value, 1);
 8001414:	1d7a      	adds	r2, r7, #5
 8001416:	2301      	movs	r3, #1
 8001418:	2101      	movs	r1, #1
 800141a:	206a      	movs	r0, #106	@ 0x6a
 800141c:	f7ff fe80 	bl	8001120 <i2c_transaction>
 8001420:	4603      	mov	r3, r0
 8001422:	71fb      	strb	r3, [r7, #7]
    if (return_value != 1) {
 8001424:	79fb      	ldrb	r3, [r7, #7]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d003      	beq.n	8001432 <lsm6dsl_init+0x4a>
        printf("WHO_AM_I receive failed\n");
 800142a:	481b      	ldr	r0, [pc, #108]	@ (8001498 <lsm6dsl_init+0xb0>)
 800142c:	f002 ff3c 	bl	80042a8 <puts>
        return;
 8001430:	e02a      	b.n	8001488 <lsm6dsl_init+0xa0>
    }

    printf("WHO_AM_I: 0x%X\n", check_value);
 8001432:	797b      	ldrb	r3, [r7, #5]
 8001434:	4619      	mov	r1, r3
 8001436:	4819      	ldr	r0, [pc, #100]	@ (800149c <lsm6dsl_init+0xb4>)
 8001438:	f002 fece 	bl	80041d8 <iprintf>

    uint8_t config_data[2];  // Buffer to store register address and value
    uint8_t ret;             // Variable to store return status of I2C transactions

    // Configure accelerometer control register (CTRL1_XL)
    config_data[0] = LSM6DSL_CTRL1_XL;  // Register address
 800143c:	2310      	movs	r3, #16
 800143e:	703b      	strb	r3, [r7, #0]
    config_data[1] = CTRL1_XL_CONFIG;   // Configuration value
 8001440:	2350      	movs	r3, #80	@ 0x50
 8001442:	707b      	strb	r3, [r7, #1]

    // Send configuration to the LSM6DSL sensor via I2C
    ret = i2c_transaction(LSM6DSL_I2C_ADDR, 0, config_data, 2);
 8001444:	463a      	mov	r2, r7
 8001446:	2302      	movs	r3, #2
 8001448:	2100      	movs	r1, #0
 800144a:	206a      	movs	r0, #106	@ 0x6a
 800144c:	f7ff fe68 	bl	8001120 <i2c_transaction>
 8001450:	4603      	mov	r3, r0
 8001452:	71bb      	strb	r3, [r7, #6]
    if (ret != 1) {
 8001454:	79bb      	ldrb	r3, [r7, #6]
 8001456:	2b01      	cmp	r3, #1
 8001458:	d003      	beq.n	8001462 <lsm6dsl_init+0x7a>
        printf("Accelerometer configuration failed\n");
 800145a:	4811      	ldr	r0, [pc, #68]	@ (80014a0 <lsm6dsl_init+0xb8>)
 800145c:	f002 ff24 	bl	80042a8 <puts>
        return;
 8001460:	e012      	b.n	8001488 <lsm6dsl_init+0xa0>
    }

    // Configure another register (CTRL3_C)
    config_data[0] = LSM6DSL_CTRL3_C;  // Register address
 8001462:	2312      	movs	r3, #18
 8001464:	703b      	strb	r3, [r7, #0]
    config_data[1] = CTRL3_C_CONFIG;   // Configuration value
 8001466:	2304      	movs	r3, #4
 8001468:	707b      	strb	r3, [r7, #1]

    // Send second configuration to the sensor
    ret = i2c_transaction(LSM6DSL_I2C_ADDR, 0, config_data, 2);
 800146a:	463a      	mov	r2, r7
 800146c:	2302      	movs	r3, #2
 800146e:	2100      	movs	r1, #0
 8001470:	206a      	movs	r0, #106	@ 0x6a
 8001472:	f7ff fe55 	bl	8001120 <i2c_transaction>
 8001476:	4603      	mov	r3, r0
 8001478:	71bb      	strb	r3, [r7, #6]
    if (ret != 1) {
 800147a:	79bb      	ldrb	r3, [r7, #6]
 800147c:	2b01      	cmp	r3, #1
 800147e:	d003      	beq.n	8001488 <lsm6dsl_init+0xa0>
        printf("CTRL3_C configuration failed\n");
 8001480:	4808      	ldr	r0, [pc, #32]	@ (80014a4 <lsm6dsl_init+0xbc>)
 8001482:	f002 ff11 	bl	80042a8 <puts>
        return;
 8001486:	bf00      	nop
    }
}
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20000130 	.word	0x20000130
 8001494:	08004e6c 	.word	0x08004e6c
 8001498:	08004e84 	.word	0x08004e84
 800149c:	08004e9c 	.word	0x08004e9c
 80014a0:	08004eac 	.word	0x08004eac
 80014a4:	08004ed0 	.word	0x08004ed0

080014a8 <lsm6dsl_read_xyz>:

void lsm6dsl_read_xyz(int16_t* x, int16_t* y, int16_t* z) {
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
    uint8_t reg_address = LSM6DSL_OUTX_L_XL;
 80014b4:	2328      	movs	r3, #40	@ 0x28
 80014b6:	75fb      	strb	r3, [r7, #23]
    uint8_t data[6];  // Buffer for raw acceleration data

    // Step 1: Write register address and read 6 bytes in one transaction
    if (i2c_transaction(LSM6DSL_I2C_ADDR, 0, &reg_address, 1) == 0) {
 80014b8:	f107 0217 	add.w	r2, r7, #23
 80014bc:	2301      	movs	r3, #1
 80014be:	2100      	movs	r1, #0
 80014c0:	206a      	movs	r0, #106	@ 0x6a
 80014c2:	f7ff fe2d 	bl	8001120 <i2c_transaction>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d103      	bne.n	80014d4 <lsm6dsl_read_xyz+0x2c>
        printf("Failed to write register address\n");
 80014cc:	4832      	ldr	r0, [pc, #200]	@ (8001598 <lsm6dsl_read_xyz+0xf0>)
 80014ce:	f002 feeb 	bl	80042a8 <puts>
        return;
 80014d2:	e058      	b.n	8001586 <lsm6dsl_read_xyz+0xde>
    }

    if (i2c_transaction(LSM6DSL_I2C_ADDR, 1, data, 6) == 0) {
 80014d4:	f107 0210 	add.w	r2, r7, #16
 80014d8:	2306      	movs	r3, #6
 80014da:	2101      	movs	r1, #1
 80014dc:	206a      	movs	r0, #106	@ 0x6a
 80014de:	f7ff fe1f 	bl	8001120 <i2c_transaction>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d103      	bne.n	80014f0 <lsm6dsl_read_xyz+0x48>
        printf("Failed to read accelerometer data\n");
 80014e8:	482c      	ldr	r0, [pc, #176]	@ (800159c <lsm6dsl_read_xyz+0xf4>)
 80014ea:	f002 fedd 	bl	80042a8 <puts>
        return;
 80014ee:	e04a      	b.n	8001586 <lsm6dsl_read_xyz+0xde>
    }

    // Step 2: Combine LSB and MSB into signed 16-bit integers
    *x = (int16_t)((data[1] << 8) | data[0]) * SENS2G;
 80014f0:	7c7b      	ldrb	r3, [r7, #17]
 80014f2:	021b      	lsls	r3, r3, #8
 80014f4:	b21a      	sxth	r2, r3
 80014f6:	7c3b      	ldrb	r3, [r7, #16]
 80014f8:	b21b      	sxth	r3, r3
 80014fa:	4313      	orrs	r3, r2
 80014fc:	b21b      	sxth	r3, r3
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff f932 	bl	8000768 <__aeabi_i2d>
 8001504:	a322      	add	r3, pc, #136	@ (adr r3, 8001590 <lsm6dsl_read_xyz+0xe8>)
 8001506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150a:	f7fe feb1 	bl	8000270 <__aeabi_dmul>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	4610      	mov	r0, r2
 8001514:	4619      	mov	r1, r3
 8001516:	f7ff f991 	bl	800083c <__aeabi_d2iz>
 800151a:	4603      	mov	r3, r0
 800151c:	b21a      	sxth	r2, r3
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	801a      	strh	r2, [r3, #0]
    *y = (int16_t)((data[3] << 8) | data[2]) * SENS2G;
 8001522:	7cfb      	ldrb	r3, [r7, #19]
 8001524:	021b      	lsls	r3, r3, #8
 8001526:	b21a      	sxth	r2, r3
 8001528:	7cbb      	ldrb	r3, [r7, #18]
 800152a:	b21b      	sxth	r3, r3
 800152c:	4313      	orrs	r3, r2
 800152e:	b21b      	sxth	r3, r3
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff f919 	bl	8000768 <__aeabi_i2d>
 8001536:	a316      	add	r3, pc, #88	@ (adr r3, 8001590 <lsm6dsl_read_xyz+0xe8>)
 8001538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800153c:	f7fe fe98 	bl	8000270 <__aeabi_dmul>
 8001540:	4602      	mov	r2, r0
 8001542:	460b      	mov	r3, r1
 8001544:	4610      	mov	r0, r2
 8001546:	4619      	mov	r1, r3
 8001548:	f7ff f978 	bl	800083c <__aeabi_d2iz>
 800154c:	4603      	mov	r3, r0
 800154e:	b21a      	sxth	r2, r3
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	801a      	strh	r2, [r3, #0]
    *z = (int16_t)((data[5] << 8) | data[4]) * SENS2G;
 8001554:	7d7b      	ldrb	r3, [r7, #21]
 8001556:	021b      	lsls	r3, r3, #8
 8001558:	b21a      	sxth	r2, r3
 800155a:	7d3b      	ldrb	r3, [r7, #20]
 800155c:	b21b      	sxth	r3, r3
 800155e:	4313      	orrs	r3, r2
 8001560:	b21b      	sxth	r3, r3
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff f900 	bl	8000768 <__aeabi_i2d>
 8001568:	a309      	add	r3, pc, #36	@ (adr r3, 8001590 <lsm6dsl_read_xyz+0xe8>)
 800156a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800156e:	f7fe fe7f 	bl	8000270 <__aeabi_dmul>
 8001572:	4602      	mov	r2, r0
 8001574:	460b      	mov	r3, r1
 8001576:	4610      	mov	r0, r2
 8001578:	4619      	mov	r1, r3
 800157a:	f7ff f95f 	bl	800083c <__aeabi_d2iz>
 800157e:	4603      	mov	r3, r0
 8001580:	b21a      	sxth	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	801a      	strh	r2, [r3, #0]
}
 8001586:	3718      	adds	r7, #24
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	f3af 8000 	nop.w
 8001590:	5a1cac08 	.word	0x5a1cac08
 8001594:	3faf3b64 	.word	0x3faf3b64
 8001598:	08004ef0 	.word	0x08004ef0
 800159c:	08004f14 	.word	0x08004f14

080015a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	db0b      	blt.n	80015ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015b2:	79fb      	ldrb	r3, [r7, #7]
 80015b4:	f003 021f 	and.w	r2, r3, #31
 80015b8:	4907      	ldr	r1, [pc, #28]	@ (80015d8 <__NVIC_EnableIRQ+0x38>)
 80015ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015be:	095b      	lsrs	r3, r3, #5
 80015c0:	2001      	movs	r0, #1
 80015c2:	fa00 f202 	lsl.w	r2, r0, r2
 80015c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	e000e100 	.word	0xe000e100

080015dc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80015e4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80015e8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80015ec:	f003 0301 	and.w	r3, r3, #1
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d013      	beq.n	800161c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80015f4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80015f8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80015fc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001600:	2b00      	cmp	r3, #0
 8001602:	d00b      	beq.n	800161c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001604:	e000      	b.n	8001608 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001606:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001608:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d0f9      	beq.n	8001606 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001612:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	b2d2      	uxtb	r2, r2
 800161a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800161c:	687b      	ldr	r3, [r7, #4]
}
 800161e:	4618      	mov	r0, r3
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <_write>:
#include "i2c.h"
/* Include lsm6dsl driver */
#include "lsm6dsl.h"

// Redefine the libc _write() function so you can use printf in your code
int _write(int file, char *ptr, int len) {
 800162a:	b580      	push	{r7, lr}
 800162c:	b086      	sub	sp, #24
 800162e:	af00      	add	r7, sp, #0
 8001630:	60f8      	str	r0, [r7, #12]
 8001632:	60b9      	str	r1, [r7, #8]
 8001634:	607a      	str	r2, [r7, #4]
 int i = 0;
 8001636:	2300      	movs	r3, #0
 8001638:	617b      	str	r3, [r7, #20]
 for (i = 0; i < len; i++) {
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]
 800163e:	e009      	b.n	8001654 <_write+0x2a>
 ITM_SendChar(*ptr++);
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	1c5a      	adds	r2, r3, #1
 8001644:	60ba      	str	r2, [r7, #8]
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff ffc7 	bl	80015dc <ITM_SendChar>
 for (i = 0; i < len; i++) {
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	3301      	adds	r3, #1
 8001652:	617b      	str	r3, [r7, #20]
 8001654:	697a      	ldr	r2, [r7, #20]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	429a      	cmp	r2, r3
 800165a:	dbf1      	blt.n	8001640 <_write+0x16>
 }
 return len;
 800165c:	687b      	ldr	r3, [r7, #4]
}
 800165e:	4618      	mov	r0, r3
 8001660:	3718      	adds	r7, #24
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
	...

08001668 <isMoving>:
uint32_t last_message_send_time = 0;


int16_t x_prev = 0, y_prev = 0, z_prev = 0;

int isMoving() {
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 int16_t x, y, z;
 lsm6dsl_read_xyz(&x, &y, &z);
 800166e:	1d3a      	adds	r2, r7, #4
 8001670:	1db9      	adds	r1, r7, #6
 8001672:	f107 0308 	add.w	r3, r7, #8
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff ff16 	bl	80014a8 <lsm6dsl_read_xyz>

 int16_t x_diff = abs(x - x_prev);
 800167c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001680:	461a      	mov	r2, r3
 8001682:	4b20      	ldr	r3, [pc, #128]	@ (8001704 <isMoving+0x9c>)
 8001684:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b00      	cmp	r3, #0
 800168c:	bfb8      	it	lt
 800168e:	425b      	neglt	r3, r3
 8001690:	81fb      	strh	r3, [r7, #14]
 int16_t y_diff = abs(y - y_prev);
 8001692:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001696:	461a      	mov	r2, r3
 8001698:	4b1b      	ldr	r3, [pc, #108]	@ (8001708 <isMoving+0xa0>)
 800169a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	bfb8      	it	lt
 80016a4:	425b      	neglt	r3, r3
 80016a6:	81bb      	strh	r3, [r7, #12]
 int16_t z_diff = abs(z - z_prev);
 80016a8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80016ac:	461a      	mov	r2, r3
 80016ae:	4b17      	ldr	r3, [pc, #92]	@ (800170c <isMoving+0xa4>)
 80016b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	bfb8      	it	lt
 80016ba:	425b      	neglt	r3, r3
 80016bc:	817b      	strh	r3, [r7, #10]

 x_prev = x;
 80016be:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80016c2:	4b10      	ldr	r3, [pc, #64]	@ (8001704 <isMoving+0x9c>)
 80016c4:	801a      	strh	r2, [r3, #0]
 y_prev = y;
 80016c6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80016ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001708 <isMoving+0xa0>)
 80016cc:	801a      	strh	r2, [r3, #0]
 z_prev = z;
 80016ce:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80016d2:	4b0e      	ldr	r3, [pc, #56]	@ (800170c <isMoving+0xa4>)
 80016d4:	801a      	strh	r2, [r3, #0]

 return ((x_diff > 500) || (y_diff > 500) || (z_diff > 500));
 80016d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016da:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80016de:	dc09      	bgt.n	80016f4 <isMoving+0x8c>
 80016e0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80016e4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80016e8:	dc04      	bgt.n	80016f4 <isMoving+0x8c>
 80016ea:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80016ee:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80016f2:	dd01      	ble.n	80016f8 <isMoving+0x90>
 80016f4:	2301      	movs	r3, #1
 80016f6:	e000      	b.n	80016fa <isMoving+0x92>
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	2000034c 	.word	0x2000034c
 8001708:	2000034e 	.word	0x2000034e
 800170c:	20000350 	.word	0x20000350

08001710 <handleState>:

void handleState() {
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
 switch (currentState) {
 8001714:	4b17      	ldr	r3, [pc, #92]	@ (8001774 <handleState+0x64>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d002      	beq.n	8001722 <handleState+0x12>
 800171c:	2b01      	cmp	r3, #1
 800171e:	d011      	beq.n	8001744 <handleState+0x34>
 minutes_lost = 0;
 currentState = FOUND;
 }
 break;
 }
}
 8001720:	e025      	b.n	800176e <handleState+0x5e>
 leds_set(0);
 8001722:	2000      	movs	r0, #0
 8001724:	f7ff fe2a 	bl	800137c <leds_set>
 if (minutes_lost > 0 && !isMoving()) {
 8001728:	4b13      	ldr	r3, [pc, #76]	@ (8001778 <handleState+0x68>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	b2db      	uxtb	r3, r3
 800172e:	2b00      	cmp	r3, #0
 8001730:	d01a      	beq.n	8001768 <handleState+0x58>
 8001732:	f7ff ff99 	bl	8001668 <isMoving>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d115      	bne.n	8001768 <handleState+0x58>
 currentState = LOST;
 800173c:	4b0d      	ldr	r3, [pc, #52]	@ (8001774 <handleState+0x64>)
 800173e:	2201      	movs	r2, #1
 8001740:	701a      	strb	r2, [r3, #0]
 break;
 8001742:	e011      	b.n	8001768 <handleState+0x58>
 leds_set(0);
 8001744:	2000      	movs	r0, #0
 8001746:	f7ff fe19 	bl	800137c <leds_set>
 if (isMoving()) {
 800174a:	f7ff ff8d 	bl	8001668 <isMoving>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d00b      	beq.n	800176c <handleState+0x5c>
 curr_counter = 0;
 8001754:	4b09      	ldr	r3, [pc, #36]	@ (800177c <handleState+0x6c>)
 8001756:	2200      	movs	r2, #0
 8001758:	801a      	strh	r2, [r3, #0]
 minutes_lost = 0;
 800175a:	4b07      	ldr	r3, [pc, #28]	@ (8001778 <handleState+0x68>)
 800175c:	2200      	movs	r2, #0
 800175e:	701a      	strb	r2, [r3, #0]
 currentState = FOUND;
 8001760:	4b04      	ldr	r3, [pc, #16]	@ (8001774 <handleState+0x64>)
 8001762:	2200      	movs	r2, #0
 8001764:	701a      	strb	r2, [r3, #0]
 break;
 8001766:	e001      	b.n	800176c <handleState+0x5c>
 break;
 8001768:	bf00      	nop
 800176a:	e000      	b.n	800176e <handleState+0x5e>
 break;
 800176c:	bf00      	nop
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20000342 	.word	0x20000342
 8001778:	20000340 	.word	0x20000340
 800177c:	2000033e 	.word	0x2000033e

08001780 <TIM2_IRQHandler>:

// TIM2 Interrupt Handler
void TIM2_IRQHandler(void) {
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
 if (TIM2->SR & TIM_SR_UIF) { // Check if update interrupt flag is set
 8001784:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001788:	691b      	ldr	r3, [r3, #16]
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	2b00      	cmp	r3, #0
 8001790:	d048      	beq.n	8001824 <TIM2_IRQHandler+0xa4>
 TIM2->SR &= ~TIM_SR_UIF; // Clear interrupt flag
 8001792:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001796:	691b      	ldr	r3, [r3, #16]
 8001798:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800179c:	f023 0301 	bic.w	r3, r3, #1
 80017a0:	6113      	str	r3, [r2, #16]

 // Toggle LED state or update LED pattern
 led_toggle_flag = 1; // Set flag to handle in main loop
 80017a2:	4b21      	ldr	r3, [pc, #132]	@ (8001828 <TIM2_IRQHandler+0xa8>)
 80017a4:	2201      	movs	r2, #1
 80017a6:	701a      	strb	r2, [r3, #0]

 // Timer-based counting for "Minutes Lost"
 if (currentState == LOST) {
 80017a8:	4b20      	ldr	r3, [pc, #128]	@ (800182c <TIM2_IRQHandler+0xac>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d117      	bne.n	80017e0 <TIM2_IRQHandler+0x60>
 if (bit_index >= 15) {
 80017b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001830 <TIM2_IRQHandler+0xb0>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	2b0e      	cmp	r3, #14
 80017b8:	d90a      	bls.n	80017d0 <TIM2_IRQHandler+0x50>
 bit_index = 0;
 80017ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001830 <TIM2_IRQHandler+0xb0>)
 80017bc:	2200      	movs	r2, #0
 80017be:	701a      	strb	r2, [r3, #0]
 minutes_lost++;
 80017c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001834 <TIM2_IRQHandler+0xb4>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	3301      	adds	r3, #1
 80017c8:	b2da      	uxtb	r2, r3
 80017ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001834 <TIM2_IRQHandler+0xb4>)
 80017cc:	701a      	strb	r2, [r3, #0]
 80017ce:	e022      	b.n	8001816 <TIM2_IRQHandler+0x96>
 } else {
 bit_index++;
 80017d0:	4b17      	ldr	r3, [pc, #92]	@ (8001830 <TIM2_IRQHandler+0xb0>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	3301      	adds	r3, #1
 80017d8:	b2da      	uxtb	r2, r3
 80017da:	4b15      	ldr	r3, [pc, #84]	@ (8001830 <TIM2_IRQHandler+0xb0>)
 80017dc:	701a      	strb	r2, [r3, #0]
 80017de:	e01a      	b.n	8001816 <TIM2_IRQHandler+0x96>
 }
 } else {
 curr_counter++;
 80017e0:	4b15      	ldr	r3, [pc, #84]	@ (8001838 <TIM2_IRQHandler+0xb8>)
 80017e2:	881b      	ldrh	r3, [r3, #0]
 80017e4:	b21b      	sxth	r3, r3
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	3301      	adds	r3, #1
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	b21a      	sxth	r2, r3
 80017ee:	4b12      	ldr	r3, [pc, #72]	@ (8001838 <TIM2_IRQHandler+0xb8>)
 80017f0:	801a      	strh	r2, [r3, #0]
 if (curr_counter >= min_counter) {
 80017f2:	4b11      	ldr	r3, [pc, #68]	@ (8001838 <TIM2_IRQHandler+0xb8>)
 80017f4:	881b      	ldrh	r3, [r3, #0]
 80017f6:	b21a      	sxth	r2, r3
 80017f8:	4b10      	ldr	r3, [pc, #64]	@ (800183c <TIM2_IRQHandler+0xbc>)
 80017fa:	881b      	ldrh	r3, [r3, #0]
 80017fc:	b21b      	sxth	r3, r3
 80017fe:	429a      	cmp	r2, r3
 8001800:	db09      	blt.n	8001816 <TIM2_IRQHandler+0x96>
 minutes_lost++;
 8001802:	4b0c      	ldr	r3, [pc, #48]	@ (8001834 <TIM2_IRQHandler+0xb4>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	b2db      	uxtb	r3, r3
 8001808:	3301      	adds	r3, #1
 800180a:	b2da      	uxtb	r2, r3
 800180c:	4b09      	ldr	r3, [pc, #36]	@ (8001834 <TIM2_IRQHandler+0xb4>)
 800180e:	701a      	strb	r2, [r3, #0]
 curr_counter = 0;
 8001810:	4b09      	ldr	r3, [pc, #36]	@ (8001838 <TIM2_IRQHandler+0xb8>)
 8001812:	2200      	movs	r2, #0
 8001814:	801a      	strh	r2, [r3, #0]
 }
 }

 timer_reset(TIM2); // Reset TIM2 counter
 8001816:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800181a:	f000 fb91 	bl	8001f40 <timer_reset>
 NVIC_EnableIRQ(TIM2_IRQn);
 800181e:	201c      	movs	r0, #28
 8001820:	f7ff febe 	bl	80015a0 <__NVIC_EnableIRQ>

 }
}
 8001824:	bf00      	nop
 8001826:	bd80      	pop	{r7, pc}
 8001828:	20000341 	.word	0x20000341
 800182c:	20000342 	.word	0x20000342
 8001830:	2000033c 	.word	0x2000033c
 8001834:	20000340 	.word	0x20000340
 8001838:	2000033e 	.word	0x2000033e
 800183c:	20000132 	.word	0x20000132

08001840 <handleLEDs>:

void handleLEDs() {
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
 if (led_toggle_flag) {
 8001844:	4b05      	ldr	r3, [pc, #20]	@ (800185c <handleLEDs+0x1c>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	b2db      	uxtb	r3, r3
 800184a:	2b00      	cmp	r3, #0
 800184c:	d004      	beq.n	8001858 <handleLEDs+0x18>
 led_toggle_flag = 0; // Reset flag after handling
 800184e:	4b03      	ldr	r3, [pc, #12]	@ (800185c <handleLEDs+0x1c>)
 8001850:	2200      	movs	r2, #0
 8001852:	701a      	strb	r2, [r3, #0]
 handleState(); // Update LED based on state
 8001854:	f7ff ff5c 	bl	8001710 <handleState>
 }
}
 8001858:	bf00      	nop
 800185a:	bd80      	pop	{r7, pc}
 800185c:	20000341 	.word	0x20000341

08001860 <main>:

/**
 * @brief The application entry point.
 * @retval int
 */
int main(void) {
 8001860:	b5b0      	push	{r4, r5, r7, lr}
 8001862:	b08a      	sub	sp, #40	@ 0x28
 8001864:	af02      	add	r7, sp, #8
 /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 HAL_Init();
 8001866:	f000 fbc4 	bl	8001ff2 <HAL_Init>

 /* Configure the system clock */
 SystemClock_Config();
 800186a:	f000 f873 	bl	8001954 <SystemClock_Config>

 i2c_init();
 800186e:	f7ff fbf1 	bl	8001054 <i2c_init>
 lsm6dsl_init();
 8001872:	f7ff fdb9 	bl	80013e8 <lsm6dsl_init>
 leds_init();
 8001876:	f7ff fd15 	bl	80012a4 <leds_init>
 timer_init(TIM2);
 800187a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800187e:	f000 fb2b 	bl	8001ed8 <timer_init>
 timer_set_ms(TIM2, 50); // Set timer for 50ms
 8001882:	2132      	movs	r1, #50	@ 0x32
 8001884:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001888:	f000 fb68 	bl	8001f5c <timer_set_ms>

 /* Initialize all configured peripherals */
 MX_GPIO_Init();
 800188c:	f000 f8e6 	bl	8001a5c <MX_GPIO_Init>
 MX_SPI3_Init();
 8001890:	f000 f8a6 	bl	80019e0 <MX_SPI3_Init>

 // RESET BLE MODULE
 HAL_GPIO_WritePin(BLE_RESET_GPIO_Port, BLE_RESET_Pin, GPIO_PIN_RESET);
 8001894:	2200      	movs	r2, #0
 8001896:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800189a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800189e:	f000 ff15 	bl	80026cc <HAL_GPIO_WritePin>
 //HAL_Delay(10);
 HAL_GPIO_WritePin(BLE_RESET_GPIO_Port, BLE_RESET_Pin, GPIO_PIN_SET);
 80018a2:	2201      	movs	r2, #1
 80018a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80018a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018ac:	f000 ff0e 	bl	80026cc <HAL_GPIO_WritePin>

 ble_init();
 80018b0:	f7fe ffec 	bl	800088c <ble_init>

 HAL_Delay(10);
 80018b4:	200a      	movs	r0, #10
 80018b6:	f000 fc11 	bl	80020dc <HAL_Delay>

 uint8_t nonDiscoverable = 0;
 80018ba:	2300      	movs	r3, #0
 80018bc:	77fb      	strb	r3, [r7, #31]

 while (1) {
 uint32_t current_time = HAL_GetTick();
 80018be:	f000 fc01 	bl	80020c4 <HAL_GetTick>
 80018c2:	61b8      	str	r0, [r7, #24]

 // LED toggle logic (every 50 ms)
 if (current_time - last_led_toggle_time >= LED_TOGGLE_INTERVAL) {
 80018c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001938 <main+0xd8>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b31      	cmp	r3, #49	@ 0x31
 80018ce:	d904      	bls.n	80018da <main+0x7a>
 handleLEDs();
 80018d0:	f7ff ffb6 	bl	8001840 <handleLEDs>
 last_led_toggle_time = current_time;
 80018d4:	4a18      	ldr	r2, [pc, #96]	@ (8001938 <main+0xd8>)
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	6013      	str	r3, [r2, #0]
 }

 // Message transmission logic (every 10 seconds) for LOST mode only
 if (currentState == LOST && current_time - last_message_send_time >= MESSAGE_SEND_INTERVAL) {
 80018da:	4b18      	ldr	r3, [pc, #96]	@ (800193c <main+0xdc>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d11d      	bne.n	800191e <main+0xbe>
 80018e2:	4b17      	ldr	r3, [pc, #92]	@ (8001940 <main+0xe0>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	f242 720f 	movw	r2, #9999	@ 0x270f
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d915      	bls.n	800191e <main+0xbe>
 unsigned char test_str[] = "youlostit BLE test";
 80018f2:	4b14      	ldr	r3, [pc, #80]	@ (8001944 <main+0xe4>)
 80018f4:	1d3c      	adds	r4, r7, #4
 80018f6:	461d      	mov	r5, r3
 80018f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018fc:	682b      	ldr	r3, [r5, #0]
 80018fe:	461a      	mov	r2, r3
 8001900:	8022      	strh	r2, [r4, #0]
 8001902:	3402      	adds	r4, #2
 8001904:	0c1b      	lsrs	r3, r3, #16
 8001906:	7023      	strb	r3, [r4, #0]
 updateCharValue(NORDIC_UART_SERVICE_HANDLE, READ_CHAR_HANDLE, 0, sizeof(test_str) - 1, test_str);
 8001908:	1d3b      	adds	r3, r7, #4
 800190a:	9300      	str	r3, [sp, #0]
 800190c:	2312      	movs	r3, #18
 800190e:	2200      	movs	r2, #0
 8001910:	490d      	ldr	r1, [pc, #52]	@ (8001948 <main+0xe8>)
 8001912:	480e      	ldr	r0, [pc, #56]	@ (800194c <main+0xec>)
 8001914:	f7ff fb4a 	bl	8000fac <updateCharValue>
 last_message_send_time = current_time;
 8001918:	4a09      	ldr	r2, [pc, #36]	@ (8001940 <main+0xe0>)
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	6013      	str	r3, [r2, #0]
 }

 if (!nonDiscoverable && HAL_GPIO_ReadPin(BLE_INT_GPIO_Port, BLE_INT_Pin)) {
 800191e:	7ffb      	ldrb	r3, [r7, #31]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d1cc      	bne.n	80018be <main+0x5e>
 8001924:	2140      	movs	r1, #64	@ 0x40
 8001926:	480a      	ldr	r0, [pc, #40]	@ (8001950 <main+0xf0>)
 8001928:	f000 feb8 	bl	800269c <HAL_GPIO_ReadPin>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d0c5      	beq.n	80018be <main+0x5e>
 catchBLE();
 8001932:	f7ff f9c1 	bl	8000cb8 <catchBLE>
 while (1) {
 8001936:	e7c2      	b.n	80018be <main+0x5e>
 8001938:	20000344 	.word	0x20000344
 800193c:	20000342 	.word	0x20000342
 8001940:	20000348 	.word	0x20000348
 8001944:	08004f38 	.word	0x08004f38
 8001948:	200002cc 	.word	0x200002cc
 800194c:	200002c4 	.word	0x200002c4
 8001950:	48001000 	.word	0x48001000

08001954 <SystemClock_Config>:
 * @brief System Clock Configuration
 * @attention This changes the System clock frequency, make sure you reflect that change in your timer
 * @retval None
 */
void SystemClock_Config(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b096      	sub	sp, #88	@ 0x58
 8001958:	af00      	add	r7, sp, #0
 RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800195a:	f107 0314 	add.w	r3, r7, #20
 800195e:	2244      	movs	r2, #68	@ 0x44
 8001960:	2100      	movs	r1, #0
 8001962:	4618      	mov	r0, r3
 8001964:	f002 fca8 	bl	80042b8 <memset>
 RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001968:	463b      	mov	r3, r7
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	605a      	str	r2, [r3, #4]
 8001970:	609a      	str	r2, [r3, #8]
 8001972:	60da      	str	r2, [r3, #12]
 8001974:	611a      	str	r2, [r3, #16]

 /** Configure the main internal regulator output voltage
 */
 if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001976:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800197a:	f000 fef1 	bl	8002760 <HAL_PWREx_ControlVoltageScaling>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <SystemClock_Config+0x34>
 {
 Error_Handler();
 8001984:	f000 f902 	bl	8001b8c <Error_Handler>
 }

 /** Initializes the RCC Oscillators according to the specified parameters
 * in the RCC_OscInitTypeDef structure.
 */
 RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001988:	2310      	movs	r3, #16
 800198a:	617b      	str	r3, [r7, #20]
 RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800198c:	2301      	movs	r3, #1
 800198e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 RCC_OscInitStruct.MSICalibrationValue = 0;
 8001990:	2300      	movs	r3, #0
 8001992:	633b      	str	r3, [r7, #48]	@ 0x30
 // This lines changes system clock frequency
 RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 8001994:	2370      	movs	r3, #112	@ 0x70
 8001996:	637b      	str	r3, [r7, #52]	@ 0x34
 RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001998:	2300      	movs	r3, #0
 800199a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800199c:	f107 0314 	add.w	r3, r7, #20
 80019a0:	4618      	mov	r0, r3
 80019a2:	f000 ff33 	bl	800280c <HAL_RCC_OscConfig>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <SystemClock_Config+0x5c>
 {
 Error_Handler();
 80019ac:	f000 f8ee 	bl	8001b8c <Error_Handler>
 }

 /** Initializes the CPU, AHB and APB buses clocks
 */
 RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019b0:	230f      	movs	r3, #15
 80019b2:	603b      	str	r3, [r7, #0]
 |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80019b4:	2300      	movs	r3, #0
 80019b6:	607b      	str	r3, [r7, #4]
 RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019b8:	2300      	movs	r3, #0
 80019ba:	60bb      	str	r3, [r7, #8]
 RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019bc:	2300      	movs	r3, #0
 80019be:	60fb      	str	r3, [r7, #12]
 RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019c0:	2300      	movs	r3, #0
 80019c2:	613b      	str	r3, [r7, #16]

 if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80019c4:	463b      	mov	r3, r7
 80019c6:	2100      	movs	r1, #0
 80019c8:	4618      	mov	r0, r3
 80019ca:	f001 fafb 	bl	8002fc4 <HAL_RCC_ClockConfig>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <SystemClock_Config+0x84>
 {
 Error_Handler();
 80019d4:	f000 f8da 	bl	8001b8c <Error_Handler>
 }
}
 80019d8:	bf00      	nop
 80019da:	3758      	adds	r7, #88	@ 0x58
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <MX_SPI3_Init>:
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0

 /* USER CODE BEGIN SPI3_Init 1 */

 /* USER CODE END SPI3_Init 1 */
 /* SPI3 parameter configuration*/
 hspi3.Instance = SPI3;
 80019e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001a54 <MX_SPI3_Init+0x74>)
 80019e6:	4a1c      	ldr	r2, [pc, #112]	@ (8001a58 <MX_SPI3_Init+0x78>)
 80019e8:	601a      	str	r2, [r3, #0]
 hspi3.Init.Mode = SPI_MODE_MASTER;
 80019ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001a54 <MX_SPI3_Init+0x74>)
 80019ec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80019f0:	605a      	str	r2, [r3, #4]
 hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80019f2:	4b18      	ldr	r3, [pc, #96]	@ (8001a54 <MX_SPI3_Init+0x74>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	609a      	str	r2, [r3, #8]
 hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80019f8:	4b16      	ldr	r3, [pc, #88]	@ (8001a54 <MX_SPI3_Init+0x74>)
 80019fa:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80019fe:	60da      	str	r2, [r3, #12]
 hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a00:	4b14      	ldr	r3, [pc, #80]	@ (8001a54 <MX_SPI3_Init+0x74>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	611a      	str	r2, [r3, #16]
 hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a06:	4b13      	ldr	r3, [pc, #76]	@ (8001a54 <MX_SPI3_Init+0x74>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	615a      	str	r2, [r3, #20]
 hspi3.Init.NSS = SPI_NSS_SOFT;
 8001a0c:	4b11      	ldr	r3, [pc, #68]	@ (8001a54 <MX_SPI3_Init+0x74>)
 8001a0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a12:	619a      	str	r2, [r3, #24]
 hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a14:	4b0f      	ldr	r3, [pc, #60]	@ (8001a54 <MX_SPI3_Init+0x74>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	61da      	str	r2, [r3, #28]
 hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a54 <MX_SPI3_Init+0x74>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	621a      	str	r2, [r3, #32]
 hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a20:	4b0c      	ldr	r3, [pc, #48]	@ (8001a54 <MX_SPI3_Init+0x74>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	625a      	str	r2, [r3, #36]	@ 0x24
 hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a26:	4b0b      	ldr	r3, [pc, #44]	@ (8001a54 <MX_SPI3_Init+0x74>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	629a      	str	r2, [r3, #40]	@ 0x28
 hspi3.Init.CRCPolynomial = 7;
 8001a2c:	4b09      	ldr	r3, [pc, #36]	@ (8001a54 <MX_SPI3_Init+0x74>)
 8001a2e:	2207      	movs	r2, #7
 8001a30:	62da      	str	r2, [r3, #44]	@ 0x2c
 hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a32:	4b08      	ldr	r3, [pc, #32]	@ (8001a54 <MX_SPI3_Init+0x74>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	631a      	str	r2, [r3, #48]	@ 0x30
 hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a38:	4b06      	ldr	r3, [pc, #24]	@ (8001a54 <MX_SPI3_Init+0x74>)
 8001a3a:	2208      	movs	r2, #8
 8001a3c:	635a      	str	r2, [r3, #52]	@ 0x34
 if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001a3e:	4805      	ldr	r0, [pc, #20]	@ (8001a54 <MX_SPI3_Init+0x74>)
 8001a40:	f001 fcac 	bl	800339c <HAL_SPI_Init>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_SPI3_Init+0x6e>
 {
 Error_Handler();
 8001a4a:	f000 f89f 	bl	8001b8c <Error_Handler>
 }
 /* USER CODE BEGIN SPI3_Init 2 */

 /* USER CODE END SPI3_Init 2 */

}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	200002d8 	.word	0x200002d8
 8001a58:	40003c00 	.word	0x40003c00

08001a5c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b08a      	sub	sp, #40	@ 0x28
 8001a60:	af00      	add	r7, sp, #0
 GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a62:	f107 0314 	add.w	r3, r7, #20
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	605a      	str	r2, [r3, #4]
 8001a6c:	609a      	str	r2, [r3, #8]
 8001a6e:	60da      	str	r2, [r3, #12]
 8001a70:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */

/* USER CODE END MX_GPIO_Init_1 */

 /* GPIO Ports Clock Enable */
 __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a72:	4b43      	ldr	r3, [pc, #268]	@ (8001b80 <MX_GPIO_Init+0x124>)
 8001a74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a76:	4a42      	ldr	r2, [pc, #264]	@ (8001b80 <MX_GPIO_Init+0x124>)
 8001a78:	f043 0310 	orr.w	r3, r3, #16
 8001a7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a7e:	4b40      	ldr	r3, [pc, #256]	@ (8001b80 <MX_GPIO_Init+0x124>)
 8001a80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a82:	f003 0310 	and.w	r3, r3, #16
 8001a86:	613b      	str	r3, [r7, #16]
 8001a88:	693b      	ldr	r3, [r7, #16]
 __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a8a:	4b3d      	ldr	r3, [pc, #244]	@ (8001b80 <MX_GPIO_Init+0x124>)
 8001a8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a8e:	4a3c      	ldr	r2, [pc, #240]	@ (8001b80 <MX_GPIO_Init+0x124>)
 8001a90:	f043 0301 	orr.w	r3, r3, #1
 8001a94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a96:	4b3a      	ldr	r3, [pc, #232]	@ (8001b80 <MX_GPIO_Init+0x124>)
 8001a98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa2:	4b37      	ldr	r3, [pc, #220]	@ (8001b80 <MX_GPIO_Init+0x124>)
 8001aa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aa6:	4a36      	ldr	r2, [pc, #216]	@ (8001b80 <MX_GPIO_Init+0x124>)
 8001aa8:	f043 0302 	orr.w	r3, r3, #2
 8001aac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aae:	4b34      	ldr	r3, [pc, #208]	@ (8001b80 <MX_GPIO_Init+0x124>)
 8001ab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	60bb      	str	r3, [r7, #8]
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aba:	4b31      	ldr	r3, [pc, #196]	@ (8001b80 <MX_GPIO_Init+0x124>)
 8001abc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001abe:	4a30      	ldr	r2, [pc, #192]	@ (8001b80 <MX_GPIO_Init+0x124>)
 8001ac0:	f043 0308 	orr.w	r3, r3, #8
 8001ac4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ac6:	4b2e      	ldr	r3, [pc, #184]	@ (8001b80 <MX_GPIO_Init+0x124>)
 8001ac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aca:	f003 0308 	and.w	r3, r3, #8
 8001ace:	607b      	str	r3, [r7, #4]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ad2:	4b2b      	ldr	r3, [pc, #172]	@ (8001b80 <MX_GPIO_Init+0x124>)
 8001ad4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ad6:	4a2a      	ldr	r2, [pc, #168]	@ (8001b80 <MX_GPIO_Init+0x124>)
 8001ad8:	f043 0304 	orr.w	r3, r3, #4
 8001adc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ade:	4b28      	ldr	r3, [pc, #160]	@ (8001b80 <MX_GPIO_Init+0x124>)
 8001ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ae2:	f003 0304 	and.w	r3, r3, #4
 8001ae6:	603b      	str	r3, [r7, #0]
 8001ae8:	683b      	ldr	r3, [r7, #0]

 /*Configure GPIO pin Output Level */
 HAL_GPIO_WritePin(GPIO_LED1_GPIO_Port, GPIO_LED1_Pin, GPIO_PIN_RESET);
 8001aea:	2200      	movs	r2, #0
 8001aec:	2120      	movs	r1, #32
 8001aee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001af2:	f000 fdeb 	bl	80026cc <HAL_GPIO_WritePin>

 /*Configure GPIO pin Output Level */
 HAL_GPIO_WritePin(BLE_CS_GPIO_Port, BLE_CS_Pin, GPIO_PIN_SET);
 8001af6:	2201      	movs	r2, #1
 8001af8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001afc:	4821      	ldr	r0, [pc, #132]	@ (8001b84 <MX_GPIO_Init+0x128>)
 8001afe:	f000 fde5 	bl	80026cc <HAL_GPIO_WritePin>


 /*Configure GPIO pin Output Level */
 HAL_GPIO_WritePin(BLE_RESET_GPIO_Port, BLE_RESET_Pin, GPIO_PIN_SET);
 8001b02:	2201      	movs	r2, #1
 8001b04:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b0c:	f000 fdde 	bl	80026cc <HAL_GPIO_WritePin>

 /*Configure GPIO pin : BLE_INT_Pin */
 GPIO_InitStruct.Pin = BLE_INT_Pin;
 8001b10:	2340      	movs	r3, #64	@ 0x40
 8001b12:	617b      	str	r3, [r7, #20]
 GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b14:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001b18:	61bb      	str	r3, [r7, #24]
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61fb      	str	r3, [r7, #28]
 HAL_GPIO_Init(BLE_INT_GPIO_Port, &GPIO_InitStruct);
 8001b1e:	f107 0314 	add.w	r3, r7, #20
 8001b22:	4619      	mov	r1, r3
 8001b24:	4818      	ldr	r0, [pc, #96]	@ (8001b88 <MX_GPIO_Init+0x12c>)
 8001b26:	f000 fc0f 	bl	8002348 <HAL_GPIO_Init>

 /*Configure GPIO pins : GPIO_LED1_Pin BLE_RESET_Pin */
 GPIO_InitStruct.Pin = GPIO_LED1_Pin|BLE_RESET_Pin;
 8001b2a:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8001b2e:	617b      	str	r3, [r7, #20]
 GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b30:	2301      	movs	r3, #1
 8001b32:	61bb      	str	r3, [r7, #24]
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b34:	2300      	movs	r3, #0
 8001b36:	61fb      	str	r3, [r7, #28]
 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	623b      	str	r3, [r7, #32]
 HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3c:	f107 0314 	add.w	r3, r7, #20
 8001b40:	4619      	mov	r1, r3
 8001b42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b46:	f000 fbff 	bl	8002348 <HAL_GPIO_Init>

 /*Configure GPIO pin : BLE_CS_Pin */
 GPIO_InitStruct.Pin = BLE_CS_Pin;
 8001b4a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b4e:	617b      	str	r3, [r7, #20]
 GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b50:	2301      	movs	r3, #1
 8001b52:	61bb      	str	r3, [r7, #24]
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	61fb      	str	r3, [r7, #28]
 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	623b      	str	r3, [r7, #32]
 HAL_GPIO_Init(BLE_CS_GPIO_Port, &GPIO_InitStruct);
 8001b5c:	f107 0314 	add.w	r3, r7, #20
 8001b60:	4619      	mov	r1, r3
 8001b62:	4808      	ldr	r0, [pc, #32]	@ (8001b84 <MX_GPIO_Init+0x128>)
 8001b64:	f000 fbf0 	bl	8002348 <HAL_GPIO_Init>

 /* EXTI interrupt init*/
 HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001b68:	2200      	movs	r2, #0
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	2017      	movs	r0, #23
 8001b6e:	f000 fbb4 	bl	80022da <HAL_NVIC_SetPriority>
 HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001b72:	2017      	movs	r0, #23
 8001b74:	f000 fbcd 	bl	8002312 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 8001b78:	bf00      	nop
 8001b7a:	3728      	adds	r7, #40	@ 0x28
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40021000 	.word	0x40021000
 8001b84:	48000c00 	.word	0x48000c00
 8001b88:	48001000 	.word	0x48001000

08001b8c <Error_Handler>:
/**
 * @brief This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b90:	b672      	cpsid	i
}
 8001b92:	bf00      	nop
 /* USER CODE BEGIN Error_Handler_Debug */
 /* User can add his own implementation to report the HAL error return state */
 __disable_irq();
 while (1)
 8001b94:	bf00      	nop
 8001b96:	e7fd      	b.n	8001b94 <Error_Handler+0x8>

08001b98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b9e:	4b0f      	ldr	r3, [pc, #60]	@ (8001bdc <HAL_MspInit+0x44>)
 8001ba0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ba2:	4a0e      	ldr	r2, [pc, #56]	@ (8001bdc <HAL_MspInit+0x44>)
 8001ba4:	f043 0301 	orr.w	r3, r3, #1
 8001ba8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001baa:	4b0c      	ldr	r3, [pc, #48]	@ (8001bdc <HAL_MspInit+0x44>)
 8001bac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	607b      	str	r3, [r7, #4]
 8001bb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bb6:	4b09      	ldr	r3, [pc, #36]	@ (8001bdc <HAL_MspInit+0x44>)
 8001bb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bba:	4a08      	ldr	r2, [pc, #32]	@ (8001bdc <HAL_MspInit+0x44>)
 8001bbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bc2:	4b06      	ldr	r3, [pc, #24]	@ (8001bdc <HAL_MspInit+0x44>)
 8001bc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bca:	603b      	str	r3, [r7, #0]
 8001bcc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	40021000 	.word	0x40021000

08001be0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b08a      	sub	sp, #40	@ 0x28
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be8:	f107 0314 	add.w	r3, r7, #20
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	60da      	str	r2, [r3, #12]
 8001bf6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a17      	ldr	r2, [pc, #92]	@ (8001c5c <HAL_SPI_MspInit+0x7c>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d128      	bne.n	8001c54 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001c02:	4b17      	ldr	r3, [pc, #92]	@ (8001c60 <HAL_SPI_MspInit+0x80>)
 8001c04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c06:	4a16      	ldr	r2, [pc, #88]	@ (8001c60 <HAL_SPI_MspInit+0x80>)
 8001c08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c0e:	4b14      	ldr	r3, [pc, #80]	@ (8001c60 <HAL_SPI_MspInit+0x80>)
 8001c10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c12:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c16:	613b      	str	r3, [r7, #16]
 8001c18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c1a:	4b11      	ldr	r3, [pc, #68]	@ (8001c60 <HAL_SPI_MspInit+0x80>)
 8001c1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c1e:	4a10      	ldr	r2, [pc, #64]	@ (8001c60 <HAL_SPI_MspInit+0x80>)
 8001c20:	f043 0304 	orr.w	r3, r3, #4
 8001c24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c26:	4b0e      	ldr	r3, [pc, #56]	@ (8001c60 <HAL_SPI_MspInit+0x80>)
 8001c28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c2a:	f003 0304 	and.w	r3, r3, #4
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001c32:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001c36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c40:	2303      	movs	r3, #3
 8001c42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c44:	2306      	movs	r3, #6
 8001c46:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c48:	f107 0314 	add.w	r3, r7, #20
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4805      	ldr	r0, [pc, #20]	@ (8001c64 <HAL_SPI_MspInit+0x84>)
 8001c50:	f000 fb7a 	bl	8002348 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001c54:	bf00      	nop
 8001c56:	3728      	adds	r7, #40	@ 0x28
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40003c00 	.word	0x40003c00
 8001c60:	40021000 	.word	0x40021000
 8001c64:	48000800 	.word	0x48000800

08001c68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c6c:	bf00      	nop
 8001c6e:	e7fd      	b.n	8001c6c <NMI_Handler+0x4>

08001c70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c74:	bf00      	nop
 8001c76:	e7fd      	b.n	8001c74 <HardFault_Handler+0x4>

08001c78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c7c:	bf00      	nop
 8001c7e:	e7fd      	b.n	8001c7c <MemManage_Handler+0x4>

08001c80 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c84:	bf00      	nop
 8001c86:	e7fd      	b.n	8001c84 <BusFault_Handler+0x4>

08001c88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c8c:	bf00      	nop
 8001c8e:	e7fd      	b.n	8001c8c <UsageFault_Handler+0x4>

08001c90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c94:	bf00      	nop
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ca2:	bf00      	nop
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cb0:	bf00      	nop
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cbe:	f000 f9ed 	bl	800209c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}
	...

08001cc8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  dataAvailable=1;
 8001ccc:	4b03      	ldr	r3, [pc, #12]	@ (8001cdc <EXTI9_5_IRQHandler+0x14>)
 8001cce:	2201      	movs	r2, #1
 8001cd0:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLE_INT_Pin);
 8001cd2:	2040      	movs	r0, #64	@ 0x40
 8001cd4:	f000 fd12 	bl	80026fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001cd8:	bf00      	nop
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	200002d4 	.word	0x200002d4

08001ce0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cec:	2300      	movs	r3, #0
 8001cee:	617b      	str	r3, [r7, #20]
 8001cf0:	e00a      	b.n	8001d08 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001cf2:	f3af 8000 	nop.w
 8001cf6:	4601      	mov	r1, r0
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	1c5a      	adds	r2, r3, #1
 8001cfc:	60ba      	str	r2, [r7, #8]
 8001cfe:	b2ca      	uxtb	r2, r1
 8001d00:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	3301      	adds	r3, #1
 8001d06:	617b      	str	r3, [r7, #20]
 8001d08:	697a      	ldr	r2, [r7, #20]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	dbf0      	blt.n	8001cf2 <_read+0x12>
	}

return len;
 8001d10:	687b      	ldr	r3, [r7, #4]
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3718      	adds	r7, #24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
	...

08001d1c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001d24:	4b11      	ldr	r3, [pc, #68]	@ (8001d6c <_sbrk+0x50>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d102      	bne.n	8001d32 <_sbrk+0x16>
		heap_end = &end;
 8001d2c:	4b0f      	ldr	r3, [pc, #60]	@ (8001d6c <_sbrk+0x50>)
 8001d2e:	4a10      	ldr	r2, [pc, #64]	@ (8001d70 <_sbrk+0x54>)
 8001d30:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001d32:	4b0e      	ldr	r3, [pc, #56]	@ (8001d6c <_sbrk+0x50>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001d38:	4b0c      	ldr	r3, [pc, #48]	@ (8001d6c <_sbrk+0x50>)
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4413      	add	r3, r2
 8001d40:	466a      	mov	r2, sp
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d907      	bls.n	8001d56 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001d46:	f002 facf 	bl	80042e8 <__errno>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	220c      	movs	r2, #12
 8001d4e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001d50:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d54:	e006      	b.n	8001d64 <_sbrk+0x48>
	}

	heap_end += incr;
 8001d56:	4b05      	ldr	r3, [pc, #20]	@ (8001d6c <_sbrk+0x50>)
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	4a03      	ldr	r2, [pc, #12]	@ (8001d6c <_sbrk+0x50>)
 8001d60:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001d62:	68fb      	ldr	r3, [r7, #12]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3710      	adds	r7, #16
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	20000354 	.word	0x20000354
 8001d70:	200004a8 	.word	0x200004a8

08001d74 <_close>:

int _close(int file)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
	return -1;
 8001d7c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d9c:	605a      	str	r2, [r3, #4]
	return 0;
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <_isatty>:

int _isatty(int file)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
	return 1;
 8001db4:	2301      	movs	r3, #1
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr

08001dc2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	b085      	sub	sp, #20
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	60f8      	str	r0, [r7, #12]
 8001dca:	60b9      	str	r1, [r7, #8]
 8001dcc:	607a      	str	r2, [r7, #4]
	return 0;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3714      	adds	r7, #20
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001de0:	4b17      	ldr	r3, [pc, #92]	@ (8001e40 <SystemInit+0x64>)
 8001de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001de6:	4a16      	ldr	r2, [pc, #88]	@ (8001e40 <SystemInit+0x64>)
 8001de8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001dec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001df0:	4b14      	ldr	r3, [pc, #80]	@ (8001e44 <SystemInit+0x68>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a13      	ldr	r2, [pc, #76]	@ (8001e44 <SystemInit+0x68>)
 8001df6:	f043 0301 	orr.w	r3, r3, #1
 8001dfa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001dfc:	4b11      	ldr	r3, [pc, #68]	@ (8001e44 <SystemInit+0x68>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001e02:	4b10      	ldr	r3, [pc, #64]	@ (8001e44 <SystemInit+0x68>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a0f      	ldr	r2, [pc, #60]	@ (8001e44 <SystemInit+0x68>)
 8001e08:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001e0c:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001e10:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001e12:	4b0c      	ldr	r3, [pc, #48]	@ (8001e44 <SystemInit+0x68>)
 8001e14:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001e18:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e44 <SystemInit+0x68>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a09      	ldr	r2, [pc, #36]	@ (8001e44 <SystemInit+0x68>)
 8001e20:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e24:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001e26:	4b07      	ldr	r3, [pc, #28]	@ (8001e44 <SystemInit+0x68>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e2c:	4b04      	ldr	r3, [pc, #16]	@ (8001e40 <SystemInit+0x64>)
 8001e2e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001e32:	609a      	str	r2, [r3, #8]
#endif
}
 8001e34:	bf00      	nop
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	e000ed00 	.word	0xe000ed00
 8001e44:	40021000 	.word	0x40021000

08001e48 <__NVIC_EnableIRQ>:
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	4603      	mov	r3, r0
 8001e50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	db0b      	blt.n	8001e72 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e5a:	79fb      	ldrb	r3, [r7, #7]
 8001e5c:	f003 021f 	and.w	r2, r3, #31
 8001e60:	4907      	ldr	r1, [pc, #28]	@ (8001e80 <__NVIC_EnableIRQ+0x38>)
 8001e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e66:	095b      	lsrs	r3, r3, #5
 8001e68:	2001      	movs	r0, #1
 8001e6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	e000e100 	.word	0xe000e100

08001e84 <__NVIC_SetPriority>:
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	6039      	str	r1, [r7, #0]
 8001e8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	db0a      	blt.n	8001eae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	b2da      	uxtb	r2, r3
 8001e9c:	490c      	ldr	r1, [pc, #48]	@ (8001ed0 <__NVIC_SetPriority+0x4c>)
 8001e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea2:	0112      	lsls	r2, r2, #4
 8001ea4:	b2d2      	uxtb	r2, r2
 8001ea6:	440b      	add	r3, r1
 8001ea8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001eac:	e00a      	b.n	8001ec4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	b2da      	uxtb	r2, r3
 8001eb2:	4908      	ldr	r1, [pc, #32]	@ (8001ed4 <__NVIC_SetPriority+0x50>)
 8001eb4:	79fb      	ldrb	r3, [r7, #7]
 8001eb6:	f003 030f 	and.w	r3, r3, #15
 8001eba:	3b04      	subs	r3, #4
 8001ebc:	0112      	lsls	r2, r2, #4
 8001ebe:	b2d2      	uxtb	r2, r2
 8001ec0:	440b      	add	r3, r1
 8001ec2:	761a      	strb	r2, [r3, #24]
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr
 8001ed0:	e000e100 	.word	0xe000e100
 8001ed4:	e000ed00 	.word	0xe000ed00

08001ed8 <timer_init>:

#include "timer.h"


void timer_init(TIM_TypeDef* timer)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
	// TODO implement this
	// Enable the clock for Timer 2 in RCC
	    RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN; // Enable TIM2 clock (APB1 bus)
 8001ee0:	4b16      	ldr	r3, [pc, #88]	@ (8001f3c <timer_init+0x64>)
 8001ee2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ee4:	4a15      	ldr	r2, [pc, #84]	@ (8001f3c <timer_init+0x64>)
 8001ee6:	f043 0301 	orr.w	r3, r3, #1
 8001eea:	6593      	str	r3, [r2, #88]	@ 0x58

	// Stop the timer and clear out any timer state & reset all counters
	    timer->CR1 &= ~TIM_CR1_CEN; // Disable the timer
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f023 0201 	bic.w	r2, r3, #1
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	601a      	str	r2, [r3, #0]
	    timer->CNT = 0;            // Reset the counter
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	625a      	str	r2, [r3, #36]	@ 0x24
	   	timer->SR = 0;             // Clear any interrupt flags
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	611a      	str	r2, [r3, #16]


	// Setup the timer to auto-reload when the max value is reached
	   	timer->ARR = 0xFFFF;       // Set the max count value
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f0a:	62da      	str	r2, [r3, #44]	@ 0x2c

	// Enable the timer’s interrupt both internally and in the interrupt controller (NVIC)
	    timer->DIER |= TIM_DIER_UIE; // Update Interrupt Enable (UIE)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	f043 0201 	orr.w	r2, r3, #1
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	60da      	str	r2, [r3, #12]
	    NVIC_EnableIRQ(TIM2_IRQn);  // Enable the interrupt in the NVIC
 8001f18:	201c      	movs	r0, #28
 8001f1a:	f7ff ff95 	bl	8001e48 <__NVIC_EnableIRQ>
		NVIC_SetPriority(TIM2_IRQn, 1); // Set interrupt priority (lower number = higher priority)
 8001f1e:	2101      	movs	r1, #1
 8001f20:	201c      	movs	r0, #28
 8001f22:	f7ff ffaf 	bl	8001e84 <__NVIC_SetPriority>

	// Enable the timer
	   	timer->CR1 |= TIM_CR1_CEN; // Enable the timer (CEN)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f043 0201 	orr.w	r2, r3, #1
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	601a      	str	r2, [r3, #0]
}
 8001f32:	bf00      	nop
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40021000 	.word	0x40021000

08001f40 <timer_reset>:

void timer_reset(TIM_TypeDef* timer){
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
	// TODO implement this
	// Reset the counter of the specified timer to 0
	timer->CNT = 0;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001f4e:	bf00      	nop
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
	...

08001f5c <timer_set_ms>:

void timer_set_ms(TIM_TypeDef* timer, uint16_t period_ms)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b087      	sub	sp, #28
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	460b      	mov	r3, r1
 8001f66:	807b      	strh	r3, [r7, #2]
		// TODO implement this
		// Step 1: Calculate the timer's frequency based on the system clock
	    uint32_t system_clock = 8000000;  // Assuming system clock is 4 MHz (adjust based on actual clock)
 8001f68:	4b0b      	ldr	r3, [pc, #44]	@ (8001f98 <timer_set_ms+0x3c>)
 8001f6a:	617b      	str	r3, [r7, #20]

	    // Step 2: Determine the prescaler value and the period for milliseconds
	    uint32_t prescaler = (system_clock / 1000) - 1;  // To get 1 ms ticks
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	4a0b      	ldr	r2, [pc, #44]	@ (8001f9c <timer_set_ms+0x40>)
 8001f70:	fba2 2303 	umull	r2, r3, r2, r3
 8001f74:	099b      	lsrs	r3, r3, #6
 8001f76:	3b01      	subs	r3, #1
 8001f78:	613b      	str	r3, [r7, #16]
	    uint32_t period = period_ms;  // Period in milliseconds
 8001f7a:	887b      	ldrh	r3, [r7, #2]
 8001f7c:	60fb      	str	r3, [r7, #12]

	    // Step 3: Set the prescaler and auto-reload register for the timer
	    timer->PSC = prescaler;  // Set the prescaler to divide the clock
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	693a      	ldr	r2, [r7, #16]
 8001f82:	629a      	str	r2, [r3, #40]	@ 0x28
	    timer->ARR = period - 1; // Set the period value for how many ticks it should wait
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	1e5a      	subs	r2, r3, #1
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	62da      	str	r2, [r3, #44]	@ 0x2c

	    // Step 4: Enable the timer (done in the initialization)
}
 8001f8c:	bf00      	nop
 8001f8e:	371c      	adds	r7, #28
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	007a1200 	.word	0x007a1200
 8001f9c:	10624dd3 	.word	0x10624dd3

08001fa0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001fa0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001fd8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fa4:	f7ff ff1a 	bl	8001ddc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fa8:	480c      	ldr	r0, [pc, #48]	@ (8001fdc <LoopForever+0x6>)
  ldr r1, =_edata
 8001faa:	490d      	ldr	r1, [pc, #52]	@ (8001fe0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fac:	4a0d      	ldr	r2, [pc, #52]	@ (8001fe4 <LoopForever+0xe>)
  movs r3, #0
 8001fae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fb0:	e002      	b.n	8001fb8 <LoopCopyDataInit>

08001fb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fb6:	3304      	adds	r3, #4

08001fb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fbc:	d3f9      	bcc.n	8001fb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fbe:	4a0a      	ldr	r2, [pc, #40]	@ (8001fe8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fc0:	4c0a      	ldr	r4, [pc, #40]	@ (8001fec <LoopForever+0x16>)
  movs r3, #0
 8001fc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fc4:	e001      	b.n	8001fca <LoopFillZerobss>

08001fc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fc8:	3204      	adds	r2, #4

08001fca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fcc:	d3fb      	bcc.n	8001fc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fce:	f002 f991 	bl	80042f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001fd2:	f7ff fc45 	bl	8001860 <main>

08001fd6 <LoopForever>:

LoopForever:
    b LoopForever
 8001fd6:	e7fe      	b.n	8001fd6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001fd8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001fdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fe0:	2000019c 	.word	0x2000019c
  ldr r2, =_sidata
 8001fe4:	08004fd0 	.word	0x08004fd0
  ldr r2, =_sbss
 8001fe8:	2000019c 	.word	0x2000019c
  ldr r4, =_ebss
 8001fec:	200004a8 	.word	0x200004a8

08001ff0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ff0:	e7fe      	b.n	8001ff0 <ADC1_2_IRQHandler>

08001ff2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b082      	sub	sp, #8
 8001ff6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ffc:	2003      	movs	r0, #3
 8001ffe:	f000 f961 	bl	80022c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002002:	2000      	movs	r0, #0
 8002004:	f000 f80e 	bl	8002024 <HAL_InitTick>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d002      	beq.n	8002014 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	71fb      	strb	r3, [r7, #7]
 8002012:	e001      	b.n	8002018 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002014:	f7ff fdc0 	bl	8001b98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002018:	79fb      	ldrb	r3, [r7, #7]
}
 800201a:	4618      	mov	r0, r3
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
	...

08002024 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800202c:	2300      	movs	r3, #0
 800202e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002030:	4b17      	ldr	r3, [pc, #92]	@ (8002090 <HAL_InitTick+0x6c>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d023      	beq.n	8002080 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002038:	4b16      	ldr	r3, [pc, #88]	@ (8002094 <HAL_InitTick+0x70>)
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	4b14      	ldr	r3, [pc, #80]	@ (8002090 <HAL_InitTick+0x6c>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	4619      	mov	r1, r3
 8002042:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002046:	fbb3 f3f1 	udiv	r3, r3, r1
 800204a:	fbb2 f3f3 	udiv	r3, r2, r3
 800204e:	4618      	mov	r0, r3
 8002050:	f000 f96d 	bl	800232e <HAL_SYSTICK_Config>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d10f      	bne.n	800207a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2b0f      	cmp	r3, #15
 800205e:	d809      	bhi.n	8002074 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002060:	2200      	movs	r2, #0
 8002062:	6879      	ldr	r1, [r7, #4]
 8002064:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002068:	f000 f937 	bl	80022da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800206c:	4a0a      	ldr	r2, [pc, #40]	@ (8002098 <HAL_InitTick+0x74>)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6013      	str	r3, [r2, #0]
 8002072:	e007      	b.n	8002084 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	73fb      	strb	r3, [r7, #15]
 8002078:	e004      	b.n	8002084 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	73fb      	strb	r3, [r7, #15]
 800207e:	e001      	b.n	8002084 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002084:	7bfb      	ldrb	r3, [r7, #15]
}
 8002086:	4618      	mov	r0, r3
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	2000013c 	.word	0x2000013c
 8002094:	20000134 	.word	0x20000134
 8002098:	20000138 	.word	0x20000138

0800209c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020a0:	4b06      	ldr	r3, [pc, #24]	@ (80020bc <HAL_IncTick+0x20>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	461a      	mov	r2, r3
 80020a6:	4b06      	ldr	r3, [pc, #24]	@ (80020c0 <HAL_IncTick+0x24>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4413      	add	r3, r2
 80020ac:	4a04      	ldr	r2, [pc, #16]	@ (80020c0 <HAL_IncTick+0x24>)
 80020ae:	6013      	str	r3, [r2, #0]
}
 80020b0:	bf00      	nop
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	2000013c 	.word	0x2000013c
 80020c0:	20000358 	.word	0x20000358

080020c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  return uwTick;
 80020c8:	4b03      	ldr	r3, [pc, #12]	@ (80020d8 <HAL_GetTick+0x14>)
 80020ca:	681b      	ldr	r3, [r3, #0]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	20000358 	.word	0x20000358

080020dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020e4:	f7ff ffee 	bl	80020c4 <HAL_GetTick>
 80020e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80020f4:	d005      	beq.n	8002102 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80020f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002120 <HAL_Delay+0x44>)
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	461a      	mov	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	4413      	add	r3, r2
 8002100:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002102:	bf00      	nop
 8002104:	f7ff ffde 	bl	80020c4 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	429a      	cmp	r2, r3
 8002112:	d8f7      	bhi.n	8002104 <HAL_Delay+0x28>
  {
  }
}
 8002114:	bf00      	nop
 8002116:	bf00      	nop
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	2000013c 	.word	0x2000013c

08002124 <__NVIC_SetPriorityGrouping>:
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002134:	4b0c      	ldr	r3, [pc, #48]	@ (8002168 <__NVIC_SetPriorityGrouping+0x44>)
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800213a:	68ba      	ldr	r2, [r7, #8]
 800213c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002140:	4013      	ands	r3, r2
 8002142:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800214c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002150:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002154:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002156:	4a04      	ldr	r2, [pc, #16]	@ (8002168 <__NVIC_SetPriorityGrouping+0x44>)
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	60d3      	str	r3, [r2, #12]
}
 800215c:	bf00      	nop
 800215e:	3714      	adds	r7, #20
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	e000ed00 	.word	0xe000ed00

0800216c <__NVIC_GetPriorityGrouping>:
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002170:	4b04      	ldr	r3, [pc, #16]	@ (8002184 <__NVIC_GetPriorityGrouping+0x18>)
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	0a1b      	lsrs	r3, r3, #8
 8002176:	f003 0307 	and.w	r3, r3, #7
}
 800217a:	4618      	mov	r0, r3
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	e000ed00 	.word	0xe000ed00

08002188 <__NVIC_EnableIRQ>:
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	4603      	mov	r3, r0
 8002190:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002196:	2b00      	cmp	r3, #0
 8002198:	db0b      	blt.n	80021b2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800219a:	79fb      	ldrb	r3, [r7, #7]
 800219c:	f003 021f 	and.w	r2, r3, #31
 80021a0:	4907      	ldr	r1, [pc, #28]	@ (80021c0 <__NVIC_EnableIRQ+0x38>)
 80021a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a6:	095b      	lsrs	r3, r3, #5
 80021a8:	2001      	movs	r0, #1
 80021aa:	fa00 f202 	lsl.w	r2, r0, r2
 80021ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80021b2:	bf00      	nop
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	e000e100 	.word	0xe000e100

080021c4 <__NVIC_SetPriority>:
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	4603      	mov	r3, r0
 80021cc:	6039      	str	r1, [r7, #0]
 80021ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	db0a      	blt.n	80021ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	490c      	ldr	r1, [pc, #48]	@ (8002210 <__NVIC_SetPriority+0x4c>)
 80021de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e2:	0112      	lsls	r2, r2, #4
 80021e4:	b2d2      	uxtb	r2, r2
 80021e6:	440b      	add	r3, r1
 80021e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80021ec:	e00a      	b.n	8002204 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	b2da      	uxtb	r2, r3
 80021f2:	4908      	ldr	r1, [pc, #32]	@ (8002214 <__NVIC_SetPriority+0x50>)
 80021f4:	79fb      	ldrb	r3, [r7, #7]
 80021f6:	f003 030f 	and.w	r3, r3, #15
 80021fa:	3b04      	subs	r3, #4
 80021fc:	0112      	lsls	r2, r2, #4
 80021fe:	b2d2      	uxtb	r2, r2
 8002200:	440b      	add	r3, r1
 8002202:	761a      	strb	r2, [r3, #24]
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	e000e100 	.word	0xe000e100
 8002214:	e000ed00 	.word	0xe000ed00

08002218 <NVIC_EncodePriority>:
{
 8002218:	b480      	push	{r7}
 800221a:	b089      	sub	sp, #36	@ 0x24
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f003 0307 	and.w	r3, r3, #7
 800222a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	f1c3 0307 	rsb	r3, r3, #7
 8002232:	2b04      	cmp	r3, #4
 8002234:	bf28      	it	cs
 8002236:	2304      	movcs	r3, #4
 8002238:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	3304      	adds	r3, #4
 800223e:	2b06      	cmp	r3, #6
 8002240:	d902      	bls.n	8002248 <NVIC_EncodePriority+0x30>
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	3b03      	subs	r3, #3
 8002246:	e000      	b.n	800224a <NVIC_EncodePriority+0x32>
 8002248:	2300      	movs	r3, #0
 800224a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800224c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	43da      	mvns	r2, r3
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	401a      	ands	r2, r3
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002260:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	fa01 f303 	lsl.w	r3, r1, r3
 800226a:	43d9      	mvns	r1, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002270:	4313      	orrs	r3, r2
}
 8002272:	4618      	mov	r0, r3
 8002274:	3724      	adds	r7, #36	@ 0x24
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
	...

08002280 <SysTick_Config>:
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3b01      	subs	r3, #1
 800228c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002290:	d301      	bcc.n	8002296 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002292:	2301      	movs	r3, #1
 8002294:	e00f      	b.n	80022b6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002296:	4a0a      	ldr	r2, [pc, #40]	@ (80022c0 <SysTick_Config+0x40>)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3b01      	subs	r3, #1
 800229c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800229e:	210f      	movs	r1, #15
 80022a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80022a4:	f7ff ff8e 	bl	80021c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022a8:	4b05      	ldr	r3, [pc, #20]	@ (80022c0 <SysTick_Config+0x40>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ae:	4b04      	ldr	r3, [pc, #16]	@ (80022c0 <SysTick_Config+0x40>)
 80022b0:	2207      	movs	r2, #7
 80022b2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	e000e010 	.word	0xe000e010

080022c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f7ff ff29 	bl	8002124 <__NVIC_SetPriorityGrouping>
}
 80022d2:	bf00      	nop
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b086      	sub	sp, #24
 80022de:	af00      	add	r7, sp, #0
 80022e0:	4603      	mov	r3, r0
 80022e2:	60b9      	str	r1, [r7, #8]
 80022e4:	607a      	str	r2, [r7, #4]
 80022e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80022e8:	2300      	movs	r3, #0
 80022ea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022ec:	f7ff ff3e 	bl	800216c <__NVIC_GetPriorityGrouping>
 80022f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	68b9      	ldr	r1, [r7, #8]
 80022f6:	6978      	ldr	r0, [r7, #20]
 80022f8:	f7ff ff8e 	bl	8002218 <NVIC_EncodePriority>
 80022fc:	4602      	mov	r2, r0
 80022fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002302:	4611      	mov	r1, r2
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff ff5d 	bl	80021c4 <__NVIC_SetPriority>
}
 800230a:	bf00      	nop
 800230c:	3718      	adds	r7, #24
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b082      	sub	sp, #8
 8002316:	af00      	add	r7, sp, #0
 8002318:	4603      	mov	r3, r0
 800231a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800231c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff ff31 	bl	8002188 <__NVIC_EnableIRQ>
}
 8002326:	bf00      	nop
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b082      	sub	sp, #8
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f7ff ffa2 	bl	8002280 <SysTick_Config>
 800233c:	4603      	mov	r3, r0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
	...

08002348 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002348:	b480      	push	{r7}
 800234a:	b087      	sub	sp, #28
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002352:	2300      	movs	r3, #0
 8002354:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002356:	e17f      	b.n	8002658 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	2101      	movs	r1, #1
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	fa01 f303 	lsl.w	r3, r1, r3
 8002364:	4013      	ands	r3, r2
 8002366:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2b00      	cmp	r3, #0
 800236c:	f000 8171 	beq.w	8002652 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f003 0303 	and.w	r3, r3, #3
 8002378:	2b01      	cmp	r3, #1
 800237a:	d005      	beq.n	8002388 <HAL_GPIO_Init+0x40>
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f003 0303 	and.w	r3, r3, #3
 8002384:	2b02      	cmp	r3, #2
 8002386:	d130      	bne.n	80023ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	2203      	movs	r2, #3
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	43db      	mvns	r3, r3
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	4013      	ands	r3, r2
 800239e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	68da      	ldr	r2, [r3, #12]
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023be:	2201      	movs	r2, #1
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	43db      	mvns	r3, r3
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	4013      	ands	r3, r2
 80023cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	091b      	lsrs	r3, r3, #4
 80023d4:	f003 0201 	and.w	r2, r3, #1
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f003 0303 	and.w	r3, r3, #3
 80023f2:	2b03      	cmp	r3, #3
 80023f4:	d118      	bne.n	8002428 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80023fc:	2201      	movs	r2, #1
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	43db      	mvns	r3, r3
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	4013      	ands	r3, r2
 800240a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	08db      	lsrs	r3, r3, #3
 8002412:	f003 0201 	and.w	r2, r3, #1
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	4313      	orrs	r3, r2
 8002420:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f003 0303 	and.w	r3, r3, #3
 8002430:	2b03      	cmp	r3, #3
 8002432:	d017      	beq.n	8002464 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	2203      	movs	r2, #3
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	43db      	mvns	r3, r3
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	4013      	ands	r3, r2
 800244a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	689a      	ldr	r2, [r3, #8]
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	4313      	orrs	r3, r2
 800245c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f003 0303 	and.w	r3, r3, #3
 800246c:	2b02      	cmp	r3, #2
 800246e:	d123      	bne.n	80024b8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	08da      	lsrs	r2, r3, #3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	3208      	adds	r2, #8
 8002478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800247c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	f003 0307 	and.w	r3, r3, #7
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	220f      	movs	r2, #15
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	43db      	mvns	r3, r3
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	4013      	ands	r3, r2
 8002492:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	691a      	ldr	r2, [r3, #16]
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	f003 0307 	and.w	r3, r3, #7
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	08da      	lsrs	r2, r3, #3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	3208      	adds	r2, #8
 80024b2:	6939      	ldr	r1, [r7, #16]
 80024b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	2203      	movs	r2, #3
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	43db      	mvns	r3, r3
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	4013      	ands	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f003 0203 	and.w	r2, r3, #3
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	693a      	ldr	r2, [r7, #16]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	f000 80ac 	beq.w	8002652 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024fa:	4b5f      	ldr	r3, [pc, #380]	@ (8002678 <HAL_GPIO_Init+0x330>)
 80024fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024fe:	4a5e      	ldr	r2, [pc, #376]	@ (8002678 <HAL_GPIO_Init+0x330>)
 8002500:	f043 0301 	orr.w	r3, r3, #1
 8002504:	6613      	str	r3, [r2, #96]	@ 0x60
 8002506:	4b5c      	ldr	r3, [pc, #368]	@ (8002678 <HAL_GPIO_Init+0x330>)
 8002508:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	60bb      	str	r3, [r7, #8]
 8002510:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002512:	4a5a      	ldr	r2, [pc, #360]	@ (800267c <HAL_GPIO_Init+0x334>)
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	089b      	lsrs	r3, r3, #2
 8002518:	3302      	adds	r3, #2
 800251a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800251e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	f003 0303 	and.w	r3, r3, #3
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	220f      	movs	r2, #15
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	43db      	mvns	r3, r3
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	4013      	ands	r3, r2
 8002534:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800253c:	d025      	beq.n	800258a <HAL_GPIO_Init+0x242>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a4f      	ldr	r2, [pc, #316]	@ (8002680 <HAL_GPIO_Init+0x338>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d01f      	beq.n	8002586 <HAL_GPIO_Init+0x23e>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a4e      	ldr	r2, [pc, #312]	@ (8002684 <HAL_GPIO_Init+0x33c>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d019      	beq.n	8002582 <HAL_GPIO_Init+0x23a>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a4d      	ldr	r2, [pc, #308]	@ (8002688 <HAL_GPIO_Init+0x340>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d013      	beq.n	800257e <HAL_GPIO_Init+0x236>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a4c      	ldr	r2, [pc, #304]	@ (800268c <HAL_GPIO_Init+0x344>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d00d      	beq.n	800257a <HAL_GPIO_Init+0x232>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a4b      	ldr	r2, [pc, #300]	@ (8002690 <HAL_GPIO_Init+0x348>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d007      	beq.n	8002576 <HAL_GPIO_Init+0x22e>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a4a      	ldr	r2, [pc, #296]	@ (8002694 <HAL_GPIO_Init+0x34c>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d101      	bne.n	8002572 <HAL_GPIO_Init+0x22a>
 800256e:	2306      	movs	r3, #6
 8002570:	e00c      	b.n	800258c <HAL_GPIO_Init+0x244>
 8002572:	2307      	movs	r3, #7
 8002574:	e00a      	b.n	800258c <HAL_GPIO_Init+0x244>
 8002576:	2305      	movs	r3, #5
 8002578:	e008      	b.n	800258c <HAL_GPIO_Init+0x244>
 800257a:	2304      	movs	r3, #4
 800257c:	e006      	b.n	800258c <HAL_GPIO_Init+0x244>
 800257e:	2303      	movs	r3, #3
 8002580:	e004      	b.n	800258c <HAL_GPIO_Init+0x244>
 8002582:	2302      	movs	r3, #2
 8002584:	e002      	b.n	800258c <HAL_GPIO_Init+0x244>
 8002586:	2301      	movs	r3, #1
 8002588:	e000      	b.n	800258c <HAL_GPIO_Init+0x244>
 800258a:	2300      	movs	r3, #0
 800258c:	697a      	ldr	r2, [r7, #20]
 800258e:	f002 0203 	and.w	r2, r2, #3
 8002592:	0092      	lsls	r2, r2, #2
 8002594:	4093      	lsls	r3, r2
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	4313      	orrs	r3, r2
 800259a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800259c:	4937      	ldr	r1, [pc, #220]	@ (800267c <HAL_GPIO_Init+0x334>)
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	089b      	lsrs	r3, r3, #2
 80025a2:	3302      	adds	r3, #2
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025aa:	4b3b      	ldr	r3, [pc, #236]	@ (8002698 <HAL_GPIO_Init+0x350>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	43db      	mvns	r3, r3
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	4013      	ands	r3, r2
 80025b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d003      	beq.n	80025ce <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80025c6:	693a      	ldr	r2, [r7, #16]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80025ce:	4a32      	ldr	r2, [pc, #200]	@ (8002698 <HAL_GPIO_Init+0x350>)
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80025d4:	4b30      	ldr	r3, [pc, #192]	@ (8002698 <HAL_GPIO_Init+0x350>)
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	43db      	mvns	r3, r3
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	4013      	ands	r3, r2
 80025e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d003      	beq.n	80025f8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80025f0:	693a      	ldr	r2, [r7, #16]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80025f8:	4a27      	ldr	r2, [pc, #156]	@ (8002698 <HAL_GPIO_Init+0x350>)
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80025fe:	4b26      	ldr	r3, [pc, #152]	@ (8002698 <HAL_GPIO_Init+0x350>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	43db      	mvns	r3, r3
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	4013      	ands	r3, r2
 800260c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d003      	beq.n	8002622 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	4313      	orrs	r3, r2
 8002620:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002622:	4a1d      	ldr	r2, [pc, #116]	@ (8002698 <HAL_GPIO_Init+0x350>)
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002628:	4b1b      	ldr	r3, [pc, #108]	@ (8002698 <HAL_GPIO_Init+0x350>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	43db      	mvns	r3, r3
 8002632:	693a      	ldr	r2, [r7, #16]
 8002634:	4013      	ands	r3, r2
 8002636:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d003      	beq.n	800264c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002644:	693a      	ldr	r2, [r7, #16]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	4313      	orrs	r3, r2
 800264a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800264c:	4a12      	ldr	r2, [pc, #72]	@ (8002698 <HAL_GPIO_Init+0x350>)
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	3301      	adds	r3, #1
 8002656:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	fa22 f303 	lsr.w	r3, r2, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	f47f ae78 	bne.w	8002358 <HAL_GPIO_Init+0x10>
  }
}
 8002668:	bf00      	nop
 800266a:	bf00      	nop
 800266c:	371c      	adds	r7, #28
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	40021000 	.word	0x40021000
 800267c:	40010000 	.word	0x40010000
 8002680:	48000400 	.word	0x48000400
 8002684:	48000800 	.word	0x48000800
 8002688:	48000c00 	.word	0x48000c00
 800268c:	48001000 	.word	0x48001000
 8002690:	48001400 	.word	0x48001400
 8002694:	48001800 	.word	0x48001800
 8002698:	40010400 	.word	0x40010400

0800269c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800269c:	b480      	push	{r7}
 800269e:	b085      	sub	sp, #20
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	460b      	mov	r3, r1
 80026a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	691a      	ldr	r2, [r3, #16]
 80026ac:	887b      	ldrh	r3, [r7, #2]
 80026ae:	4013      	ands	r3, r2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d002      	beq.n	80026ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80026b4:	2301      	movs	r3, #1
 80026b6:	73fb      	strb	r3, [r7, #15]
 80026b8:	e001      	b.n	80026be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026ba:	2300      	movs	r3, #0
 80026bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80026be:	7bfb      	ldrb	r3, [r7, #15]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3714      	adds	r7, #20
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	460b      	mov	r3, r1
 80026d6:	807b      	strh	r3, [r7, #2]
 80026d8:	4613      	mov	r3, r2
 80026da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026dc:	787b      	ldrb	r3, [r7, #1]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d003      	beq.n	80026ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026e2:	887a      	ldrh	r2, [r7, #2]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80026e8:	e002      	b.n	80026f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026ea:	887a      	ldrh	r2, [r7, #2]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	4603      	mov	r3, r0
 8002704:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002706:	4b08      	ldr	r3, [pc, #32]	@ (8002728 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002708:	695a      	ldr	r2, [r3, #20]
 800270a:	88fb      	ldrh	r3, [r7, #6]
 800270c:	4013      	ands	r3, r2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d006      	beq.n	8002720 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002712:	4a05      	ldr	r2, [pc, #20]	@ (8002728 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002714:	88fb      	ldrh	r3, [r7, #6]
 8002716:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002718:	88fb      	ldrh	r3, [r7, #6]
 800271a:	4618      	mov	r0, r3
 800271c:	f000 f806 	bl	800272c <HAL_GPIO_EXTI_Callback>
  }
}
 8002720:	bf00      	nop
 8002722:	3708      	adds	r7, #8
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40010400 	.word	0x40010400

0800272c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	4603      	mov	r3, r0
 8002734:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002736:	bf00      	nop
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
	...

08002744 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002748:	4b04      	ldr	r3, [pc, #16]	@ (800275c <HAL_PWREx_GetVoltageRange+0x18>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002750:	4618      	mov	r0, r3
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	40007000 	.word	0x40007000

08002760 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800276e:	d130      	bne.n	80027d2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002770:	4b23      	ldr	r3, [pc, #140]	@ (8002800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002778:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800277c:	d038      	beq.n	80027f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800277e:	4b20      	ldr	r3, [pc, #128]	@ (8002800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002786:	4a1e      	ldr	r2, [pc, #120]	@ (8002800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002788:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800278c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800278e:	4b1d      	ldr	r3, [pc, #116]	@ (8002804 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2232      	movs	r2, #50	@ 0x32
 8002794:	fb02 f303 	mul.w	r3, r2, r3
 8002798:	4a1b      	ldr	r2, [pc, #108]	@ (8002808 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800279a:	fba2 2303 	umull	r2, r3, r2, r3
 800279e:	0c9b      	lsrs	r3, r3, #18
 80027a0:	3301      	adds	r3, #1
 80027a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027a4:	e002      	b.n	80027ac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	3b01      	subs	r3, #1
 80027aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027ac:	4b14      	ldr	r3, [pc, #80]	@ (8002800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027ae:	695b      	ldr	r3, [r3, #20]
 80027b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027b8:	d102      	bne.n	80027c0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1f2      	bne.n	80027a6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027c2:	695b      	ldr	r3, [r3, #20]
 80027c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027cc:	d110      	bne.n	80027f0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e00f      	b.n	80027f2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80027d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80027da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027de:	d007      	beq.n	80027f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80027e0:	4b07      	ldr	r3, [pc, #28]	@ (8002800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80027e8:	4a05      	ldr	r2, [pc, #20]	@ (8002800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80027ee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3714      	adds	r7, #20
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	40007000 	.word	0x40007000
 8002804:	20000134 	.word	0x20000134
 8002808:	431bde83 	.word	0x431bde83

0800280c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b088      	sub	sp, #32
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e3ca      	b.n	8002fb4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800281e:	4b97      	ldr	r3, [pc, #604]	@ (8002a7c <HAL_RCC_OscConfig+0x270>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f003 030c 	and.w	r3, r3, #12
 8002826:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002828:	4b94      	ldr	r3, [pc, #592]	@ (8002a7c <HAL_RCC_OscConfig+0x270>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	f003 0303 	and.w	r3, r3, #3
 8002830:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0310 	and.w	r3, r3, #16
 800283a:	2b00      	cmp	r3, #0
 800283c:	f000 80e4 	beq.w	8002a08 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d007      	beq.n	8002856 <HAL_RCC_OscConfig+0x4a>
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	2b0c      	cmp	r3, #12
 800284a:	f040 808b 	bne.w	8002964 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	2b01      	cmp	r3, #1
 8002852:	f040 8087 	bne.w	8002964 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002856:	4b89      	ldr	r3, [pc, #548]	@ (8002a7c <HAL_RCC_OscConfig+0x270>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d005      	beq.n	800286e <HAL_RCC_OscConfig+0x62>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e3a2      	b.n	8002fb4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a1a      	ldr	r2, [r3, #32]
 8002872:	4b82      	ldr	r3, [pc, #520]	@ (8002a7c <HAL_RCC_OscConfig+0x270>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0308 	and.w	r3, r3, #8
 800287a:	2b00      	cmp	r3, #0
 800287c:	d004      	beq.n	8002888 <HAL_RCC_OscConfig+0x7c>
 800287e:	4b7f      	ldr	r3, [pc, #508]	@ (8002a7c <HAL_RCC_OscConfig+0x270>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002886:	e005      	b.n	8002894 <HAL_RCC_OscConfig+0x88>
 8002888:	4b7c      	ldr	r3, [pc, #496]	@ (8002a7c <HAL_RCC_OscConfig+0x270>)
 800288a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800288e:	091b      	lsrs	r3, r3, #4
 8002890:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002894:	4293      	cmp	r3, r2
 8002896:	d223      	bcs.n	80028e0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a1b      	ldr	r3, [r3, #32]
 800289c:	4618      	mov	r0, r3
 800289e:	f000 fd1d 	bl	80032dc <RCC_SetFlashLatencyFromMSIRange>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d001      	beq.n	80028ac <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e383      	b.n	8002fb4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028ac:	4b73      	ldr	r3, [pc, #460]	@ (8002a7c <HAL_RCC_OscConfig+0x270>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a72      	ldr	r2, [pc, #456]	@ (8002a7c <HAL_RCC_OscConfig+0x270>)
 80028b2:	f043 0308 	orr.w	r3, r3, #8
 80028b6:	6013      	str	r3, [r2, #0]
 80028b8:	4b70      	ldr	r3, [pc, #448]	@ (8002a7c <HAL_RCC_OscConfig+0x270>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	496d      	ldr	r1, [pc, #436]	@ (8002a7c <HAL_RCC_OscConfig+0x270>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028ca:	4b6c      	ldr	r3, [pc, #432]	@ (8002a7c <HAL_RCC_OscConfig+0x270>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	69db      	ldr	r3, [r3, #28]
 80028d6:	021b      	lsls	r3, r3, #8
 80028d8:	4968      	ldr	r1, [pc, #416]	@ (8002a7c <HAL_RCC_OscConfig+0x270>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	604b      	str	r3, [r1, #4]
 80028de:	e025      	b.n	800292c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028e0:	4b66      	ldr	r3, [pc, #408]	@ (8002a7c <HAL_RCC_OscConfig+0x270>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a65      	ldr	r2, [pc, #404]	@ (8002a7c <HAL_RCC_OscConfig+0x270>)
 80028e6:	f043 0308 	orr.w	r3, r3, #8
 80028ea:	6013      	str	r3, [r2, #0]
 80028ec:	4b63      	ldr	r3, [pc, #396]	@ (8002a7c <HAL_RCC_OscConfig+0x270>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a1b      	ldr	r3, [r3, #32]
 80028f8:	4960      	ldr	r1, [pc, #384]	@ (8002a7c <HAL_RCC_OscConfig+0x270>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028fe:	4b5f      	ldr	r3, [pc, #380]	@ (8002a7c <HAL_RCC_OscConfig+0x270>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	69db      	ldr	r3, [r3, #28]
 800290a:	021b      	lsls	r3, r3, #8
 800290c:	495b      	ldr	r1, [pc, #364]	@ (8002a7c <HAL_RCC_OscConfig+0x270>)
 800290e:	4313      	orrs	r3, r2
 8002910:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d109      	bne.n	800292c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a1b      	ldr	r3, [r3, #32]
 800291c:	4618      	mov	r0, r3
 800291e:	f000 fcdd 	bl	80032dc <RCC_SetFlashLatencyFromMSIRange>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e343      	b.n	8002fb4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800292c:	f000 fc4a 	bl	80031c4 <HAL_RCC_GetSysClockFreq>
 8002930:	4602      	mov	r2, r0
 8002932:	4b52      	ldr	r3, [pc, #328]	@ (8002a7c <HAL_RCC_OscConfig+0x270>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	091b      	lsrs	r3, r3, #4
 8002938:	f003 030f 	and.w	r3, r3, #15
 800293c:	4950      	ldr	r1, [pc, #320]	@ (8002a80 <HAL_RCC_OscConfig+0x274>)
 800293e:	5ccb      	ldrb	r3, [r1, r3]
 8002940:	f003 031f 	and.w	r3, r3, #31
 8002944:	fa22 f303 	lsr.w	r3, r2, r3
 8002948:	4a4e      	ldr	r2, [pc, #312]	@ (8002a84 <HAL_RCC_OscConfig+0x278>)
 800294a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800294c:	4b4e      	ldr	r3, [pc, #312]	@ (8002a88 <HAL_RCC_OscConfig+0x27c>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4618      	mov	r0, r3
 8002952:	f7ff fb67 	bl	8002024 <HAL_InitTick>
 8002956:	4603      	mov	r3, r0
 8002958:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800295a:	7bfb      	ldrb	r3, [r7, #15]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d052      	beq.n	8002a06 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002960:	7bfb      	ldrb	r3, [r7, #15]
 8002962:	e327      	b.n	8002fb4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d032      	beq.n	80029d2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800296c:	4b43      	ldr	r3, [pc, #268]	@ (8002a7c <HAL_RCC_OscConfig+0x270>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a42      	ldr	r2, [pc, #264]	@ (8002a7c <HAL_RCC_OscConfig+0x270>)
 8002972:	f043 0301 	orr.w	r3, r3, #1
 8002976:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002978:	f7ff fba4 	bl	80020c4 <HAL_GetTick>
 800297c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002980:	f7ff fba0 	bl	80020c4 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b02      	cmp	r3, #2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e310      	b.n	8002fb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002992:	4b3a      	ldr	r3, [pc, #232]	@ (8002a7c <HAL_RCC_OscConfig+0x270>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d0f0      	beq.n	8002980 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800299e:	4b37      	ldr	r3, [pc, #220]	@ (8002a7c <HAL_RCC_OscConfig+0x270>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a36      	ldr	r2, [pc, #216]	@ (8002a7c <HAL_RCC_OscConfig+0x270>)
 80029a4:	f043 0308 	orr.w	r3, r3, #8
 80029a8:	6013      	str	r3, [r2, #0]
 80029aa:	4b34      	ldr	r3, [pc, #208]	@ (8002a7c <HAL_RCC_OscConfig+0x270>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a1b      	ldr	r3, [r3, #32]
 80029b6:	4931      	ldr	r1, [pc, #196]	@ (8002a7c <HAL_RCC_OscConfig+0x270>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029bc:	4b2f      	ldr	r3, [pc, #188]	@ (8002a7c <HAL_RCC_OscConfig+0x270>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	69db      	ldr	r3, [r3, #28]
 80029c8:	021b      	lsls	r3, r3, #8
 80029ca:	492c      	ldr	r1, [pc, #176]	@ (8002a7c <HAL_RCC_OscConfig+0x270>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	604b      	str	r3, [r1, #4]
 80029d0:	e01a      	b.n	8002a08 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80029d2:	4b2a      	ldr	r3, [pc, #168]	@ (8002a7c <HAL_RCC_OscConfig+0x270>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a29      	ldr	r2, [pc, #164]	@ (8002a7c <HAL_RCC_OscConfig+0x270>)
 80029d8:	f023 0301 	bic.w	r3, r3, #1
 80029dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029de:	f7ff fb71 	bl	80020c4 <HAL_GetTick>
 80029e2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80029e4:	e008      	b.n	80029f8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029e6:	f7ff fb6d 	bl	80020c4 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e2dd      	b.n	8002fb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80029f8:	4b20      	ldr	r3, [pc, #128]	@ (8002a7c <HAL_RCC_OscConfig+0x270>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d1f0      	bne.n	80029e6 <HAL_RCC_OscConfig+0x1da>
 8002a04:	e000      	b.n	8002a08 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a06:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0301 	and.w	r3, r3, #1
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d074      	beq.n	8002afe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	2b08      	cmp	r3, #8
 8002a18:	d005      	beq.n	8002a26 <HAL_RCC_OscConfig+0x21a>
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	2b0c      	cmp	r3, #12
 8002a1e:	d10e      	bne.n	8002a3e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	2b03      	cmp	r3, #3
 8002a24:	d10b      	bne.n	8002a3e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a26:	4b15      	ldr	r3, [pc, #84]	@ (8002a7c <HAL_RCC_OscConfig+0x270>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d064      	beq.n	8002afc <HAL_RCC_OscConfig+0x2f0>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d160      	bne.n	8002afc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e2ba      	b.n	8002fb4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a46:	d106      	bne.n	8002a56 <HAL_RCC_OscConfig+0x24a>
 8002a48:	4b0c      	ldr	r3, [pc, #48]	@ (8002a7c <HAL_RCC_OscConfig+0x270>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a0b      	ldr	r2, [pc, #44]	@ (8002a7c <HAL_RCC_OscConfig+0x270>)
 8002a4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a52:	6013      	str	r3, [r2, #0]
 8002a54:	e026      	b.n	8002aa4 <HAL_RCC_OscConfig+0x298>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a5e:	d115      	bne.n	8002a8c <HAL_RCC_OscConfig+0x280>
 8002a60:	4b06      	ldr	r3, [pc, #24]	@ (8002a7c <HAL_RCC_OscConfig+0x270>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a05      	ldr	r2, [pc, #20]	@ (8002a7c <HAL_RCC_OscConfig+0x270>)
 8002a66:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a6a:	6013      	str	r3, [r2, #0]
 8002a6c:	4b03      	ldr	r3, [pc, #12]	@ (8002a7c <HAL_RCC_OscConfig+0x270>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a02      	ldr	r2, [pc, #8]	@ (8002a7c <HAL_RCC_OscConfig+0x270>)
 8002a72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a76:	6013      	str	r3, [r2, #0]
 8002a78:	e014      	b.n	8002aa4 <HAL_RCC_OscConfig+0x298>
 8002a7a:	bf00      	nop
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	08004f4c 	.word	0x08004f4c
 8002a84:	20000134 	.word	0x20000134
 8002a88:	20000138 	.word	0x20000138
 8002a8c:	4ba0      	ldr	r3, [pc, #640]	@ (8002d10 <HAL_RCC_OscConfig+0x504>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a9f      	ldr	r2, [pc, #636]	@ (8002d10 <HAL_RCC_OscConfig+0x504>)
 8002a92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a96:	6013      	str	r3, [r2, #0]
 8002a98:	4b9d      	ldr	r3, [pc, #628]	@ (8002d10 <HAL_RCC_OscConfig+0x504>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a9c      	ldr	r2, [pc, #624]	@ (8002d10 <HAL_RCC_OscConfig+0x504>)
 8002a9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002aa2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d013      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aac:	f7ff fb0a 	bl	80020c4 <HAL_GetTick>
 8002ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ab4:	f7ff fb06 	bl	80020c4 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b64      	cmp	r3, #100	@ 0x64
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e276      	b.n	8002fb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ac6:	4b92      	ldr	r3, [pc, #584]	@ (8002d10 <HAL_RCC_OscConfig+0x504>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d0f0      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x2a8>
 8002ad2:	e014      	b.n	8002afe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad4:	f7ff faf6 	bl	80020c4 <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002adc:	f7ff faf2 	bl	80020c4 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b64      	cmp	r3, #100	@ 0x64
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e262      	b.n	8002fb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002aee:	4b88      	ldr	r3, [pc, #544]	@ (8002d10 <HAL_RCC_OscConfig+0x504>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1f0      	bne.n	8002adc <HAL_RCC_OscConfig+0x2d0>
 8002afa:	e000      	b.n	8002afe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002afc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d060      	beq.n	8002bcc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	2b04      	cmp	r3, #4
 8002b0e:	d005      	beq.n	8002b1c <HAL_RCC_OscConfig+0x310>
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	2b0c      	cmp	r3, #12
 8002b14:	d119      	bne.n	8002b4a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d116      	bne.n	8002b4a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b1c:	4b7c      	ldr	r3, [pc, #496]	@ (8002d10 <HAL_RCC_OscConfig+0x504>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d005      	beq.n	8002b34 <HAL_RCC_OscConfig+0x328>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d101      	bne.n	8002b34 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e23f      	b.n	8002fb4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b34:	4b76      	ldr	r3, [pc, #472]	@ (8002d10 <HAL_RCC_OscConfig+0x504>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	061b      	lsls	r3, r3, #24
 8002b42:	4973      	ldr	r1, [pc, #460]	@ (8002d10 <HAL_RCC_OscConfig+0x504>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b48:	e040      	b.n	8002bcc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d023      	beq.n	8002b9a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b52:	4b6f      	ldr	r3, [pc, #444]	@ (8002d10 <HAL_RCC_OscConfig+0x504>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a6e      	ldr	r2, [pc, #440]	@ (8002d10 <HAL_RCC_OscConfig+0x504>)
 8002b58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b5e:	f7ff fab1 	bl	80020c4 <HAL_GetTick>
 8002b62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b64:	e008      	b.n	8002b78 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b66:	f7ff faad 	bl	80020c4 <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d901      	bls.n	8002b78 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e21d      	b.n	8002fb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b78:	4b65      	ldr	r3, [pc, #404]	@ (8002d10 <HAL_RCC_OscConfig+0x504>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d0f0      	beq.n	8002b66 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b84:	4b62      	ldr	r3, [pc, #392]	@ (8002d10 <HAL_RCC_OscConfig+0x504>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	061b      	lsls	r3, r3, #24
 8002b92:	495f      	ldr	r1, [pc, #380]	@ (8002d10 <HAL_RCC_OscConfig+0x504>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	604b      	str	r3, [r1, #4]
 8002b98:	e018      	b.n	8002bcc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b9a:	4b5d      	ldr	r3, [pc, #372]	@ (8002d10 <HAL_RCC_OscConfig+0x504>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a5c      	ldr	r2, [pc, #368]	@ (8002d10 <HAL_RCC_OscConfig+0x504>)
 8002ba0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ba4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba6:	f7ff fa8d 	bl	80020c4 <HAL_GetTick>
 8002baa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bac:	e008      	b.n	8002bc0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bae:	f7ff fa89 	bl	80020c4 <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d901      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e1f9      	b.n	8002fb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bc0:	4b53      	ldr	r3, [pc, #332]	@ (8002d10 <HAL_RCC_OscConfig+0x504>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d1f0      	bne.n	8002bae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0308 	and.w	r3, r3, #8
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d03c      	beq.n	8002c52 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	695b      	ldr	r3, [r3, #20]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d01c      	beq.n	8002c1a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002be0:	4b4b      	ldr	r3, [pc, #300]	@ (8002d10 <HAL_RCC_OscConfig+0x504>)
 8002be2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002be6:	4a4a      	ldr	r2, [pc, #296]	@ (8002d10 <HAL_RCC_OscConfig+0x504>)
 8002be8:	f043 0301 	orr.w	r3, r3, #1
 8002bec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf0:	f7ff fa68 	bl	80020c4 <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bf8:	f7ff fa64 	bl	80020c4 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e1d4      	b.n	8002fb4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c0a:	4b41      	ldr	r3, [pc, #260]	@ (8002d10 <HAL_RCC_OscConfig+0x504>)
 8002c0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d0ef      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x3ec>
 8002c18:	e01b      	b.n	8002c52 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c1a:	4b3d      	ldr	r3, [pc, #244]	@ (8002d10 <HAL_RCC_OscConfig+0x504>)
 8002c1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c20:	4a3b      	ldr	r2, [pc, #236]	@ (8002d10 <HAL_RCC_OscConfig+0x504>)
 8002c22:	f023 0301 	bic.w	r3, r3, #1
 8002c26:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c2a:	f7ff fa4b 	bl	80020c4 <HAL_GetTick>
 8002c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c30:	e008      	b.n	8002c44 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c32:	f7ff fa47 	bl	80020c4 <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d901      	bls.n	8002c44 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e1b7      	b.n	8002fb4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c44:	4b32      	ldr	r3, [pc, #200]	@ (8002d10 <HAL_RCC_OscConfig+0x504>)
 8002c46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1ef      	bne.n	8002c32 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0304 	and.w	r3, r3, #4
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	f000 80a6 	beq.w	8002dac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c60:	2300      	movs	r3, #0
 8002c62:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002c64:	4b2a      	ldr	r3, [pc, #168]	@ (8002d10 <HAL_RCC_OscConfig+0x504>)
 8002c66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d10d      	bne.n	8002c8c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c70:	4b27      	ldr	r3, [pc, #156]	@ (8002d10 <HAL_RCC_OscConfig+0x504>)
 8002c72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c74:	4a26      	ldr	r2, [pc, #152]	@ (8002d10 <HAL_RCC_OscConfig+0x504>)
 8002c76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c7c:	4b24      	ldr	r3, [pc, #144]	@ (8002d10 <HAL_RCC_OscConfig+0x504>)
 8002c7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c84:	60bb      	str	r3, [r7, #8]
 8002c86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c8c:	4b21      	ldr	r3, [pc, #132]	@ (8002d14 <HAL_RCC_OscConfig+0x508>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d118      	bne.n	8002cca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c98:	4b1e      	ldr	r3, [pc, #120]	@ (8002d14 <HAL_RCC_OscConfig+0x508>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a1d      	ldr	r2, [pc, #116]	@ (8002d14 <HAL_RCC_OscConfig+0x508>)
 8002c9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ca2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ca4:	f7ff fa0e 	bl	80020c4 <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cac:	f7ff fa0a 	bl	80020c4 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e17a      	b.n	8002fb4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cbe:	4b15      	ldr	r3, [pc, #84]	@ (8002d14 <HAL_RCC_OscConfig+0x508>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d0f0      	beq.n	8002cac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d108      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x4d8>
 8002cd2:	4b0f      	ldr	r3, [pc, #60]	@ (8002d10 <HAL_RCC_OscConfig+0x504>)
 8002cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cd8:	4a0d      	ldr	r2, [pc, #52]	@ (8002d10 <HAL_RCC_OscConfig+0x504>)
 8002cda:	f043 0301 	orr.w	r3, r3, #1
 8002cde:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ce2:	e029      	b.n	8002d38 <HAL_RCC_OscConfig+0x52c>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	2b05      	cmp	r3, #5
 8002cea:	d115      	bne.n	8002d18 <HAL_RCC_OscConfig+0x50c>
 8002cec:	4b08      	ldr	r3, [pc, #32]	@ (8002d10 <HAL_RCC_OscConfig+0x504>)
 8002cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cf2:	4a07      	ldr	r2, [pc, #28]	@ (8002d10 <HAL_RCC_OscConfig+0x504>)
 8002cf4:	f043 0304 	orr.w	r3, r3, #4
 8002cf8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002cfc:	4b04      	ldr	r3, [pc, #16]	@ (8002d10 <HAL_RCC_OscConfig+0x504>)
 8002cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d02:	4a03      	ldr	r2, [pc, #12]	@ (8002d10 <HAL_RCC_OscConfig+0x504>)
 8002d04:	f043 0301 	orr.w	r3, r3, #1
 8002d08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d0c:	e014      	b.n	8002d38 <HAL_RCC_OscConfig+0x52c>
 8002d0e:	bf00      	nop
 8002d10:	40021000 	.word	0x40021000
 8002d14:	40007000 	.word	0x40007000
 8002d18:	4b9c      	ldr	r3, [pc, #624]	@ (8002f8c <HAL_RCC_OscConfig+0x780>)
 8002d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d1e:	4a9b      	ldr	r2, [pc, #620]	@ (8002f8c <HAL_RCC_OscConfig+0x780>)
 8002d20:	f023 0301 	bic.w	r3, r3, #1
 8002d24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d28:	4b98      	ldr	r3, [pc, #608]	@ (8002f8c <HAL_RCC_OscConfig+0x780>)
 8002d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d2e:	4a97      	ldr	r2, [pc, #604]	@ (8002f8c <HAL_RCC_OscConfig+0x780>)
 8002d30:	f023 0304 	bic.w	r3, r3, #4
 8002d34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d016      	beq.n	8002d6e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d40:	f7ff f9c0 	bl	80020c4 <HAL_GetTick>
 8002d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d46:	e00a      	b.n	8002d5e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d48:	f7ff f9bc 	bl	80020c4 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e12a      	b.n	8002fb4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d5e:	4b8b      	ldr	r3, [pc, #556]	@ (8002f8c <HAL_RCC_OscConfig+0x780>)
 8002d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d64:	f003 0302 	and.w	r3, r3, #2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d0ed      	beq.n	8002d48 <HAL_RCC_OscConfig+0x53c>
 8002d6c:	e015      	b.n	8002d9a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d6e:	f7ff f9a9 	bl	80020c4 <HAL_GetTick>
 8002d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d74:	e00a      	b.n	8002d8c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d76:	f7ff f9a5 	bl	80020c4 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d901      	bls.n	8002d8c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e113      	b.n	8002fb4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d8c:	4b7f      	ldr	r3, [pc, #508]	@ (8002f8c <HAL_RCC_OscConfig+0x780>)
 8002d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1ed      	bne.n	8002d76 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d9a:	7ffb      	ldrb	r3, [r7, #31]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d105      	bne.n	8002dac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002da0:	4b7a      	ldr	r3, [pc, #488]	@ (8002f8c <HAL_RCC_OscConfig+0x780>)
 8002da2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002da4:	4a79      	ldr	r2, [pc, #484]	@ (8002f8c <HAL_RCC_OscConfig+0x780>)
 8002da6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002daa:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f000 80fe 	beq.w	8002fb2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	f040 80d0 	bne.w	8002f60 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002dc0:	4b72      	ldr	r3, [pc, #456]	@ (8002f8c <HAL_RCC_OscConfig+0x780>)
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	f003 0203 	and.w	r2, r3, #3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d130      	bne.n	8002e36 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dde:	3b01      	subs	r3, #1
 8002de0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d127      	bne.n	8002e36 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002df0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d11f      	bne.n	8002e36 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002e00:	2a07      	cmp	r2, #7
 8002e02:	bf14      	ite	ne
 8002e04:	2201      	movne	r2, #1
 8002e06:	2200      	moveq	r2, #0
 8002e08:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d113      	bne.n	8002e36 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e18:	085b      	lsrs	r3, r3, #1
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d109      	bne.n	8002e36 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e2c:	085b      	lsrs	r3, r3, #1
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d06e      	beq.n	8002f14 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	2b0c      	cmp	r3, #12
 8002e3a:	d069      	beq.n	8002f10 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002e3c:	4b53      	ldr	r3, [pc, #332]	@ (8002f8c <HAL_RCC_OscConfig+0x780>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d105      	bne.n	8002e54 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002e48:	4b50      	ldr	r3, [pc, #320]	@ (8002f8c <HAL_RCC_OscConfig+0x780>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e0ad      	b.n	8002fb4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002e58:	4b4c      	ldr	r3, [pc, #304]	@ (8002f8c <HAL_RCC_OscConfig+0x780>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a4b      	ldr	r2, [pc, #300]	@ (8002f8c <HAL_RCC_OscConfig+0x780>)
 8002e5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e62:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e64:	f7ff f92e 	bl	80020c4 <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e6c:	f7ff f92a 	bl	80020c4 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e09a      	b.n	8002fb4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e7e:	4b43      	ldr	r3, [pc, #268]	@ (8002f8c <HAL_RCC_OscConfig+0x780>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1f0      	bne.n	8002e6c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e8a:	4b40      	ldr	r3, [pc, #256]	@ (8002f8c <HAL_RCC_OscConfig+0x780>)
 8002e8c:	68da      	ldr	r2, [r3, #12]
 8002e8e:	4b40      	ldr	r3, [pc, #256]	@ (8002f90 <HAL_RCC_OscConfig+0x784>)
 8002e90:	4013      	ands	r3, r2
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002e9a:	3a01      	subs	r2, #1
 8002e9c:	0112      	lsls	r2, r2, #4
 8002e9e:	4311      	orrs	r1, r2
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002ea4:	0212      	lsls	r2, r2, #8
 8002ea6:	4311      	orrs	r1, r2
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002eac:	0852      	lsrs	r2, r2, #1
 8002eae:	3a01      	subs	r2, #1
 8002eb0:	0552      	lsls	r2, r2, #21
 8002eb2:	4311      	orrs	r1, r2
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002eb8:	0852      	lsrs	r2, r2, #1
 8002eba:	3a01      	subs	r2, #1
 8002ebc:	0652      	lsls	r2, r2, #25
 8002ebe:	4311      	orrs	r1, r2
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002ec4:	0912      	lsrs	r2, r2, #4
 8002ec6:	0452      	lsls	r2, r2, #17
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	4930      	ldr	r1, [pc, #192]	@ (8002f8c <HAL_RCC_OscConfig+0x780>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002ed0:	4b2e      	ldr	r3, [pc, #184]	@ (8002f8c <HAL_RCC_OscConfig+0x780>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a2d      	ldr	r2, [pc, #180]	@ (8002f8c <HAL_RCC_OscConfig+0x780>)
 8002ed6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002eda:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002edc:	4b2b      	ldr	r3, [pc, #172]	@ (8002f8c <HAL_RCC_OscConfig+0x780>)
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	4a2a      	ldr	r2, [pc, #168]	@ (8002f8c <HAL_RCC_OscConfig+0x780>)
 8002ee2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ee6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ee8:	f7ff f8ec 	bl	80020c4 <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eee:	e008      	b.n	8002f02 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ef0:	f7ff f8e8 	bl	80020c4 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e058      	b.n	8002fb4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f02:	4b22      	ldr	r3, [pc, #136]	@ (8002f8c <HAL_RCC_OscConfig+0x780>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d0f0      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f0e:	e050      	b.n	8002fb2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e04f      	b.n	8002fb4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f14:	4b1d      	ldr	r3, [pc, #116]	@ (8002f8c <HAL_RCC_OscConfig+0x780>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d148      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002f20:	4b1a      	ldr	r3, [pc, #104]	@ (8002f8c <HAL_RCC_OscConfig+0x780>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a19      	ldr	r2, [pc, #100]	@ (8002f8c <HAL_RCC_OscConfig+0x780>)
 8002f26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f2a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f2c:	4b17      	ldr	r3, [pc, #92]	@ (8002f8c <HAL_RCC_OscConfig+0x780>)
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	4a16      	ldr	r2, [pc, #88]	@ (8002f8c <HAL_RCC_OscConfig+0x780>)
 8002f32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f36:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f38:	f7ff f8c4 	bl	80020c4 <HAL_GetTick>
 8002f3c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f3e:	e008      	b.n	8002f52 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f40:	f7ff f8c0 	bl	80020c4 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e030      	b.n	8002fb4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f52:	4b0e      	ldr	r3, [pc, #56]	@ (8002f8c <HAL_RCC_OscConfig+0x780>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d0f0      	beq.n	8002f40 <HAL_RCC_OscConfig+0x734>
 8002f5e:	e028      	b.n	8002fb2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	2b0c      	cmp	r3, #12
 8002f64:	d023      	beq.n	8002fae <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f66:	4b09      	ldr	r3, [pc, #36]	@ (8002f8c <HAL_RCC_OscConfig+0x780>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a08      	ldr	r2, [pc, #32]	@ (8002f8c <HAL_RCC_OscConfig+0x780>)
 8002f6c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f72:	f7ff f8a7 	bl	80020c4 <HAL_GetTick>
 8002f76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f78:	e00c      	b.n	8002f94 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f7a:	f7ff f8a3 	bl	80020c4 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d905      	bls.n	8002f94 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e013      	b.n	8002fb4 <HAL_RCC_OscConfig+0x7a8>
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f94:	4b09      	ldr	r3, [pc, #36]	@ (8002fbc <HAL_RCC_OscConfig+0x7b0>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d1ec      	bne.n	8002f7a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002fa0:	4b06      	ldr	r3, [pc, #24]	@ (8002fbc <HAL_RCC_OscConfig+0x7b0>)
 8002fa2:	68da      	ldr	r2, [r3, #12]
 8002fa4:	4905      	ldr	r1, [pc, #20]	@ (8002fbc <HAL_RCC_OscConfig+0x7b0>)
 8002fa6:	4b06      	ldr	r3, [pc, #24]	@ (8002fc0 <HAL_RCC_OscConfig+0x7b4>)
 8002fa8:	4013      	ands	r3, r2
 8002faa:	60cb      	str	r3, [r1, #12]
 8002fac:	e001      	b.n	8002fb2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e000      	b.n	8002fb4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3720      	adds	r7, #32
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	40021000 	.word	0x40021000
 8002fc0:	feeefffc 	.word	0xfeeefffc

08002fc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d101      	bne.n	8002fd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e0e7      	b.n	80031a8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fd8:	4b75      	ldr	r3, [pc, #468]	@ (80031b0 <HAL_RCC_ClockConfig+0x1ec>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0307 	and.w	r3, r3, #7
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d910      	bls.n	8003008 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fe6:	4b72      	ldr	r3, [pc, #456]	@ (80031b0 <HAL_RCC_ClockConfig+0x1ec>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f023 0207 	bic.w	r2, r3, #7
 8002fee:	4970      	ldr	r1, [pc, #448]	@ (80031b0 <HAL_RCC_ClockConfig+0x1ec>)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ff6:	4b6e      	ldr	r3, [pc, #440]	@ (80031b0 <HAL_RCC_ClockConfig+0x1ec>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0307 	and.w	r3, r3, #7
 8002ffe:	683a      	ldr	r2, [r7, #0]
 8003000:	429a      	cmp	r2, r3
 8003002:	d001      	beq.n	8003008 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e0cf      	b.n	80031a8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0302 	and.w	r3, r3, #2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d010      	beq.n	8003036 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689a      	ldr	r2, [r3, #8]
 8003018:	4b66      	ldr	r3, [pc, #408]	@ (80031b4 <HAL_RCC_ClockConfig+0x1f0>)
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003020:	429a      	cmp	r2, r3
 8003022:	d908      	bls.n	8003036 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003024:	4b63      	ldr	r3, [pc, #396]	@ (80031b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	4960      	ldr	r1, [pc, #384]	@ (80031b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003032:	4313      	orrs	r3, r2
 8003034:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	2b00      	cmp	r3, #0
 8003040:	d04c      	beq.n	80030dc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	2b03      	cmp	r3, #3
 8003048:	d107      	bne.n	800305a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800304a:	4b5a      	ldr	r3, [pc, #360]	@ (80031b4 <HAL_RCC_ClockConfig+0x1f0>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d121      	bne.n	800309a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e0a6      	b.n	80031a8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	2b02      	cmp	r3, #2
 8003060:	d107      	bne.n	8003072 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003062:	4b54      	ldr	r3, [pc, #336]	@ (80031b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d115      	bne.n	800309a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e09a      	b.n	80031a8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d107      	bne.n	800308a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800307a:	4b4e      	ldr	r3, [pc, #312]	@ (80031b4 <HAL_RCC_ClockConfig+0x1f0>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d109      	bne.n	800309a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e08e      	b.n	80031a8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800308a:	4b4a      	ldr	r3, [pc, #296]	@ (80031b4 <HAL_RCC_ClockConfig+0x1f0>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e086      	b.n	80031a8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800309a:	4b46      	ldr	r3, [pc, #280]	@ (80031b4 <HAL_RCC_ClockConfig+0x1f0>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f023 0203 	bic.w	r2, r3, #3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	4943      	ldr	r1, [pc, #268]	@ (80031b4 <HAL_RCC_ClockConfig+0x1f0>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030ac:	f7ff f80a 	bl	80020c4 <HAL_GetTick>
 80030b0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030b2:	e00a      	b.n	80030ca <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030b4:	f7ff f806 	bl	80020c4 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e06e      	b.n	80031a8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ca:	4b3a      	ldr	r3, [pc, #232]	@ (80031b4 <HAL_RCC_ClockConfig+0x1f0>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f003 020c 	and.w	r2, r3, #12
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	429a      	cmp	r2, r3
 80030da:	d1eb      	bne.n	80030b4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0302 	and.w	r3, r3, #2
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d010      	beq.n	800310a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689a      	ldr	r2, [r3, #8]
 80030ec:	4b31      	ldr	r3, [pc, #196]	@ (80031b4 <HAL_RCC_ClockConfig+0x1f0>)
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d208      	bcs.n	800310a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030f8:	4b2e      	ldr	r3, [pc, #184]	@ (80031b4 <HAL_RCC_ClockConfig+0x1f0>)
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	492b      	ldr	r1, [pc, #172]	@ (80031b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003106:	4313      	orrs	r3, r2
 8003108:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800310a:	4b29      	ldr	r3, [pc, #164]	@ (80031b0 <HAL_RCC_ClockConfig+0x1ec>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0307 	and.w	r3, r3, #7
 8003112:	683a      	ldr	r2, [r7, #0]
 8003114:	429a      	cmp	r2, r3
 8003116:	d210      	bcs.n	800313a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003118:	4b25      	ldr	r3, [pc, #148]	@ (80031b0 <HAL_RCC_ClockConfig+0x1ec>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f023 0207 	bic.w	r2, r3, #7
 8003120:	4923      	ldr	r1, [pc, #140]	@ (80031b0 <HAL_RCC_ClockConfig+0x1ec>)
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	4313      	orrs	r3, r2
 8003126:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003128:	4b21      	ldr	r3, [pc, #132]	@ (80031b0 <HAL_RCC_ClockConfig+0x1ec>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0307 	and.w	r3, r3, #7
 8003130:	683a      	ldr	r2, [r7, #0]
 8003132:	429a      	cmp	r2, r3
 8003134:	d001      	beq.n	800313a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e036      	b.n	80031a8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0304 	and.w	r3, r3, #4
 8003142:	2b00      	cmp	r3, #0
 8003144:	d008      	beq.n	8003158 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003146:	4b1b      	ldr	r3, [pc, #108]	@ (80031b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	4918      	ldr	r1, [pc, #96]	@ (80031b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003154:	4313      	orrs	r3, r2
 8003156:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0308 	and.w	r3, r3, #8
 8003160:	2b00      	cmp	r3, #0
 8003162:	d009      	beq.n	8003178 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003164:	4b13      	ldr	r3, [pc, #76]	@ (80031b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	00db      	lsls	r3, r3, #3
 8003172:	4910      	ldr	r1, [pc, #64]	@ (80031b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003174:	4313      	orrs	r3, r2
 8003176:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003178:	f000 f824 	bl	80031c4 <HAL_RCC_GetSysClockFreq>
 800317c:	4602      	mov	r2, r0
 800317e:	4b0d      	ldr	r3, [pc, #52]	@ (80031b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	091b      	lsrs	r3, r3, #4
 8003184:	f003 030f 	and.w	r3, r3, #15
 8003188:	490b      	ldr	r1, [pc, #44]	@ (80031b8 <HAL_RCC_ClockConfig+0x1f4>)
 800318a:	5ccb      	ldrb	r3, [r1, r3]
 800318c:	f003 031f 	and.w	r3, r3, #31
 8003190:	fa22 f303 	lsr.w	r3, r2, r3
 8003194:	4a09      	ldr	r2, [pc, #36]	@ (80031bc <HAL_RCC_ClockConfig+0x1f8>)
 8003196:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003198:	4b09      	ldr	r3, [pc, #36]	@ (80031c0 <HAL_RCC_ClockConfig+0x1fc>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4618      	mov	r0, r3
 800319e:	f7fe ff41 	bl	8002024 <HAL_InitTick>
 80031a2:	4603      	mov	r3, r0
 80031a4:	72fb      	strb	r3, [r7, #11]

  return status;
 80031a6:	7afb      	ldrb	r3, [r7, #11]
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3710      	adds	r7, #16
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	40022000 	.word	0x40022000
 80031b4:	40021000 	.word	0x40021000
 80031b8:	08004f4c 	.word	0x08004f4c
 80031bc:	20000134 	.word	0x20000134
 80031c0:	20000138 	.word	0x20000138

080031c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b089      	sub	sp, #36	@ 0x24
 80031c8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80031ca:	2300      	movs	r3, #0
 80031cc:	61fb      	str	r3, [r7, #28]
 80031ce:	2300      	movs	r3, #0
 80031d0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031d2:	4b3e      	ldr	r3, [pc, #248]	@ (80032cc <HAL_RCC_GetSysClockFreq+0x108>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 030c 	and.w	r3, r3, #12
 80031da:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031dc:	4b3b      	ldr	r3, [pc, #236]	@ (80032cc <HAL_RCC_GetSysClockFreq+0x108>)
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	f003 0303 	and.w	r3, r3, #3
 80031e4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d005      	beq.n	80031f8 <HAL_RCC_GetSysClockFreq+0x34>
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	2b0c      	cmp	r3, #12
 80031f0:	d121      	bne.n	8003236 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d11e      	bne.n	8003236 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80031f8:	4b34      	ldr	r3, [pc, #208]	@ (80032cc <HAL_RCC_GetSysClockFreq+0x108>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0308 	and.w	r3, r3, #8
 8003200:	2b00      	cmp	r3, #0
 8003202:	d107      	bne.n	8003214 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003204:	4b31      	ldr	r3, [pc, #196]	@ (80032cc <HAL_RCC_GetSysClockFreq+0x108>)
 8003206:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800320a:	0a1b      	lsrs	r3, r3, #8
 800320c:	f003 030f 	and.w	r3, r3, #15
 8003210:	61fb      	str	r3, [r7, #28]
 8003212:	e005      	b.n	8003220 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003214:	4b2d      	ldr	r3, [pc, #180]	@ (80032cc <HAL_RCC_GetSysClockFreq+0x108>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	091b      	lsrs	r3, r3, #4
 800321a:	f003 030f 	and.w	r3, r3, #15
 800321e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003220:	4a2b      	ldr	r2, [pc, #172]	@ (80032d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003228:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d10d      	bne.n	800324c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003234:	e00a      	b.n	800324c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	2b04      	cmp	r3, #4
 800323a:	d102      	bne.n	8003242 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800323c:	4b25      	ldr	r3, [pc, #148]	@ (80032d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800323e:	61bb      	str	r3, [r7, #24]
 8003240:	e004      	b.n	800324c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	2b08      	cmp	r3, #8
 8003246:	d101      	bne.n	800324c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003248:	4b23      	ldr	r3, [pc, #140]	@ (80032d8 <HAL_RCC_GetSysClockFreq+0x114>)
 800324a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	2b0c      	cmp	r3, #12
 8003250:	d134      	bne.n	80032bc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003252:	4b1e      	ldr	r3, [pc, #120]	@ (80032cc <HAL_RCC_GetSysClockFreq+0x108>)
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	f003 0303 	and.w	r3, r3, #3
 800325a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	2b02      	cmp	r3, #2
 8003260:	d003      	beq.n	800326a <HAL_RCC_GetSysClockFreq+0xa6>
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	2b03      	cmp	r3, #3
 8003266:	d003      	beq.n	8003270 <HAL_RCC_GetSysClockFreq+0xac>
 8003268:	e005      	b.n	8003276 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800326a:	4b1a      	ldr	r3, [pc, #104]	@ (80032d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800326c:	617b      	str	r3, [r7, #20]
      break;
 800326e:	e005      	b.n	800327c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003270:	4b19      	ldr	r3, [pc, #100]	@ (80032d8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003272:	617b      	str	r3, [r7, #20]
      break;
 8003274:	e002      	b.n	800327c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	617b      	str	r3, [r7, #20]
      break;
 800327a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800327c:	4b13      	ldr	r3, [pc, #76]	@ (80032cc <HAL_RCC_GetSysClockFreq+0x108>)
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	091b      	lsrs	r3, r3, #4
 8003282:	f003 0307 	and.w	r3, r3, #7
 8003286:	3301      	adds	r3, #1
 8003288:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800328a:	4b10      	ldr	r3, [pc, #64]	@ (80032cc <HAL_RCC_GetSysClockFreq+0x108>)
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	0a1b      	lsrs	r3, r3, #8
 8003290:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003294:	697a      	ldr	r2, [r7, #20]
 8003296:	fb03 f202 	mul.w	r2, r3, r2
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80032a2:	4b0a      	ldr	r3, [pc, #40]	@ (80032cc <HAL_RCC_GetSysClockFreq+0x108>)
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	0e5b      	lsrs	r3, r3, #25
 80032a8:	f003 0303 	and.w	r3, r3, #3
 80032ac:	3301      	adds	r3, #1
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80032b2:	697a      	ldr	r2, [r7, #20]
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80032bc:	69bb      	ldr	r3, [r7, #24]
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3724      	adds	r7, #36	@ 0x24
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	40021000 	.word	0x40021000
 80032d0:	08004f5c 	.word	0x08004f5c
 80032d4:	00f42400 	.word	0x00f42400
 80032d8:	007a1200 	.word	0x007a1200

080032dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b086      	sub	sp, #24
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80032e4:	2300      	movs	r3, #0
 80032e6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80032e8:	4b2a      	ldr	r3, [pc, #168]	@ (8003394 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d003      	beq.n	80032fc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80032f4:	f7ff fa26 	bl	8002744 <HAL_PWREx_GetVoltageRange>
 80032f8:	6178      	str	r0, [r7, #20]
 80032fa:	e014      	b.n	8003326 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80032fc:	4b25      	ldr	r3, [pc, #148]	@ (8003394 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003300:	4a24      	ldr	r2, [pc, #144]	@ (8003394 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003302:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003306:	6593      	str	r3, [r2, #88]	@ 0x58
 8003308:	4b22      	ldr	r3, [pc, #136]	@ (8003394 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800330a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800330c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003310:	60fb      	str	r3, [r7, #12]
 8003312:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003314:	f7ff fa16 	bl	8002744 <HAL_PWREx_GetVoltageRange>
 8003318:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800331a:	4b1e      	ldr	r3, [pc, #120]	@ (8003394 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800331c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800331e:	4a1d      	ldr	r2, [pc, #116]	@ (8003394 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003320:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003324:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800332c:	d10b      	bne.n	8003346 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2b80      	cmp	r3, #128	@ 0x80
 8003332:	d919      	bls.n	8003368 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2ba0      	cmp	r3, #160	@ 0xa0
 8003338:	d902      	bls.n	8003340 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800333a:	2302      	movs	r3, #2
 800333c:	613b      	str	r3, [r7, #16]
 800333e:	e013      	b.n	8003368 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003340:	2301      	movs	r3, #1
 8003342:	613b      	str	r3, [r7, #16]
 8003344:	e010      	b.n	8003368 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2b80      	cmp	r3, #128	@ 0x80
 800334a:	d902      	bls.n	8003352 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800334c:	2303      	movs	r3, #3
 800334e:	613b      	str	r3, [r7, #16]
 8003350:	e00a      	b.n	8003368 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2b80      	cmp	r3, #128	@ 0x80
 8003356:	d102      	bne.n	800335e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003358:	2302      	movs	r3, #2
 800335a:	613b      	str	r3, [r7, #16]
 800335c:	e004      	b.n	8003368 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2b70      	cmp	r3, #112	@ 0x70
 8003362:	d101      	bne.n	8003368 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003364:	2301      	movs	r3, #1
 8003366:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003368:	4b0b      	ldr	r3, [pc, #44]	@ (8003398 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f023 0207 	bic.w	r2, r3, #7
 8003370:	4909      	ldr	r1, [pc, #36]	@ (8003398 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	4313      	orrs	r3, r2
 8003376:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003378:	4b07      	ldr	r3, [pc, #28]	@ (8003398 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0307 	and.w	r3, r3, #7
 8003380:	693a      	ldr	r2, [r7, #16]
 8003382:	429a      	cmp	r2, r3
 8003384:	d001      	beq.n	800338a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e000      	b.n	800338c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	3718      	adds	r7, #24
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	40021000 	.word	0x40021000
 8003398:	40022000 	.word	0x40022000

0800339c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e095      	b.n	80034da <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d108      	bne.n	80033c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80033be:	d009      	beq.n	80033d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	61da      	str	r2, [r3, #28]
 80033c6:	e005      	b.n	80033d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d106      	bne.n	80033f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f7fe fbf6 	bl	8001be0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2202      	movs	r2, #2
 80033f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800340a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003414:	d902      	bls.n	800341c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003416:	2300      	movs	r3, #0
 8003418:	60fb      	str	r3, [r7, #12]
 800341a:	e002      	b.n	8003422 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800341c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003420:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800342a:	d007      	beq.n	800343c <HAL_SPI_Init+0xa0>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003434:	d002      	beq.n	800343c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800344c:	431a      	orrs	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	431a      	orrs	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	695b      	ldr	r3, [r3, #20]
 800345c:	f003 0301 	and.w	r3, r3, #1
 8003460:	431a      	orrs	r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800346a:	431a      	orrs	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	69db      	ldr	r3, [r3, #28]
 8003470:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003474:	431a      	orrs	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a1b      	ldr	r3, [r3, #32]
 800347a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800347e:	ea42 0103 	orr.w	r1, r2, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003486:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	430a      	orrs	r2, r1
 8003490:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	0c1b      	lsrs	r3, r3, #16
 8003498:	f003 0204 	and.w	r2, r3, #4
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a0:	f003 0310 	and.w	r3, r3, #16
 80034a4:	431a      	orrs	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034aa:	f003 0308 	and.w	r3, r3, #8
 80034ae:	431a      	orrs	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80034b8:	ea42 0103 	orr.w	r1, r2, r3
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3710      	adds	r7, #16
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034e2:	b580      	push	{r7, lr}
 80034e4:	b088      	sub	sp, #32
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	60f8      	str	r0, [r7, #12]
 80034ea:	60b9      	str	r1, [r7, #8]
 80034ec:	603b      	str	r3, [r7, #0]
 80034ee:	4613      	mov	r3, r2
 80034f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80034f2:	2300      	movs	r3, #0
 80034f4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d101      	bne.n	8003504 <HAL_SPI_Transmit+0x22>
 8003500:	2302      	movs	r3, #2
 8003502:	e15f      	b.n	80037c4 <HAL_SPI_Transmit+0x2e2>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800350c:	f7fe fdda 	bl	80020c4 <HAL_GetTick>
 8003510:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003512:	88fb      	ldrh	r3, [r7, #6]
 8003514:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b01      	cmp	r3, #1
 8003520:	d002      	beq.n	8003528 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003522:	2302      	movs	r3, #2
 8003524:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003526:	e148      	b.n	80037ba <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d002      	beq.n	8003534 <HAL_SPI_Transmit+0x52>
 800352e:	88fb      	ldrh	r3, [r7, #6]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d102      	bne.n	800353a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003538:	e13f      	b.n	80037ba <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2203      	movs	r2, #3
 800353e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2200      	movs	r2, #0
 8003546:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	68ba      	ldr	r2, [r7, #8]
 800354c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	88fa      	ldrh	r2, [r7, #6]
 8003552:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	88fa      	ldrh	r2, [r7, #6]
 8003558:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003584:	d10f      	bne.n	80035a6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003594:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80035a4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035b0:	2b40      	cmp	r3, #64	@ 0x40
 80035b2:	d007      	beq.n	80035c4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80035c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80035cc:	d94f      	bls.n	800366e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d002      	beq.n	80035dc <HAL_SPI_Transmit+0xfa>
 80035d6:	8afb      	ldrh	r3, [r7, #22]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d142      	bne.n	8003662 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035e0:	881a      	ldrh	r2, [r3, #0]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035ec:	1c9a      	adds	r2, r3, #2
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	3b01      	subs	r3, #1
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003600:	e02f      	b.n	8003662 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f003 0302 	and.w	r3, r3, #2
 800360c:	2b02      	cmp	r3, #2
 800360e:	d112      	bne.n	8003636 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003614:	881a      	ldrh	r2, [r3, #0]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003620:	1c9a      	adds	r2, r3, #2
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800362a:	b29b      	uxth	r3, r3
 800362c:	3b01      	subs	r3, #1
 800362e:	b29a      	uxth	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003634:	e015      	b.n	8003662 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003636:	f7fe fd45 	bl	80020c4 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	683a      	ldr	r2, [r7, #0]
 8003642:	429a      	cmp	r2, r3
 8003644:	d803      	bhi.n	800364e <HAL_SPI_Transmit+0x16c>
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800364c:	d102      	bne.n	8003654 <HAL_SPI_Transmit+0x172>
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d106      	bne.n	8003662 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003660:	e0ab      	b.n	80037ba <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003666:	b29b      	uxth	r3, r3
 8003668:	2b00      	cmp	r3, #0
 800366a:	d1ca      	bne.n	8003602 <HAL_SPI_Transmit+0x120>
 800366c:	e080      	b.n	8003770 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d002      	beq.n	800367c <HAL_SPI_Transmit+0x19a>
 8003676:	8afb      	ldrh	r3, [r7, #22]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d174      	bne.n	8003766 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003680:	b29b      	uxth	r3, r3
 8003682:	2b01      	cmp	r3, #1
 8003684:	d912      	bls.n	80036ac <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800368a:	881a      	ldrh	r2, [r3, #0]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003696:	1c9a      	adds	r2, r3, #2
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	3b02      	subs	r3, #2
 80036a4:	b29a      	uxth	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80036aa:	e05c      	b.n	8003766 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	330c      	adds	r3, #12
 80036b6:	7812      	ldrb	r2, [r2, #0]
 80036b8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036be:	1c5a      	adds	r2, r3, #1
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	3b01      	subs	r3, #1
 80036cc:	b29a      	uxth	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80036d2:	e048      	b.n	8003766 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d12b      	bne.n	800373a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d912      	bls.n	8003712 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036f0:	881a      	ldrh	r2, [r3, #0]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036fc:	1c9a      	adds	r2, r3, #2
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003706:	b29b      	uxth	r3, r3
 8003708:	3b02      	subs	r3, #2
 800370a:	b29a      	uxth	r2, r3
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003710:	e029      	b.n	8003766 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	330c      	adds	r3, #12
 800371c:	7812      	ldrb	r2, [r2, #0]
 800371e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003724:	1c5a      	adds	r2, r3, #1
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800372e:	b29b      	uxth	r3, r3
 8003730:	3b01      	subs	r3, #1
 8003732:	b29a      	uxth	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003738:	e015      	b.n	8003766 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800373a:	f7fe fcc3 	bl	80020c4 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	683a      	ldr	r2, [r7, #0]
 8003746:	429a      	cmp	r2, r3
 8003748:	d803      	bhi.n	8003752 <HAL_SPI_Transmit+0x270>
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003750:	d102      	bne.n	8003758 <HAL_SPI_Transmit+0x276>
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d106      	bne.n	8003766 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003764:	e029      	b.n	80037ba <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800376a:	b29b      	uxth	r3, r3
 800376c:	2b00      	cmp	r3, #0
 800376e:	d1b1      	bne.n	80036d4 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	6839      	ldr	r1, [r7, #0]
 8003774:	68f8      	ldr	r0, [r7, #12]
 8003776:	f000 fb69 	bl	8003e4c <SPI_EndRxTxTransaction>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d002      	beq.n	8003786 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2220      	movs	r2, #32
 8003784:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10a      	bne.n	80037a4 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800378e:	2300      	movs	r3, #0
 8003790:	613b      	str	r3, [r7, #16]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	613b      	str	r3, [r7, #16]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	613b      	str	r3, [r7, #16]
 80037a2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d002      	beq.n	80037b2 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	77fb      	strb	r3, [r7, #31]
 80037b0:	e003      	b.n	80037ba <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2201      	movs	r2, #1
 80037b6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80037c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3720      	adds	r7, #32
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b08a      	sub	sp, #40	@ 0x28
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]
 80037d8:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80037da:	2301      	movs	r3, #1
 80037dc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80037de:	2300      	movs	r3, #0
 80037e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d101      	bne.n	80037f2 <HAL_SPI_TransmitReceive+0x26>
 80037ee:	2302      	movs	r3, #2
 80037f0:	e20a      	b.n	8003c08 <HAL_SPI_TransmitReceive+0x43c>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037fa:	f7fe fc63 	bl	80020c4 <HAL_GetTick>
 80037fe:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003806:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800380e:	887b      	ldrh	r3, [r7, #2]
 8003810:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003812:	887b      	ldrh	r3, [r7, #2]
 8003814:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003816:	7efb      	ldrb	r3, [r7, #27]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d00e      	beq.n	800383a <HAL_SPI_TransmitReceive+0x6e>
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003822:	d106      	bne.n	8003832 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d102      	bne.n	8003832 <HAL_SPI_TransmitReceive+0x66>
 800382c:	7efb      	ldrb	r3, [r7, #27]
 800382e:	2b04      	cmp	r3, #4
 8003830:	d003      	beq.n	800383a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003832:	2302      	movs	r3, #2
 8003834:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003838:	e1e0      	b.n	8003bfc <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d005      	beq.n	800384c <HAL_SPI_TransmitReceive+0x80>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d002      	beq.n	800384c <HAL_SPI_TransmitReceive+0x80>
 8003846:	887b      	ldrh	r3, [r7, #2]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d103      	bne.n	8003854 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003852:	e1d3      	b.n	8003bfc <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800385a:	b2db      	uxtb	r3, r3
 800385c:	2b04      	cmp	r3, #4
 800385e:	d003      	beq.n	8003868 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2205      	movs	r2, #5
 8003864:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2200      	movs	r2, #0
 800386c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	887a      	ldrh	r2, [r7, #2]
 8003878:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	887a      	ldrh	r2, [r7, #2]
 8003880:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	68ba      	ldr	r2, [r7, #8]
 8003888:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	887a      	ldrh	r2, [r7, #2]
 800388e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	887a      	ldrh	r2, [r7, #2]
 8003894:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2200      	movs	r2, #0
 800389a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80038aa:	d802      	bhi.n	80038b2 <HAL_SPI_TransmitReceive+0xe6>
 80038ac:	8a3b      	ldrh	r3, [r7, #16]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d908      	bls.n	80038c4 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	685a      	ldr	r2, [r3, #4]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80038c0:	605a      	str	r2, [r3, #4]
 80038c2:	e007      	b.n	80038d4 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	685a      	ldr	r2, [r3, #4]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80038d2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038de:	2b40      	cmp	r3, #64	@ 0x40
 80038e0:	d007      	beq.n	80038f2 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80038f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80038fa:	f240 8081 	bls.w	8003a00 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d002      	beq.n	800390c <HAL_SPI_TransmitReceive+0x140>
 8003906:	8a7b      	ldrh	r3, [r7, #18]
 8003908:	2b01      	cmp	r3, #1
 800390a:	d16d      	bne.n	80039e8 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003910:	881a      	ldrh	r2, [r3, #0]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800391c:	1c9a      	adds	r2, r3, #2
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003926:	b29b      	uxth	r3, r3
 8003928:	3b01      	subs	r3, #1
 800392a:	b29a      	uxth	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003930:	e05a      	b.n	80039e8 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	f003 0302 	and.w	r3, r3, #2
 800393c:	2b02      	cmp	r3, #2
 800393e:	d11b      	bne.n	8003978 <HAL_SPI_TransmitReceive+0x1ac>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003944:	b29b      	uxth	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d016      	beq.n	8003978 <HAL_SPI_TransmitReceive+0x1ac>
 800394a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800394c:	2b01      	cmp	r3, #1
 800394e:	d113      	bne.n	8003978 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003954:	881a      	ldrh	r2, [r3, #0]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003960:	1c9a      	adds	r2, r3, #2
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800396a:	b29b      	uxth	r3, r3
 800396c:	3b01      	subs	r3, #1
 800396e:	b29a      	uxth	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003974:	2300      	movs	r3, #0
 8003976:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	2b01      	cmp	r3, #1
 8003984:	d11c      	bne.n	80039c0 <HAL_SPI_TransmitReceive+0x1f4>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800398c:	b29b      	uxth	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d016      	beq.n	80039c0 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68da      	ldr	r2, [r3, #12]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800399c:	b292      	uxth	r2, r2
 800399e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a4:	1c9a      	adds	r2, r3, #2
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	3b01      	subs	r3, #1
 80039b4:	b29a      	uxth	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80039bc:	2301      	movs	r3, #1
 80039be:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80039c0:	f7fe fb80 	bl	80020c4 <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d80b      	bhi.n	80039e8 <HAL_SPI_TransmitReceive+0x21c>
 80039d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80039d6:	d007      	beq.n	80039e8 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2201      	movs	r2, #1
 80039e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80039e6:	e109      	b.n	8003bfc <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d19f      	bne.n	8003932 <HAL_SPI_TransmitReceive+0x166>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d199      	bne.n	8003932 <HAL_SPI_TransmitReceive+0x166>
 80039fe:	e0e3      	b.n	8003bc8 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d003      	beq.n	8003a10 <HAL_SPI_TransmitReceive+0x244>
 8003a08:	8a7b      	ldrh	r3, [r7, #18]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	f040 80cf 	bne.w	8003bae <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d912      	bls.n	8003a40 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a1e:	881a      	ldrh	r2, [r3, #0]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a2a:	1c9a      	adds	r2, r3, #2
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	3b02      	subs	r3, #2
 8003a38:	b29a      	uxth	r2, r3
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003a3e:	e0b6      	b.n	8003bae <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	330c      	adds	r3, #12
 8003a4a:	7812      	ldrb	r2, [r2, #0]
 8003a4c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a52:	1c5a      	adds	r2, r3, #1
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	b29a      	uxth	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a66:	e0a2      	b.n	8003bae <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f003 0302 	and.w	r3, r3, #2
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d134      	bne.n	8003ae0 <HAL_SPI_TransmitReceive+0x314>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d02f      	beq.n	8003ae0 <HAL_SPI_TransmitReceive+0x314>
 8003a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d12c      	bne.n	8003ae0 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d912      	bls.n	8003ab6 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a94:	881a      	ldrh	r2, [r3, #0]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aa0:	1c9a      	adds	r2, r3, #2
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	3b02      	subs	r3, #2
 8003aae:	b29a      	uxth	r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003ab4:	e012      	b.n	8003adc <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	330c      	adds	r3, #12
 8003ac0:	7812      	ldrb	r2, [r2, #0]
 8003ac2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ac8:	1c5a      	adds	r2, r3, #1
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003adc:	2300      	movs	r3, #0
 8003ade:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d148      	bne.n	8003b80 <HAL_SPI_TransmitReceive+0x3b4>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d042      	beq.n	8003b80 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d923      	bls.n	8003b4e <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68da      	ldr	r2, [r3, #12]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b10:	b292      	uxth	r2, r2
 8003b12:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b18:	1c9a      	adds	r2, r3, #2
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	3b02      	subs	r3, #2
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d81f      	bhi.n	8003b7c <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	685a      	ldr	r2, [r3, #4]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003b4a:	605a      	str	r2, [r3, #4]
 8003b4c:	e016      	b.n	8003b7c <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f103 020c 	add.w	r2, r3, #12
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b5a:	7812      	ldrb	r2, [r2, #0]
 8003b5c:	b2d2      	uxtb	r2, r2
 8003b5e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b64:	1c5a      	adds	r2, r3, #1
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	3b01      	subs	r3, #1
 8003b74:	b29a      	uxth	r2, r3
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003b80:	f7fe faa0 	bl	80020c4 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d803      	bhi.n	8003b98 <HAL_SPI_TransmitReceive+0x3cc>
 8003b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b92:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b96:	d102      	bne.n	8003b9e <HAL_SPI_TransmitReceive+0x3d2>
 8003b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d107      	bne.n	8003bae <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003bac:	e026      	b.n	8003bfc <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	f47f af57 	bne.w	8003a68 <HAL_SPI_TransmitReceive+0x29c>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	f47f af50 	bne.w	8003a68 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003bc8:	69fa      	ldr	r2, [r7, #28]
 8003bca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	f000 f93d 	bl	8003e4c <SPI_EndRxTxTransaction>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d005      	beq.n	8003be4 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2220      	movs	r2, #32
 8003be2:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d003      	beq.n	8003bf4 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bf2:	e003      	b.n	8003bfc <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003c04:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3728      	adds	r7, #40	@ 0x28
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b088      	sub	sp, #32
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	603b      	str	r3, [r7, #0]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003c20:	f7fe fa50 	bl	80020c4 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c28:	1a9b      	subs	r3, r3, r2
 8003c2a:	683a      	ldr	r2, [r7, #0]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003c30:	f7fe fa48 	bl	80020c4 <HAL_GetTick>
 8003c34:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003c36:	4b39      	ldr	r3, [pc, #228]	@ (8003d1c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	015b      	lsls	r3, r3, #5
 8003c3c:	0d1b      	lsrs	r3, r3, #20
 8003c3e:	69fa      	ldr	r2, [r7, #28]
 8003c40:	fb02 f303 	mul.w	r3, r2, r3
 8003c44:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c46:	e054      	b.n	8003cf2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c4e:	d050      	beq.n	8003cf2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c50:	f7fe fa38 	bl	80020c4 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	69fa      	ldr	r2, [r7, #28]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d902      	bls.n	8003c66 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d13d      	bne.n	8003ce2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	685a      	ldr	r2, [r3, #4]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003c74:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c7e:	d111      	bne.n	8003ca4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c88:	d004      	beq.n	8003c94 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c92:	d107      	bne.n	8003ca4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ca2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ca8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cac:	d10f      	bne.n	8003cce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003cbc:	601a      	str	r2, [r3, #0]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ccc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e017      	b.n	8003d12 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d101      	bne.n	8003cec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	689a      	ldr	r2, [r3, #8]
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	68ba      	ldr	r2, [r7, #8]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	bf0c      	ite	eq
 8003d02:	2301      	moveq	r3, #1
 8003d04:	2300      	movne	r3, #0
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	461a      	mov	r2, r3
 8003d0a:	79fb      	ldrb	r3, [r7, #7]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d19b      	bne.n	8003c48 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3720      	adds	r7, #32
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	20000134 	.word	0x20000134

08003d20 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b08a      	sub	sp, #40	@ 0x28
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	607a      	str	r2, [r7, #4]
 8003d2c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003d32:	f7fe f9c7 	bl	80020c4 <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d3a:	1a9b      	subs	r3, r3, r2
 8003d3c:	683a      	ldr	r2, [r7, #0]
 8003d3e:	4413      	add	r3, r2
 8003d40:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003d42:	f7fe f9bf 	bl	80020c4 <HAL_GetTick>
 8003d46:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	330c      	adds	r3, #12
 8003d4e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003d50:	4b3d      	ldr	r3, [pc, #244]	@ (8003e48 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	4613      	mov	r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	4413      	add	r3, r2
 8003d5a:	00da      	lsls	r2, r3, #3
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	0d1b      	lsrs	r3, r3, #20
 8003d60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d62:	fb02 f303 	mul.w	r3, r2, r3
 8003d66:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003d68:	e060      	b.n	8003e2c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003d70:	d107      	bne.n	8003d82 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d104      	bne.n	8003d82 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003d80:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d88:	d050      	beq.n	8003e2c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d8a:	f7fe f99b 	bl	80020c4 <HAL_GetTick>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	6a3b      	ldr	r3, [r7, #32]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d902      	bls.n	8003da0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d13d      	bne.n	8003e1c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	685a      	ldr	r2, [r3, #4]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003dae:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003db8:	d111      	bne.n	8003dde <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dc2:	d004      	beq.n	8003dce <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dcc:	d107      	bne.n	8003dde <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ddc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003de2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003de6:	d10f      	bne.n	8003e08 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003df6:	601a      	str	r2, [r3, #0]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e06:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e010      	b.n	8003e3e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d101      	bne.n	8003e26 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003e22:	2300      	movs	r3, #0
 8003e24:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	689a      	ldr	r2, [r3, #8]
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	4013      	ands	r3, r2
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d196      	bne.n	8003d6a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3728      	adds	r7, #40	@ 0x28
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	20000134 	.word	0x20000134

08003e4c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b086      	sub	sp, #24
 8003e50:	af02      	add	r7, sp, #8
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	9300      	str	r3, [sp, #0]
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f7ff ff5b 	bl	8003d20 <SPI_WaitFifoStateUntilTimeout>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d007      	beq.n	8003e80 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e74:	f043 0220 	orr.w	r2, r3, #32
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e027      	b.n	8003ed0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	9300      	str	r3, [sp, #0]
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	2200      	movs	r2, #0
 8003e88:	2180      	movs	r1, #128	@ 0x80
 8003e8a:	68f8      	ldr	r0, [r7, #12]
 8003e8c:	f7ff fec0 	bl	8003c10 <SPI_WaitFlagStateUntilTimeout>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d007      	beq.n	8003ea6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e9a:	f043 0220 	orr.w	r2, r3, #32
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e014      	b.n	8003ed0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	9300      	str	r3, [sp, #0]
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003eb2:	68f8      	ldr	r0, [r7, #12]
 8003eb4:	f7ff ff34 	bl	8003d20 <SPI_WaitFifoStateUntilTimeout>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d007      	beq.n	8003ece <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ec2:	f043 0220 	orr.w	r2, r3, #32
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e000      	b.n	8003ed0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003ece:	2300      	movs	r3, #0
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3710      	adds	r7, #16
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <malloc>:
 8003ed8:	4b02      	ldr	r3, [pc, #8]	@ (8003ee4 <malloc+0xc>)
 8003eda:	4601      	mov	r1, r0
 8003edc:	6818      	ldr	r0, [r3, #0]
 8003ede:	f000 b82d 	b.w	8003f3c <_malloc_r>
 8003ee2:	bf00      	nop
 8003ee4:	2000014c 	.word	0x2000014c

08003ee8 <free>:
 8003ee8:	4b02      	ldr	r3, [pc, #8]	@ (8003ef4 <free+0xc>)
 8003eea:	4601      	mov	r1, r0
 8003eec:	6818      	ldr	r0, [r3, #0]
 8003eee:	f000 ba37 	b.w	8004360 <_free_r>
 8003ef2:	bf00      	nop
 8003ef4:	2000014c 	.word	0x2000014c

08003ef8 <sbrk_aligned>:
 8003ef8:	b570      	push	{r4, r5, r6, lr}
 8003efa:	4e0f      	ldr	r6, [pc, #60]	@ (8003f38 <sbrk_aligned+0x40>)
 8003efc:	460c      	mov	r4, r1
 8003efe:	6831      	ldr	r1, [r6, #0]
 8003f00:	4605      	mov	r5, r0
 8003f02:	b911      	cbnz	r1, 8003f0a <sbrk_aligned+0x12>
 8003f04:	f000 f9e0 	bl	80042c8 <_sbrk_r>
 8003f08:	6030      	str	r0, [r6, #0]
 8003f0a:	4621      	mov	r1, r4
 8003f0c:	4628      	mov	r0, r5
 8003f0e:	f000 f9db 	bl	80042c8 <_sbrk_r>
 8003f12:	1c43      	adds	r3, r0, #1
 8003f14:	d103      	bne.n	8003f1e <sbrk_aligned+0x26>
 8003f16:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003f1a:	4620      	mov	r0, r4
 8003f1c:	bd70      	pop	{r4, r5, r6, pc}
 8003f1e:	1cc4      	adds	r4, r0, #3
 8003f20:	f024 0403 	bic.w	r4, r4, #3
 8003f24:	42a0      	cmp	r0, r4
 8003f26:	d0f8      	beq.n	8003f1a <sbrk_aligned+0x22>
 8003f28:	1a21      	subs	r1, r4, r0
 8003f2a:	4628      	mov	r0, r5
 8003f2c:	f000 f9cc 	bl	80042c8 <_sbrk_r>
 8003f30:	3001      	adds	r0, #1
 8003f32:	d1f2      	bne.n	8003f1a <sbrk_aligned+0x22>
 8003f34:	e7ef      	b.n	8003f16 <sbrk_aligned+0x1e>
 8003f36:	bf00      	nop
 8003f38:	2000035c 	.word	0x2000035c

08003f3c <_malloc_r>:
 8003f3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f40:	1ccd      	adds	r5, r1, #3
 8003f42:	f025 0503 	bic.w	r5, r5, #3
 8003f46:	3508      	adds	r5, #8
 8003f48:	2d0c      	cmp	r5, #12
 8003f4a:	bf38      	it	cc
 8003f4c:	250c      	movcc	r5, #12
 8003f4e:	2d00      	cmp	r5, #0
 8003f50:	4606      	mov	r6, r0
 8003f52:	db01      	blt.n	8003f58 <_malloc_r+0x1c>
 8003f54:	42a9      	cmp	r1, r5
 8003f56:	d904      	bls.n	8003f62 <_malloc_r+0x26>
 8003f58:	230c      	movs	r3, #12
 8003f5a:	6033      	str	r3, [r6, #0]
 8003f5c:	2000      	movs	r0, #0
 8003f5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004038 <_malloc_r+0xfc>
 8003f66:	f000 f869 	bl	800403c <__malloc_lock>
 8003f6a:	f8d8 3000 	ldr.w	r3, [r8]
 8003f6e:	461c      	mov	r4, r3
 8003f70:	bb44      	cbnz	r4, 8003fc4 <_malloc_r+0x88>
 8003f72:	4629      	mov	r1, r5
 8003f74:	4630      	mov	r0, r6
 8003f76:	f7ff ffbf 	bl	8003ef8 <sbrk_aligned>
 8003f7a:	1c43      	adds	r3, r0, #1
 8003f7c:	4604      	mov	r4, r0
 8003f7e:	d158      	bne.n	8004032 <_malloc_r+0xf6>
 8003f80:	f8d8 4000 	ldr.w	r4, [r8]
 8003f84:	4627      	mov	r7, r4
 8003f86:	2f00      	cmp	r7, #0
 8003f88:	d143      	bne.n	8004012 <_malloc_r+0xd6>
 8003f8a:	2c00      	cmp	r4, #0
 8003f8c:	d04b      	beq.n	8004026 <_malloc_r+0xea>
 8003f8e:	6823      	ldr	r3, [r4, #0]
 8003f90:	4639      	mov	r1, r7
 8003f92:	4630      	mov	r0, r6
 8003f94:	eb04 0903 	add.w	r9, r4, r3
 8003f98:	f000 f996 	bl	80042c8 <_sbrk_r>
 8003f9c:	4581      	cmp	r9, r0
 8003f9e:	d142      	bne.n	8004026 <_malloc_r+0xea>
 8003fa0:	6821      	ldr	r1, [r4, #0]
 8003fa2:	1a6d      	subs	r5, r5, r1
 8003fa4:	4629      	mov	r1, r5
 8003fa6:	4630      	mov	r0, r6
 8003fa8:	f7ff ffa6 	bl	8003ef8 <sbrk_aligned>
 8003fac:	3001      	adds	r0, #1
 8003fae:	d03a      	beq.n	8004026 <_malloc_r+0xea>
 8003fb0:	6823      	ldr	r3, [r4, #0]
 8003fb2:	442b      	add	r3, r5
 8003fb4:	6023      	str	r3, [r4, #0]
 8003fb6:	f8d8 3000 	ldr.w	r3, [r8]
 8003fba:	685a      	ldr	r2, [r3, #4]
 8003fbc:	bb62      	cbnz	r2, 8004018 <_malloc_r+0xdc>
 8003fbe:	f8c8 7000 	str.w	r7, [r8]
 8003fc2:	e00f      	b.n	8003fe4 <_malloc_r+0xa8>
 8003fc4:	6822      	ldr	r2, [r4, #0]
 8003fc6:	1b52      	subs	r2, r2, r5
 8003fc8:	d420      	bmi.n	800400c <_malloc_r+0xd0>
 8003fca:	2a0b      	cmp	r2, #11
 8003fcc:	d917      	bls.n	8003ffe <_malloc_r+0xc2>
 8003fce:	1961      	adds	r1, r4, r5
 8003fd0:	42a3      	cmp	r3, r4
 8003fd2:	6025      	str	r5, [r4, #0]
 8003fd4:	bf18      	it	ne
 8003fd6:	6059      	strne	r1, [r3, #4]
 8003fd8:	6863      	ldr	r3, [r4, #4]
 8003fda:	bf08      	it	eq
 8003fdc:	f8c8 1000 	streq.w	r1, [r8]
 8003fe0:	5162      	str	r2, [r4, r5]
 8003fe2:	604b      	str	r3, [r1, #4]
 8003fe4:	4630      	mov	r0, r6
 8003fe6:	f000 f82f 	bl	8004048 <__malloc_unlock>
 8003fea:	f104 000b 	add.w	r0, r4, #11
 8003fee:	1d23      	adds	r3, r4, #4
 8003ff0:	f020 0007 	bic.w	r0, r0, #7
 8003ff4:	1ac2      	subs	r2, r0, r3
 8003ff6:	bf1c      	itt	ne
 8003ff8:	1a1b      	subne	r3, r3, r0
 8003ffa:	50a3      	strne	r3, [r4, r2]
 8003ffc:	e7af      	b.n	8003f5e <_malloc_r+0x22>
 8003ffe:	6862      	ldr	r2, [r4, #4]
 8004000:	42a3      	cmp	r3, r4
 8004002:	bf0c      	ite	eq
 8004004:	f8c8 2000 	streq.w	r2, [r8]
 8004008:	605a      	strne	r2, [r3, #4]
 800400a:	e7eb      	b.n	8003fe4 <_malloc_r+0xa8>
 800400c:	4623      	mov	r3, r4
 800400e:	6864      	ldr	r4, [r4, #4]
 8004010:	e7ae      	b.n	8003f70 <_malloc_r+0x34>
 8004012:	463c      	mov	r4, r7
 8004014:	687f      	ldr	r7, [r7, #4]
 8004016:	e7b6      	b.n	8003f86 <_malloc_r+0x4a>
 8004018:	461a      	mov	r2, r3
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	42a3      	cmp	r3, r4
 800401e:	d1fb      	bne.n	8004018 <_malloc_r+0xdc>
 8004020:	2300      	movs	r3, #0
 8004022:	6053      	str	r3, [r2, #4]
 8004024:	e7de      	b.n	8003fe4 <_malloc_r+0xa8>
 8004026:	230c      	movs	r3, #12
 8004028:	6033      	str	r3, [r6, #0]
 800402a:	4630      	mov	r0, r6
 800402c:	f000 f80c 	bl	8004048 <__malloc_unlock>
 8004030:	e794      	b.n	8003f5c <_malloc_r+0x20>
 8004032:	6005      	str	r5, [r0, #0]
 8004034:	e7d6      	b.n	8003fe4 <_malloc_r+0xa8>
 8004036:	bf00      	nop
 8004038:	20000360 	.word	0x20000360

0800403c <__malloc_lock>:
 800403c:	4801      	ldr	r0, [pc, #4]	@ (8004044 <__malloc_lock+0x8>)
 800403e:	f000 b97e 	b.w	800433e <__retarget_lock_acquire_recursive>
 8004042:	bf00      	nop
 8004044:	200004a0 	.word	0x200004a0

08004048 <__malloc_unlock>:
 8004048:	4801      	ldr	r0, [pc, #4]	@ (8004050 <__malloc_unlock+0x8>)
 800404a:	f000 b979 	b.w	8004340 <__retarget_lock_release_recursive>
 800404e:	bf00      	nop
 8004050:	200004a0 	.word	0x200004a0

08004054 <std>:
 8004054:	2300      	movs	r3, #0
 8004056:	b510      	push	{r4, lr}
 8004058:	4604      	mov	r4, r0
 800405a:	e9c0 3300 	strd	r3, r3, [r0]
 800405e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004062:	6083      	str	r3, [r0, #8]
 8004064:	8181      	strh	r1, [r0, #12]
 8004066:	6643      	str	r3, [r0, #100]	@ 0x64
 8004068:	81c2      	strh	r2, [r0, #14]
 800406a:	6183      	str	r3, [r0, #24]
 800406c:	4619      	mov	r1, r3
 800406e:	2208      	movs	r2, #8
 8004070:	305c      	adds	r0, #92	@ 0x5c
 8004072:	f000 f921 	bl	80042b8 <memset>
 8004076:	4b0d      	ldr	r3, [pc, #52]	@ (80040ac <std+0x58>)
 8004078:	6263      	str	r3, [r4, #36]	@ 0x24
 800407a:	4b0d      	ldr	r3, [pc, #52]	@ (80040b0 <std+0x5c>)
 800407c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800407e:	4b0d      	ldr	r3, [pc, #52]	@ (80040b4 <std+0x60>)
 8004080:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004082:	4b0d      	ldr	r3, [pc, #52]	@ (80040b8 <std+0x64>)
 8004084:	6323      	str	r3, [r4, #48]	@ 0x30
 8004086:	4b0d      	ldr	r3, [pc, #52]	@ (80040bc <std+0x68>)
 8004088:	6224      	str	r4, [r4, #32]
 800408a:	429c      	cmp	r4, r3
 800408c:	d006      	beq.n	800409c <std+0x48>
 800408e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004092:	4294      	cmp	r4, r2
 8004094:	d002      	beq.n	800409c <std+0x48>
 8004096:	33d0      	adds	r3, #208	@ 0xd0
 8004098:	429c      	cmp	r4, r3
 800409a:	d105      	bne.n	80040a8 <std+0x54>
 800409c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80040a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040a4:	f000 b94a 	b.w	800433c <__retarget_lock_init_recursive>
 80040a8:	bd10      	pop	{r4, pc}
 80040aa:	bf00      	nop
 80040ac:	08004aed 	.word	0x08004aed
 80040b0:	08004b0f 	.word	0x08004b0f
 80040b4:	08004b47 	.word	0x08004b47
 80040b8:	08004b6b 	.word	0x08004b6b
 80040bc:	20000364 	.word	0x20000364

080040c0 <stdio_exit_handler>:
 80040c0:	4a02      	ldr	r2, [pc, #8]	@ (80040cc <stdio_exit_handler+0xc>)
 80040c2:	4903      	ldr	r1, [pc, #12]	@ (80040d0 <stdio_exit_handler+0x10>)
 80040c4:	4803      	ldr	r0, [pc, #12]	@ (80040d4 <stdio_exit_handler+0x14>)
 80040c6:	f000 b869 	b.w	800419c <_fwalk_sglue>
 80040ca:	bf00      	nop
 80040cc:	20000140 	.word	0x20000140
 80040d0:	08004a9d 	.word	0x08004a9d
 80040d4:	20000150 	.word	0x20000150

080040d8 <cleanup_stdio>:
 80040d8:	6841      	ldr	r1, [r0, #4]
 80040da:	4b0c      	ldr	r3, [pc, #48]	@ (800410c <cleanup_stdio+0x34>)
 80040dc:	4299      	cmp	r1, r3
 80040de:	b510      	push	{r4, lr}
 80040e0:	4604      	mov	r4, r0
 80040e2:	d001      	beq.n	80040e8 <cleanup_stdio+0x10>
 80040e4:	f000 fcda 	bl	8004a9c <_fflush_r>
 80040e8:	68a1      	ldr	r1, [r4, #8]
 80040ea:	4b09      	ldr	r3, [pc, #36]	@ (8004110 <cleanup_stdio+0x38>)
 80040ec:	4299      	cmp	r1, r3
 80040ee:	d002      	beq.n	80040f6 <cleanup_stdio+0x1e>
 80040f0:	4620      	mov	r0, r4
 80040f2:	f000 fcd3 	bl	8004a9c <_fflush_r>
 80040f6:	68e1      	ldr	r1, [r4, #12]
 80040f8:	4b06      	ldr	r3, [pc, #24]	@ (8004114 <cleanup_stdio+0x3c>)
 80040fa:	4299      	cmp	r1, r3
 80040fc:	d004      	beq.n	8004108 <cleanup_stdio+0x30>
 80040fe:	4620      	mov	r0, r4
 8004100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004104:	f000 bcca 	b.w	8004a9c <_fflush_r>
 8004108:	bd10      	pop	{r4, pc}
 800410a:	bf00      	nop
 800410c:	20000364 	.word	0x20000364
 8004110:	200003cc 	.word	0x200003cc
 8004114:	20000434 	.word	0x20000434

08004118 <global_stdio_init.part.0>:
 8004118:	b510      	push	{r4, lr}
 800411a:	4b0b      	ldr	r3, [pc, #44]	@ (8004148 <global_stdio_init.part.0+0x30>)
 800411c:	4c0b      	ldr	r4, [pc, #44]	@ (800414c <global_stdio_init.part.0+0x34>)
 800411e:	4a0c      	ldr	r2, [pc, #48]	@ (8004150 <global_stdio_init.part.0+0x38>)
 8004120:	601a      	str	r2, [r3, #0]
 8004122:	4620      	mov	r0, r4
 8004124:	2200      	movs	r2, #0
 8004126:	2104      	movs	r1, #4
 8004128:	f7ff ff94 	bl	8004054 <std>
 800412c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004130:	2201      	movs	r2, #1
 8004132:	2109      	movs	r1, #9
 8004134:	f7ff ff8e 	bl	8004054 <std>
 8004138:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800413c:	2202      	movs	r2, #2
 800413e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004142:	2112      	movs	r1, #18
 8004144:	f7ff bf86 	b.w	8004054 <std>
 8004148:	2000049c 	.word	0x2000049c
 800414c:	20000364 	.word	0x20000364
 8004150:	080040c1 	.word	0x080040c1

08004154 <__sfp_lock_acquire>:
 8004154:	4801      	ldr	r0, [pc, #4]	@ (800415c <__sfp_lock_acquire+0x8>)
 8004156:	f000 b8f2 	b.w	800433e <__retarget_lock_acquire_recursive>
 800415a:	bf00      	nop
 800415c:	200004a1 	.word	0x200004a1

08004160 <__sfp_lock_release>:
 8004160:	4801      	ldr	r0, [pc, #4]	@ (8004168 <__sfp_lock_release+0x8>)
 8004162:	f000 b8ed 	b.w	8004340 <__retarget_lock_release_recursive>
 8004166:	bf00      	nop
 8004168:	200004a1 	.word	0x200004a1

0800416c <__sinit>:
 800416c:	b510      	push	{r4, lr}
 800416e:	4604      	mov	r4, r0
 8004170:	f7ff fff0 	bl	8004154 <__sfp_lock_acquire>
 8004174:	6a23      	ldr	r3, [r4, #32]
 8004176:	b11b      	cbz	r3, 8004180 <__sinit+0x14>
 8004178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800417c:	f7ff bff0 	b.w	8004160 <__sfp_lock_release>
 8004180:	4b04      	ldr	r3, [pc, #16]	@ (8004194 <__sinit+0x28>)
 8004182:	6223      	str	r3, [r4, #32]
 8004184:	4b04      	ldr	r3, [pc, #16]	@ (8004198 <__sinit+0x2c>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d1f5      	bne.n	8004178 <__sinit+0xc>
 800418c:	f7ff ffc4 	bl	8004118 <global_stdio_init.part.0>
 8004190:	e7f2      	b.n	8004178 <__sinit+0xc>
 8004192:	bf00      	nop
 8004194:	080040d9 	.word	0x080040d9
 8004198:	2000049c 	.word	0x2000049c

0800419c <_fwalk_sglue>:
 800419c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041a0:	4607      	mov	r7, r0
 80041a2:	4688      	mov	r8, r1
 80041a4:	4614      	mov	r4, r2
 80041a6:	2600      	movs	r6, #0
 80041a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80041ac:	f1b9 0901 	subs.w	r9, r9, #1
 80041b0:	d505      	bpl.n	80041be <_fwalk_sglue+0x22>
 80041b2:	6824      	ldr	r4, [r4, #0]
 80041b4:	2c00      	cmp	r4, #0
 80041b6:	d1f7      	bne.n	80041a8 <_fwalk_sglue+0xc>
 80041b8:	4630      	mov	r0, r6
 80041ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041be:	89ab      	ldrh	r3, [r5, #12]
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d907      	bls.n	80041d4 <_fwalk_sglue+0x38>
 80041c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80041c8:	3301      	adds	r3, #1
 80041ca:	d003      	beq.n	80041d4 <_fwalk_sglue+0x38>
 80041cc:	4629      	mov	r1, r5
 80041ce:	4638      	mov	r0, r7
 80041d0:	47c0      	blx	r8
 80041d2:	4306      	orrs	r6, r0
 80041d4:	3568      	adds	r5, #104	@ 0x68
 80041d6:	e7e9      	b.n	80041ac <_fwalk_sglue+0x10>

080041d8 <iprintf>:
 80041d8:	b40f      	push	{r0, r1, r2, r3}
 80041da:	b507      	push	{r0, r1, r2, lr}
 80041dc:	4906      	ldr	r1, [pc, #24]	@ (80041f8 <iprintf+0x20>)
 80041de:	ab04      	add	r3, sp, #16
 80041e0:	6808      	ldr	r0, [r1, #0]
 80041e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80041e6:	6881      	ldr	r1, [r0, #8]
 80041e8:	9301      	str	r3, [sp, #4]
 80041ea:	f000 f92d 	bl	8004448 <_vfiprintf_r>
 80041ee:	b003      	add	sp, #12
 80041f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80041f4:	b004      	add	sp, #16
 80041f6:	4770      	bx	lr
 80041f8:	2000014c 	.word	0x2000014c

080041fc <_puts_r>:
 80041fc:	6a03      	ldr	r3, [r0, #32]
 80041fe:	b570      	push	{r4, r5, r6, lr}
 8004200:	6884      	ldr	r4, [r0, #8]
 8004202:	4605      	mov	r5, r0
 8004204:	460e      	mov	r6, r1
 8004206:	b90b      	cbnz	r3, 800420c <_puts_r+0x10>
 8004208:	f7ff ffb0 	bl	800416c <__sinit>
 800420c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800420e:	07db      	lsls	r3, r3, #31
 8004210:	d405      	bmi.n	800421e <_puts_r+0x22>
 8004212:	89a3      	ldrh	r3, [r4, #12]
 8004214:	0598      	lsls	r0, r3, #22
 8004216:	d402      	bmi.n	800421e <_puts_r+0x22>
 8004218:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800421a:	f000 f890 	bl	800433e <__retarget_lock_acquire_recursive>
 800421e:	89a3      	ldrh	r3, [r4, #12]
 8004220:	0719      	lsls	r1, r3, #28
 8004222:	d502      	bpl.n	800422a <_puts_r+0x2e>
 8004224:	6923      	ldr	r3, [r4, #16]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d135      	bne.n	8004296 <_puts_r+0x9a>
 800422a:	4621      	mov	r1, r4
 800422c:	4628      	mov	r0, r5
 800422e:	f000 fcdf 	bl	8004bf0 <__swsetup_r>
 8004232:	b380      	cbz	r0, 8004296 <_puts_r+0x9a>
 8004234:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8004238:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800423a:	07da      	lsls	r2, r3, #31
 800423c:	d405      	bmi.n	800424a <_puts_r+0x4e>
 800423e:	89a3      	ldrh	r3, [r4, #12]
 8004240:	059b      	lsls	r3, r3, #22
 8004242:	d402      	bmi.n	800424a <_puts_r+0x4e>
 8004244:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004246:	f000 f87b 	bl	8004340 <__retarget_lock_release_recursive>
 800424a:	4628      	mov	r0, r5
 800424c:	bd70      	pop	{r4, r5, r6, pc}
 800424e:	2b00      	cmp	r3, #0
 8004250:	da04      	bge.n	800425c <_puts_r+0x60>
 8004252:	69a2      	ldr	r2, [r4, #24]
 8004254:	429a      	cmp	r2, r3
 8004256:	dc17      	bgt.n	8004288 <_puts_r+0x8c>
 8004258:	290a      	cmp	r1, #10
 800425a:	d015      	beq.n	8004288 <_puts_r+0x8c>
 800425c:	6823      	ldr	r3, [r4, #0]
 800425e:	1c5a      	adds	r2, r3, #1
 8004260:	6022      	str	r2, [r4, #0]
 8004262:	7019      	strb	r1, [r3, #0]
 8004264:	68a3      	ldr	r3, [r4, #8]
 8004266:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800426a:	3b01      	subs	r3, #1
 800426c:	60a3      	str	r3, [r4, #8]
 800426e:	2900      	cmp	r1, #0
 8004270:	d1ed      	bne.n	800424e <_puts_r+0x52>
 8004272:	2b00      	cmp	r3, #0
 8004274:	da11      	bge.n	800429a <_puts_r+0x9e>
 8004276:	4622      	mov	r2, r4
 8004278:	210a      	movs	r1, #10
 800427a:	4628      	mov	r0, r5
 800427c:	f000 fc79 	bl	8004b72 <__swbuf_r>
 8004280:	3001      	adds	r0, #1
 8004282:	d0d7      	beq.n	8004234 <_puts_r+0x38>
 8004284:	250a      	movs	r5, #10
 8004286:	e7d7      	b.n	8004238 <_puts_r+0x3c>
 8004288:	4622      	mov	r2, r4
 800428a:	4628      	mov	r0, r5
 800428c:	f000 fc71 	bl	8004b72 <__swbuf_r>
 8004290:	3001      	adds	r0, #1
 8004292:	d1e7      	bne.n	8004264 <_puts_r+0x68>
 8004294:	e7ce      	b.n	8004234 <_puts_r+0x38>
 8004296:	3e01      	subs	r6, #1
 8004298:	e7e4      	b.n	8004264 <_puts_r+0x68>
 800429a:	6823      	ldr	r3, [r4, #0]
 800429c:	1c5a      	adds	r2, r3, #1
 800429e:	6022      	str	r2, [r4, #0]
 80042a0:	220a      	movs	r2, #10
 80042a2:	701a      	strb	r2, [r3, #0]
 80042a4:	e7ee      	b.n	8004284 <_puts_r+0x88>
	...

080042a8 <puts>:
 80042a8:	4b02      	ldr	r3, [pc, #8]	@ (80042b4 <puts+0xc>)
 80042aa:	4601      	mov	r1, r0
 80042ac:	6818      	ldr	r0, [r3, #0]
 80042ae:	f7ff bfa5 	b.w	80041fc <_puts_r>
 80042b2:	bf00      	nop
 80042b4:	2000014c 	.word	0x2000014c

080042b8 <memset>:
 80042b8:	4402      	add	r2, r0
 80042ba:	4603      	mov	r3, r0
 80042bc:	4293      	cmp	r3, r2
 80042be:	d100      	bne.n	80042c2 <memset+0xa>
 80042c0:	4770      	bx	lr
 80042c2:	f803 1b01 	strb.w	r1, [r3], #1
 80042c6:	e7f9      	b.n	80042bc <memset+0x4>

080042c8 <_sbrk_r>:
 80042c8:	b538      	push	{r3, r4, r5, lr}
 80042ca:	4d06      	ldr	r5, [pc, #24]	@ (80042e4 <_sbrk_r+0x1c>)
 80042cc:	2300      	movs	r3, #0
 80042ce:	4604      	mov	r4, r0
 80042d0:	4608      	mov	r0, r1
 80042d2:	602b      	str	r3, [r5, #0]
 80042d4:	f7fd fd22 	bl	8001d1c <_sbrk>
 80042d8:	1c43      	adds	r3, r0, #1
 80042da:	d102      	bne.n	80042e2 <_sbrk_r+0x1a>
 80042dc:	682b      	ldr	r3, [r5, #0]
 80042de:	b103      	cbz	r3, 80042e2 <_sbrk_r+0x1a>
 80042e0:	6023      	str	r3, [r4, #0]
 80042e2:	bd38      	pop	{r3, r4, r5, pc}
 80042e4:	200004a4 	.word	0x200004a4

080042e8 <__errno>:
 80042e8:	4b01      	ldr	r3, [pc, #4]	@ (80042f0 <__errno+0x8>)
 80042ea:	6818      	ldr	r0, [r3, #0]
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	2000014c 	.word	0x2000014c

080042f4 <__libc_init_array>:
 80042f4:	b570      	push	{r4, r5, r6, lr}
 80042f6:	4d0d      	ldr	r5, [pc, #52]	@ (800432c <__libc_init_array+0x38>)
 80042f8:	4c0d      	ldr	r4, [pc, #52]	@ (8004330 <__libc_init_array+0x3c>)
 80042fa:	1b64      	subs	r4, r4, r5
 80042fc:	10a4      	asrs	r4, r4, #2
 80042fe:	2600      	movs	r6, #0
 8004300:	42a6      	cmp	r6, r4
 8004302:	d109      	bne.n	8004318 <__libc_init_array+0x24>
 8004304:	4d0b      	ldr	r5, [pc, #44]	@ (8004334 <__libc_init_array+0x40>)
 8004306:	4c0c      	ldr	r4, [pc, #48]	@ (8004338 <__libc_init_array+0x44>)
 8004308:	f000 fd92 	bl	8004e30 <_init>
 800430c:	1b64      	subs	r4, r4, r5
 800430e:	10a4      	asrs	r4, r4, #2
 8004310:	2600      	movs	r6, #0
 8004312:	42a6      	cmp	r6, r4
 8004314:	d105      	bne.n	8004322 <__libc_init_array+0x2e>
 8004316:	bd70      	pop	{r4, r5, r6, pc}
 8004318:	f855 3b04 	ldr.w	r3, [r5], #4
 800431c:	4798      	blx	r3
 800431e:	3601      	adds	r6, #1
 8004320:	e7ee      	b.n	8004300 <__libc_init_array+0xc>
 8004322:	f855 3b04 	ldr.w	r3, [r5], #4
 8004326:	4798      	blx	r3
 8004328:	3601      	adds	r6, #1
 800432a:	e7f2      	b.n	8004312 <__libc_init_array+0x1e>
 800432c:	08004fc8 	.word	0x08004fc8
 8004330:	08004fc8 	.word	0x08004fc8
 8004334:	08004fc8 	.word	0x08004fc8
 8004338:	08004fcc 	.word	0x08004fcc

0800433c <__retarget_lock_init_recursive>:
 800433c:	4770      	bx	lr

0800433e <__retarget_lock_acquire_recursive>:
 800433e:	4770      	bx	lr

08004340 <__retarget_lock_release_recursive>:
 8004340:	4770      	bx	lr

08004342 <memcpy>:
 8004342:	440a      	add	r2, r1
 8004344:	4291      	cmp	r1, r2
 8004346:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800434a:	d100      	bne.n	800434e <memcpy+0xc>
 800434c:	4770      	bx	lr
 800434e:	b510      	push	{r4, lr}
 8004350:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004354:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004358:	4291      	cmp	r1, r2
 800435a:	d1f9      	bne.n	8004350 <memcpy+0xe>
 800435c:	bd10      	pop	{r4, pc}
	...

08004360 <_free_r>:
 8004360:	b538      	push	{r3, r4, r5, lr}
 8004362:	4605      	mov	r5, r0
 8004364:	2900      	cmp	r1, #0
 8004366:	d041      	beq.n	80043ec <_free_r+0x8c>
 8004368:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800436c:	1f0c      	subs	r4, r1, #4
 800436e:	2b00      	cmp	r3, #0
 8004370:	bfb8      	it	lt
 8004372:	18e4      	addlt	r4, r4, r3
 8004374:	f7ff fe62 	bl	800403c <__malloc_lock>
 8004378:	4a1d      	ldr	r2, [pc, #116]	@ (80043f0 <_free_r+0x90>)
 800437a:	6813      	ldr	r3, [r2, #0]
 800437c:	b933      	cbnz	r3, 800438c <_free_r+0x2c>
 800437e:	6063      	str	r3, [r4, #4]
 8004380:	6014      	str	r4, [r2, #0]
 8004382:	4628      	mov	r0, r5
 8004384:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004388:	f7ff be5e 	b.w	8004048 <__malloc_unlock>
 800438c:	42a3      	cmp	r3, r4
 800438e:	d908      	bls.n	80043a2 <_free_r+0x42>
 8004390:	6820      	ldr	r0, [r4, #0]
 8004392:	1821      	adds	r1, r4, r0
 8004394:	428b      	cmp	r3, r1
 8004396:	bf01      	itttt	eq
 8004398:	6819      	ldreq	r1, [r3, #0]
 800439a:	685b      	ldreq	r3, [r3, #4]
 800439c:	1809      	addeq	r1, r1, r0
 800439e:	6021      	streq	r1, [r4, #0]
 80043a0:	e7ed      	b.n	800437e <_free_r+0x1e>
 80043a2:	461a      	mov	r2, r3
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	b10b      	cbz	r3, 80043ac <_free_r+0x4c>
 80043a8:	42a3      	cmp	r3, r4
 80043aa:	d9fa      	bls.n	80043a2 <_free_r+0x42>
 80043ac:	6811      	ldr	r1, [r2, #0]
 80043ae:	1850      	adds	r0, r2, r1
 80043b0:	42a0      	cmp	r0, r4
 80043b2:	d10b      	bne.n	80043cc <_free_r+0x6c>
 80043b4:	6820      	ldr	r0, [r4, #0]
 80043b6:	4401      	add	r1, r0
 80043b8:	1850      	adds	r0, r2, r1
 80043ba:	4283      	cmp	r3, r0
 80043bc:	6011      	str	r1, [r2, #0]
 80043be:	d1e0      	bne.n	8004382 <_free_r+0x22>
 80043c0:	6818      	ldr	r0, [r3, #0]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	6053      	str	r3, [r2, #4]
 80043c6:	4408      	add	r0, r1
 80043c8:	6010      	str	r0, [r2, #0]
 80043ca:	e7da      	b.n	8004382 <_free_r+0x22>
 80043cc:	d902      	bls.n	80043d4 <_free_r+0x74>
 80043ce:	230c      	movs	r3, #12
 80043d0:	602b      	str	r3, [r5, #0]
 80043d2:	e7d6      	b.n	8004382 <_free_r+0x22>
 80043d4:	6820      	ldr	r0, [r4, #0]
 80043d6:	1821      	adds	r1, r4, r0
 80043d8:	428b      	cmp	r3, r1
 80043da:	bf04      	itt	eq
 80043dc:	6819      	ldreq	r1, [r3, #0]
 80043de:	685b      	ldreq	r3, [r3, #4]
 80043e0:	6063      	str	r3, [r4, #4]
 80043e2:	bf04      	itt	eq
 80043e4:	1809      	addeq	r1, r1, r0
 80043e6:	6021      	streq	r1, [r4, #0]
 80043e8:	6054      	str	r4, [r2, #4]
 80043ea:	e7ca      	b.n	8004382 <_free_r+0x22>
 80043ec:	bd38      	pop	{r3, r4, r5, pc}
 80043ee:	bf00      	nop
 80043f0:	20000360 	.word	0x20000360

080043f4 <__sfputc_r>:
 80043f4:	6893      	ldr	r3, [r2, #8]
 80043f6:	3b01      	subs	r3, #1
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	b410      	push	{r4}
 80043fc:	6093      	str	r3, [r2, #8]
 80043fe:	da08      	bge.n	8004412 <__sfputc_r+0x1e>
 8004400:	6994      	ldr	r4, [r2, #24]
 8004402:	42a3      	cmp	r3, r4
 8004404:	db01      	blt.n	800440a <__sfputc_r+0x16>
 8004406:	290a      	cmp	r1, #10
 8004408:	d103      	bne.n	8004412 <__sfputc_r+0x1e>
 800440a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800440e:	f000 bbb0 	b.w	8004b72 <__swbuf_r>
 8004412:	6813      	ldr	r3, [r2, #0]
 8004414:	1c58      	adds	r0, r3, #1
 8004416:	6010      	str	r0, [r2, #0]
 8004418:	7019      	strb	r1, [r3, #0]
 800441a:	4608      	mov	r0, r1
 800441c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004420:	4770      	bx	lr

08004422 <__sfputs_r>:
 8004422:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004424:	4606      	mov	r6, r0
 8004426:	460f      	mov	r7, r1
 8004428:	4614      	mov	r4, r2
 800442a:	18d5      	adds	r5, r2, r3
 800442c:	42ac      	cmp	r4, r5
 800442e:	d101      	bne.n	8004434 <__sfputs_r+0x12>
 8004430:	2000      	movs	r0, #0
 8004432:	e007      	b.n	8004444 <__sfputs_r+0x22>
 8004434:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004438:	463a      	mov	r2, r7
 800443a:	4630      	mov	r0, r6
 800443c:	f7ff ffda 	bl	80043f4 <__sfputc_r>
 8004440:	1c43      	adds	r3, r0, #1
 8004442:	d1f3      	bne.n	800442c <__sfputs_r+0xa>
 8004444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004448 <_vfiprintf_r>:
 8004448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800444c:	460d      	mov	r5, r1
 800444e:	b09d      	sub	sp, #116	@ 0x74
 8004450:	4614      	mov	r4, r2
 8004452:	4698      	mov	r8, r3
 8004454:	4606      	mov	r6, r0
 8004456:	b118      	cbz	r0, 8004460 <_vfiprintf_r+0x18>
 8004458:	6a03      	ldr	r3, [r0, #32]
 800445a:	b90b      	cbnz	r3, 8004460 <_vfiprintf_r+0x18>
 800445c:	f7ff fe86 	bl	800416c <__sinit>
 8004460:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004462:	07d9      	lsls	r1, r3, #31
 8004464:	d405      	bmi.n	8004472 <_vfiprintf_r+0x2a>
 8004466:	89ab      	ldrh	r3, [r5, #12]
 8004468:	059a      	lsls	r2, r3, #22
 800446a:	d402      	bmi.n	8004472 <_vfiprintf_r+0x2a>
 800446c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800446e:	f7ff ff66 	bl	800433e <__retarget_lock_acquire_recursive>
 8004472:	89ab      	ldrh	r3, [r5, #12]
 8004474:	071b      	lsls	r3, r3, #28
 8004476:	d501      	bpl.n	800447c <_vfiprintf_r+0x34>
 8004478:	692b      	ldr	r3, [r5, #16]
 800447a:	b99b      	cbnz	r3, 80044a4 <_vfiprintf_r+0x5c>
 800447c:	4629      	mov	r1, r5
 800447e:	4630      	mov	r0, r6
 8004480:	f000 fbb6 	bl	8004bf0 <__swsetup_r>
 8004484:	b170      	cbz	r0, 80044a4 <_vfiprintf_r+0x5c>
 8004486:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004488:	07dc      	lsls	r4, r3, #31
 800448a:	d504      	bpl.n	8004496 <_vfiprintf_r+0x4e>
 800448c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004490:	b01d      	add	sp, #116	@ 0x74
 8004492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004496:	89ab      	ldrh	r3, [r5, #12]
 8004498:	0598      	lsls	r0, r3, #22
 800449a:	d4f7      	bmi.n	800448c <_vfiprintf_r+0x44>
 800449c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800449e:	f7ff ff4f 	bl	8004340 <__retarget_lock_release_recursive>
 80044a2:	e7f3      	b.n	800448c <_vfiprintf_r+0x44>
 80044a4:	2300      	movs	r3, #0
 80044a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80044a8:	2320      	movs	r3, #32
 80044aa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80044ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80044b2:	2330      	movs	r3, #48	@ 0x30
 80044b4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004664 <_vfiprintf_r+0x21c>
 80044b8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80044bc:	f04f 0901 	mov.w	r9, #1
 80044c0:	4623      	mov	r3, r4
 80044c2:	469a      	mov	sl, r3
 80044c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80044c8:	b10a      	cbz	r2, 80044ce <_vfiprintf_r+0x86>
 80044ca:	2a25      	cmp	r2, #37	@ 0x25
 80044cc:	d1f9      	bne.n	80044c2 <_vfiprintf_r+0x7a>
 80044ce:	ebba 0b04 	subs.w	fp, sl, r4
 80044d2:	d00b      	beq.n	80044ec <_vfiprintf_r+0xa4>
 80044d4:	465b      	mov	r3, fp
 80044d6:	4622      	mov	r2, r4
 80044d8:	4629      	mov	r1, r5
 80044da:	4630      	mov	r0, r6
 80044dc:	f7ff ffa1 	bl	8004422 <__sfputs_r>
 80044e0:	3001      	adds	r0, #1
 80044e2:	f000 80a7 	beq.w	8004634 <_vfiprintf_r+0x1ec>
 80044e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80044e8:	445a      	add	r2, fp
 80044ea:	9209      	str	r2, [sp, #36]	@ 0x24
 80044ec:	f89a 3000 	ldrb.w	r3, [sl]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f000 809f 	beq.w	8004634 <_vfiprintf_r+0x1ec>
 80044f6:	2300      	movs	r3, #0
 80044f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80044fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004500:	f10a 0a01 	add.w	sl, sl, #1
 8004504:	9304      	str	r3, [sp, #16]
 8004506:	9307      	str	r3, [sp, #28]
 8004508:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800450c:	931a      	str	r3, [sp, #104]	@ 0x68
 800450e:	4654      	mov	r4, sl
 8004510:	2205      	movs	r2, #5
 8004512:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004516:	4853      	ldr	r0, [pc, #332]	@ (8004664 <_vfiprintf_r+0x21c>)
 8004518:	f7fb fe5a 	bl	80001d0 <memchr>
 800451c:	9a04      	ldr	r2, [sp, #16]
 800451e:	b9d8      	cbnz	r0, 8004558 <_vfiprintf_r+0x110>
 8004520:	06d1      	lsls	r1, r2, #27
 8004522:	bf44      	itt	mi
 8004524:	2320      	movmi	r3, #32
 8004526:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800452a:	0713      	lsls	r3, r2, #28
 800452c:	bf44      	itt	mi
 800452e:	232b      	movmi	r3, #43	@ 0x2b
 8004530:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004534:	f89a 3000 	ldrb.w	r3, [sl]
 8004538:	2b2a      	cmp	r3, #42	@ 0x2a
 800453a:	d015      	beq.n	8004568 <_vfiprintf_r+0x120>
 800453c:	9a07      	ldr	r2, [sp, #28]
 800453e:	4654      	mov	r4, sl
 8004540:	2000      	movs	r0, #0
 8004542:	f04f 0c0a 	mov.w	ip, #10
 8004546:	4621      	mov	r1, r4
 8004548:	f811 3b01 	ldrb.w	r3, [r1], #1
 800454c:	3b30      	subs	r3, #48	@ 0x30
 800454e:	2b09      	cmp	r3, #9
 8004550:	d94b      	bls.n	80045ea <_vfiprintf_r+0x1a2>
 8004552:	b1b0      	cbz	r0, 8004582 <_vfiprintf_r+0x13a>
 8004554:	9207      	str	r2, [sp, #28]
 8004556:	e014      	b.n	8004582 <_vfiprintf_r+0x13a>
 8004558:	eba0 0308 	sub.w	r3, r0, r8
 800455c:	fa09 f303 	lsl.w	r3, r9, r3
 8004560:	4313      	orrs	r3, r2
 8004562:	9304      	str	r3, [sp, #16]
 8004564:	46a2      	mov	sl, r4
 8004566:	e7d2      	b.n	800450e <_vfiprintf_r+0xc6>
 8004568:	9b03      	ldr	r3, [sp, #12]
 800456a:	1d19      	adds	r1, r3, #4
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	9103      	str	r1, [sp, #12]
 8004570:	2b00      	cmp	r3, #0
 8004572:	bfbb      	ittet	lt
 8004574:	425b      	neglt	r3, r3
 8004576:	f042 0202 	orrlt.w	r2, r2, #2
 800457a:	9307      	strge	r3, [sp, #28]
 800457c:	9307      	strlt	r3, [sp, #28]
 800457e:	bfb8      	it	lt
 8004580:	9204      	strlt	r2, [sp, #16]
 8004582:	7823      	ldrb	r3, [r4, #0]
 8004584:	2b2e      	cmp	r3, #46	@ 0x2e
 8004586:	d10a      	bne.n	800459e <_vfiprintf_r+0x156>
 8004588:	7863      	ldrb	r3, [r4, #1]
 800458a:	2b2a      	cmp	r3, #42	@ 0x2a
 800458c:	d132      	bne.n	80045f4 <_vfiprintf_r+0x1ac>
 800458e:	9b03      	ldr	r3, [sp, #12]
 8004590:	1d1a      	adds	r2, r3, #4
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	9203      	str	r2, [sp, #12]
 8004596:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800459a:	3402      	adds	r4, #2
 800459c:	9305      	str	r3, [sp, #20]
 800459e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004674 <_vfiprintf_r+0x22c>
 80045a2:	7821      	ldrb	r1, [r4, #0]
 80045a4:	2203      	movs	r2, #3
 80045a6:	4650      	mov	r0, sl
 80045a8:	f7fb fe12 	bl	80001d0 <memchr>
 80045ac:	b138      	cbz	r0, 80045be <_vfiprintf_r+0x176>
 80045ae:	9b04      	ldr	r3, [sp, #16]
 80045b0:	eba0 000a 	sub.w	r0, r0, sl
 80045b4:	2240      	movs	r2, #64	@ 0x40
 80045b6:	4082      	lsls	r2, r0
 80045b8:	4313      	orrs	r3, r2
 80045ba:	3401      	adds	r4, #1
 80045bc:	9304      	str	r3, [sp, #16]
 80045be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045c2:	4829      	ldr	r0, [pc, #164]	@ (8004668 <_vfiprintf_r+0x220>)
 80045c4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80045c8:	2206      	movs	r2, #6
 80045ca:	f7fb fe01 	bl	80001d0 <memchr>
 80045ce:	2800      	cmp	r0, #0
 80045d0:	d03f      	beq.n	8004652 <_vfiprintf_r+0x20a>
 80045d2:	4b26      	ldr	r3, [pc, #152]	@ (800466c <_vfiprintf_r+0x224>)
 80045d4:	bb1b      	cbnz	r3, 800461e <_vfiprintf_r+0x1d6>
 80045d6:	9b03      	ldr	r3, [sp, #12]
 80045d8:	3307      	adds	r3, #7
 80045da:	f023 0307 	bic.w	r3, r3, #7
 80045de:	3308      	adds	r3, #8
 80045e0:	9303      	str	r3, [sp, #12]
 80045e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80045e4:	443b      	add	r3, r7
 80045e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80045e8:	e76a      	b.n	80044c0 <_vfiprintf_r+0x78>
 80045ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80045ee:	460c      	mov	r4, r1
 80045f0:	2001      	movs	r0, #1
 80045f2:	e7a8      	b.n	8004546 <_vfiprintf_r+0xfe>
 80045f4:	2300      	movs	r3, #0
 80045f6:	3401      	adds	r4, #1
 80045f8:	9305      	str	r3, [sp, #20]
 80045fa:	4619      	mov	r1, r3
 80045fc:	f04f 0c0a 	mov.w	ip, #10
 8004600:	4620      	mov	r0, r4
 8004602:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004606:	3a30      	subs	r2, #48	@ 0x30
 8004608:	2a09      	cmp	r2, #9
 800460a:	d903      	bls.n	8004614 <_vfiprintf_r+0x1cc>
 800460c:	2b00      	cmp	r3, #0
 800460e:	d0c6      	beq.n	800459e <_vfiprintf_r+0x156>
 8004610:	9105      	str	r1, [sp, #20]
 8004612:	e7c4      	b.n	800459e <_vfiprintf_r+0x156>
 8004614:	fb0c 2101 	mla	r1, ip, r1, r2
 8004618:	4604      	mov	r4, r0
 800461a:	2301      	movs	r3, #1
 800461c:	e7f0      	b.n	8004600 <_vfiprintf_r+0x1b8>
 800461e:	ab03      	add	r3, sp, #12
 8004620:	9300      	str	r3, [sp, #0]
 8004622:	462a      	mov	r2, r5
 8004624:	4b12      	ldr	r3, [pc, #72]	@ (8004670 <_vfiprintf_r+0x228>)
 8004626:	a904      	add	r1, sp, #16
 8004628:	4630      	mov	r0, r6
 800462a:	f3af 8000 	nop.w
 800462e:	4607      	mov	r7, r0
 8004630:	1c78      	adds	r0, r7, #1
 8004632:	d1d6      	bne.n	80045e2 <_vfiprintf_r+0x19a>
 8004634:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004636:	07d9      	lsls	r1, r3, #31
 8004638:	d405      	bmi.n	8004646 <_vfiprintf_r+0x1fe>
 800463a:	89ab      	ldrh	r3, [r5, #12]
 800463c:	059a      	lsls	r2, r3, #22
 800463e:	d402      	bmi.n	8004646 <_vfiprintf_r+0x1fe>
 8004640:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004642:	f7ff fe7d 	bl	8004340 <__retarget_lock_release_recursive>
 8004646:	89ab      	ldrh	r3, [r5, #12]
 8004648:	065b      	lsls	r3, r3, #25
 800464a:	f53f af1f 	bmi.w	800448c <_vfiprintf_r+0x44>
 800464e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004650:	e71e      	b.n	8004490 <_vfiprintf_r+0x48>
 8004652:	ab03      	add	r3, sp, #12
 8004654:	9300      	str	r3, [sp, #0]
 8004656:	462a      	mov	r2, r5
 8004658:	4b05      	ldr	r3, [pc, #20]	@ (8004670 <_vfiprintf_r+0x228>)
 800465a:	a904      	add	r1, sp, #16
 800465c:	4630      	mov	r0, r6
 800465e:	f000 f879 	bl	8004754 <_printf_i>
 8004662:	e7e4      	b.n	800462e <_vfiprintf_r+0x1e6>
 8004664:	08004f8c 	.word	0x08004f8c
 8004668:	08004f96 	.word	0x08004f96
 800466c:	00000000 	.word	0x00000000
 8004670:	08004423 	.word	0x08004423
 8004674:	08004f92 	.word	0x08004f92

08004678 <_printf_common>:
 8004678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800467c:	4616      	mov	r6, r2
 800467e:	4698      	mov	r8, r3
 8004680:	688a      	ldr	r2, [r1, #8]
 8004682:	690b      	ldr	r3, [r1, #16]
 8004684:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004688:	4293      	cmp	r3, r2
 800468a:	bfb8      	it	lt
 800468c:	4613      	movlt	r3, r2
 800468e:	6033      	str	r3, [r6, #0]
 8004690:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004694:	4607      	mov	r7, r0
 8004696:	460c      	mov	r4, r1
 8004698:	b10a      	cbz	r2, 800469e <_printf_common+0x26>
 800469a:	3301      	adds	r3, #1
 800469c:	6033      	str	r3, [r6, #0]
 800469e:	6823      	ldr	r3, [r4, #0]
 80046a0:	0699      	lsls	r1, r3, #26
 80046a2:	bf42      	ittt	mi
 80046a4:	6833      	ldrmi	r3, [r6, #0]
 80046a6:	3302      	addmi	r3, #2
 80046a8:	6033      	strmi	r3, [r6, #0]
 80046aa:	6825      	ldr	r5, [r4, #0]
 80046ac:	f015 0506 	ands.w	r5, r5, #6
 80046b0:	d106      	bne.n	80046c0 <_printf_common+0x48>
 80046b2:	f104 0a19 	add.w	sl, r4, #25
 80046b6:	68e3      	ldr	r3, [r4, #12]
 80046b8:	6832      	ldr	r2, [r6, #0]
 80046ba:	1a9b      	subs	r3, r3, r2
 80046bc:	42ab      	cmp	r3, r5
 80046be:	dc26      	bgt.n	800470e <_printf_common+0x96>
 80046c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80046c4:	6822      	ldr	r2, [r4, #0]
 80046c6:	3b00      	subs	r3, #0
 80046c8:	bf18      	it	ne
 80046ca:	2301      	movne	r3, #1
 80046cc:	0692      	lsls	r2, r2, #26
 80046ce:	d42b      	bmi.n	8004728 <_printf_common+0xb0>
 80046d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80046d4:	4641      	mov	r1, r8
 80046d6:	4638      	mov	r0, r7
 80046d8:	47c8      	blx	r9
 80046da:	3001      	adds	r0, #1
 80046dc:	d01e      	beq.n	800471c <_printf_common+0xa4>
 80046de:	6823      	ldr	r3, [r4, #0]
 80046e0:	6922      	ldr	r2, [r4, #16]
 80046e2:	f003 0306 	and.w	r3, r3, #6
 80046e6:	2b04      	cmp	r3, #4
 80046e8:	bf02      	ittt	eq
 80046ea:	68e5      	ldreq	r5, [r4, #12]
 80046ec:	6833      	ldreq	r3, [r6, #0]
 80046ee:	1aed      	subeq	r5, r5, r3
 80046f0:	68a3      	ldr	r3, [r4, #8]
 80046f2:	bf0c      	ite	eq
 80046f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046f8:	2500      	movne	r5, #0
 80046fa:	4293      	cmp	r3, r2
 80046fc:	bfc4      	itt	gt
 80046fe:	1a9b      	subgt	r3, r3, r2
 8004700:	18ed      	addgt	r5, r5, r3
 8004702:	2600      	movs	r6, #0
 8004704:	341a      	adds	r4, #26
 8004706:	42b5      	cmp	r5, r6
 8004708:	d11a      	bne.n	8004740 <_printf_common+0xc8>
 800470a:	2000      	movs	r0, #0
 800470c:	e008      	b.n	8004720 <_printf_common+0xa8>
 800470e:	2301      	movs	r3, #1
 8004710:	4652      	mov	r2, sl
 8004712:	4641      	mov	r1, r8
 8004714:	4638      	mov	r0, r7
 8004716:	47c8      	blx	r9
 8004718:	3001      	adds	r0, #1
 800471a:	d103      	bne.n	8004724 <_printf_common+0xac>
 800471c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004724:	3501      	adds	r5, #1
 8004726:	e7c6      	b.n	80046b6 <_printf_common+0x3e>
 8004728:	18e1      	adds	r1, r4, r3
 800472a:	1c5a      	adds	r2, r3, #1
 800472c:	2030      	movs	r0, #48	@ 0x30
 800472e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004732:	4422      	add	r2, r4
 8004734:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004738:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800473c:	3302      	adds	r3, #2
 800473e:	e7c7      	b.n	80046d0 <_printf_common+0x58>
 8004740:	2301      	movs	r3, #1
 8004742:	4622      	mov	r2, r4
 8004744:	4641      	mov	r1, r8
 8004746:	4638      	mov	r0, r7
 8004748:	47c8      	blx	r9
 800474a:	3001      	adds	r0, #1
 800474c:	d0e6      	beq.n	800471c <_printf_common+0xa4>
 800474e:	3601      	adds	r6, #1
 8004750:	e7d9      	b.n	8004706 <_printf_common+0x8e>
	...

08004754 <_printf_i>:
 8004754:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004758:	7e0f      	ldrb	r7, [r1, #24]
 800475a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800475c:	2f78      	cmp	r7, #120	@ 0x78
 800475e:	4691      	mov	r9, r2
 8004760:	4680      	mov	r8, r0
 8004762:	460c      	mov	r4, r1
 8004764:	469a      	mov	sl, r3
 8004766:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800476a:	d807      	bhi.n	800477c <_printf_i+0x28>
 800476c:	2f62      	cmp	r7, #98	@ 0x62
 800476e:	d80a      	bhi.n	8004786 <_printf_i+0x32>
 8004770:	2f00      	cmp	r7, #0
 8004772:	f000 80d2 	beq.w	800491a <_printf_i+0x1c6>
 8004776:	2f58      	cmp	r7, #88	@ 0x58
 8004778:	f000 80b9 	beq.w	80048ee <_printf_i+0x19a>
 800477c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004780:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004784:	e03a      	b.n	80047fc <_printf_i+0xa8>
 8004786:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800478a:	2b15      	cmp	r3, #21
 800478c:	d8f6      	bhi.n	800477c <_printf_i+0x28>
 800478e:	a101      	add	r1, pc, #4	@ (adr r1, 8004794 <_printf_i+0x40>)
 8004790:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004794:	080047ed 	.word	0x080047ed
 8004798:	08004801 	.word	0x08004801
 800479c:	0800477d 	.word	0x0800477d
 80047a0:	0800477d 	.word	0x0800477d
 80047a4:	0800477d 	.word	0x0800477d
 80047a8:	0800477d 	.word	0x0800477d
 80047ac:	08004801 	.word	0x08004801
 80047b0:	0800477d 	.word	0x0800477d
 80047b4:	0800477d 	.word	0x0800477d
 80047b8:	0800477d 	.word	0x0800477d
 80047bc:	0800477d 	.word	0x0800477d
 80047c0:	08004901 	.word	0x08004901
 80047c4:	0800482b 	.word	0x0800482b
 80047c8:	080048bb 	.word	0x080048bb
 80047cc:	0800477d 	.word	0x0800477d
 80047d0:	0800477d 	.word	0x0800477d
 80047d4:	08004923 	.word	0x08004923
 80047d8:	0800477d 	.word	0x0800477d
 80047dc:	0800482b 	.word	0x0800482b
 80047e0:	0800477d 	.word	0x0800477d
 80047e4:	0800477d 	.word	0x0800477d
 80047e8:	080048c3 	.word	0x080048c3
 80047ec:	6833      	ldr	r3, [r6, #0]
 80047ee:	1d1a      	adds	r2, r3, #4
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	6032      	str	r2, [r6, #0]
 80047f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80047f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80047fc:	2301      	movs	r3, #1
 80047fe:	e09d      	b.n	800493c <_printf_i+0x1e8>
 8004800:	6833      	ldr	r3, [r6, #0]
 8004802:	6820      	ldr	r0, [r4, #0]
 8004804:	1d19      	adds	r1, r3, #4
 8004806:	6031      	str	r1, [r6, #0]
 8004808:	0606      	lsls	r6, r0, #24
 800480a:	d501      	bpl.n	8004810 <_printf_i+0xbc>
 800480c:	681d      	ldr	r5, [r3, #0]
 800480e:	e003      	b.n	8004818 <_printf_i+0xc4>
 8004810:	0645      	lsls	r5, r0, #25
 8004812:	d5fb      	bpl.n	800480c <_printf_i+0xb8>
 8004814:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004818:	2d00      	cmp	r5, #0
 800481a:	da03      	bge.n	8004824 <_printf_i+0xd0>
 800481c:	232d      	movs	r3, #45	@ 0x2d
 800481e:	426d      	negs	r5, r5
 8004820:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004824:	4859      	ldr	r0, [pc, #356]	@ (800498c <_printf_i+0x238>)
 8004826:	230a      	movs	r3, #10
 8004828:	e011      	b.n	800484e <_printf_i+0xfa>
 800482a:	6821      	ldr	r1, [r4, #0]
 800482c:	6833      	ldr	r3, [r6, #0]
 800482e:	0608      	lsls	r0, r1, #24
 8004830:	f853 5b04 	ldr.w	r5, [r3], #4
 8004834:	d402      	bmi.n	800483c <_printf_i+0xe8>
 8004836:	0649      	lsls	r1, r1, #25
 8004838:	bf48      	it	mi
 800483a:	b2ad      	uxthmi	r5, r5
 800483c:	2f6f      	cmp	r7, #111	@ 0x6f
 800483e:	4853      	ldr	r0, [pc, #332]	@ (800498c <_printf_i+0x238>)
 8004840:	6033      	str	r3, [r6, #0]
 8004842:	bf14      	ite	ne
 8004844:	230a      	movne	r3, #10
 8004846:	2308      	moveq	r3, #8
 8004848:	2100      	movs	r1, #0
 800484a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800484e:	6866      	ldr	r6, [r4, #4]
 8004850:	60a6      	str	r6, [r4, #8]
 8004852:	2e00      	cmp	r6, #0
 8004854:	bfa2      	ittt	ge
 8004856:	6821      	ldrge	r1, [r4, #0]
 8004858:	f021 0104 	bicge.w	r1, r1, #4
 800485c:	6021      	strge	r1, [r4, #0]
 800485e:	b90d      	cbnz	r5, 8004864 <_printf_i+0x110>
 8004860:	2e00      	cmp	r6, #0
 8004862:	d04b      	beq.n	80048fc <_printf_i+0x1a8>
 8004864:	4616      	mov	r6, r2
 8004866:	fbb5 f1f3 	udiv	r1, r5, r3
 800486a:	fb03 5711 	mls	r7, r3, r1, r5
 800486e:	5dc7      	ldrb	r7, [r0, r7]
 8004870:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004874:	462f      	mov	r7, r5
 8004876:	42bb      	cmp	r3, r7
 8004878:	460d      	mov	r5, r1
 800487a:	d9f4      	bls.n	8004866 <_printf_i+0x112>
 800487c:	2b08      	cmp	r3, #8
 800487e:	d10b      	bne.n	8004898 <_printf_i+0x144>
 8004880:	6823      	ldr	r3, [r4, #0]
 8004882:	07df      	lsls	r7, r3, #31
 8004884:	d508      	bpl.n	8004898 <_printf_i+0x144>
 8004886:	6923      	ldr	r3, [r4, #16]
 8004888:	6861      	ldr	r1, [r4, #4]
 800488a:	4299      	cmp	r1, r3
 800488c:	bfde      	ittt	le
 800488e:	2330      	movle	r3, #48	@ 0x30
 8004890:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004894:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004898:	1b92      	subs	r2, r2, r6
 800489a:	6122      	str	r2, [r4, #16]
 800489c:	f8cd a000 	str.w	sl, [sp]
 80048a0:	464b      	mov	r3, r9
 80048a2:	aa03      	add	r2, sp, #12
 80048a4:	4621      	mov	r1, r4
 80048a6:	4640      	mov	r0, r8
 80048a8:	f7ff fee6 	bl	8004678 <_printf_common>
 80048ac:	3001      	adds	r0, #1
 80048ae:	d14a      	bne.n	8004946 <_printf_i+0x1f2>
 80048b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80048b4:	b004      	add	sp, #16
 80048b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048ba:	6823      	ldr	r3, [r4, #0]
 80048bc:	f043 0320 	orr.w	r3, r3, #32
 80048c0:	6023      	str	r3, [r4, #0]
 80048c2:	4833      	ldr	r0, [pc, #204]	@ (8004990 <_printf_i+0x23c>)
 80048c4:	2778      	movs	r7, #120	@ 0x78
 80048c6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80048ca:	6823      	ldr	r3, [r4, #0]
 80048cc:	6831      	ldr	r1, [r6, #0]
 80048ce:	061f      	lsls	r7, r3, #24
 80048d0:	f851 5b04 	ldr.w	r5, [r1], #4
 80048d4:	d402      	bmi.n	80048dc <_printf_i+0x188>
 80048d6:	065f      	lsls	r7, r3, #25
 80048d8:	bf48      	it	mi
 80048da:	b2ad      	uxthmi	r5, r5
 80048dc:	6031      	str	r1, [r6, #0]
 80048de:	07d9      	lsls	r1, r3, #31
 80048e0:	bf44      	itt	mi
 80048e2:	f043 0320 	orrmi.w	r3, r3, #32
 80048e6:	6023      	strmi	r3, [r4, #0]
 80048e8:	b11d      	cbz	r5, 80048f2 <_printf_i+0x19e>
 80048ea:	2310      	movs	r3, #16
 80048ec:	e7ac      	b.n	8004848 <_printf_i+0xf4>
 80048ee:	4827      	ldr	r0, [pc, #156]	@ (800498c <_printf_i+0x238>)
 80048f0:	e7e9      	b.n	80048c6 <_printf_i+0x172>
 80048f2:	6823      	ldr	r3, [r4, #0]
 80048f4:	f023 0320 	bic.w	r3, r3, #32
 80048f8:	6023      	str	r3, [r4, #0]
 80048fa:	e7f6      	b.n	80048ea <_printf_i+0x196>
 80048fc:	4616      	mov	r6, r2
 80048fe:	e7bd      	b.n	800487c <_printf_i+0x128>
 8004900:	6833      	ldr	r3, [r6, #0]
 8004902:	6825      	ldr	r5, [r4, #0]
 8004904:	6961      	ldr	r1, [r4, #20]
 8004906:	1d18      	adds	r0, r3, #4
 8004908:	6030      	str	r0, [r6, #0]
 800490a:	062e      	lsls	r6, r5, #24
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	d501      	bpl.n	8004914 <_printf_i+0x1c0>
 8004910:	6019      	str	r1, [r3, #0]
 8004912:	e002      	b.n	800491a <_printf_i+0x1c6>
 8004914:	0668      	lsls	r0, r5, #25
 8004916:	d5fb      	bpl.n	8004910 <_printf_i+0x1bc>
 8004918:	8019      	strh	r1, [r3, #0]
 800491a:	2300      	movs	r3, #0
 800491c:	6123      	str	r3, [r4, #16]
 800491e:	4616      	mov	r6, r2
 8004920:	e7bc      	b.n	800489c <_printf_i+0x148>
 8004922:	6833      	ldr	r3, [r6, #0]
 8004924:	1d1a      	adds	r2, r3, #4
 8004926:	6032      	str	r2, [r6, #0]
 8004928:	681e      	ldr	r6, [r3, #0]
 800492a:	6862      	ldr	r2, [r4, #4]
 800492c:	2100      	movs	r1, #0
 800492e:	4630      	mov	r0, r6
 8004930:	f7fb fc4e 	bl	80001d0 <memchr>
 8004934:	b108      	cbz	r0, 800493a <_printf_i+0x1e6>
 8004936:	1b80      	subs	r0, r0, r6
 8004938:	6060      	str	r0, [r4, #4]
 800493a:	6863      	ldr	r3, [r4, #4]
 800493c:	6123      	str	r3, [r4, #16]
 800493e:	2300      	movs	r3, #0
 8004940:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004944:	e7aa      	b.n	800489c <_printf_i+0x148>
 8004946:	6923      	ldr	r3, [r4, #16]
 8004948:	4632      	mov	r2, r6
 800494a:	4649      	mov	r1, r9
 800494c:	4640      	mov	r0, r8
 800494e:	47d0      	blx	sl
 8004950:	3001      	adds	r0, #1
 8004952:	d0ad      	beq.n	80048b0 <_printf_i+0x15c>
 8004954:	6823      	ldr	r3, [r4, #0]
 8004956:	079b      	lsls	r3, r3, #30
 8004958:	d413      	bmi.n	8004982 <_printf_i+0x22e>
 800495a:	68e0      	ldr	r0, [r4, #12]
 800495c:	9b03      	ldr	r3, [sp, #12]
 800495e:	4298      	cmp	r0, r3
 8004960:	bfb8      	it	lt
 8004962:	4618      	movlt	r0, r3
 8004964:	e7a6      	b.n	80048b4 <_printf_i+0x160>
 8004966:	2301      	movs	r3, #1
 8004968:	4632      	mov	r2, r6
 800496a:	4649      	mov	r1, r9
 800496c:	4640      	mov	r0, r8
 800496e:	47d0      	blx	sl
 8004970:	3001      	adds	r0, #1
 8004972:	d09d      	beq.n	80048b0 <_printf_i+0x15c>
 8004974:	3501      	adds	r5, #1
 8004976:	68e3      	ldr	r3, [r4, #12]
 8004978:	9903      	ldr	r1, [sp, #12]
 800497a:	1a5b      	subs	r3, r3, r1
 800497c:	42ab      	cmp	r3, r5
 800497e:	dcf2      	bgt.n	8004966 <_printf_i+0x212>
 8004980:	e7eb      	b.n	800495a <_printf_i+0x206>
 8004982:	2500      	movs	r5, #0
 8004984:	f104 0619 	add.w	r6, r4, #25
 8004988:	e7f5      	b.n	8004976 <_printf_i+0x222>
 800498a:	bf00      	nop
 800498c:	08004f9d 	.word	0x08004f9d
 8004990:	08004fae 	.word	0x08004fae

08004994 <__sflush_r>:
 8004994:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800499c:	0716      	lsls	r6, r2, #28
 800499e:	4605      	mov	r5, r0
 80049a0:	460c      	mov	r4, r1
 80049a2:	d454      	bmi.n	8004a4e <__sflush_r+0xba>
 80049a4:	684b      	ldr	r3, [r1, #4]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	dc02      	bgt.n	80049b0 <__sflush_r+0x1c>
 80049aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	dd48      	ble.n	8004a42 <__sflush_r+0xae>
 80049b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80049b2:	2e00      	cmp	r6, #0
 80049b4:	d045      	beq.n	8004a42 <__sflush_r+0xae>
 80049b6:	2300      	movs	r3, #0
 80049b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80049bc:	682f      	ldr	r7, [r5, #0]
 80049be:	6a21      	ldr	r1, [r4, #32]
 80049c0:	602b      	str	r3, [r5, #0]
 80049c2:	d030      	beq.n	8004a26 <__sflush_r+0x92>
 80049c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80049c6:	89a3      	ldrh	r3, [r4, #12]
 80049c8:	0759      	lsls	r1, r3, #29
 80049ca:	d505      	bpl.n	80049d8 <__sflush_r+0x44>
 80049cc:	6863      	ldr	r3, [r4, #4]
 80049ce:	1ad2      	subs	r2, r2, r3
 80049d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80049d2:	b10b      	cbz	r3, 80049d8 <__sflush_r+0x44>
 80049d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80049d6:	1ad2      	subs	r2, r2, r3
 80049d8:	2300      	movs	r3, #0
 80049da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80049dc:	6a21      	ldr	r1, [r4, #32]
 80049de:	4628      	mov	r0, r5
 80049e0:	47b0      	blx	r6
 80049e2:	1c43      	adds	r3, r0, #1
 80049e4:	89a3      	ldrh	r3, [r4, #12]
 80049e6:	d106      	bne.n	80049f6 <__sflush_r+0x62>
 80049e8:	6829      	ldr	r1, [r5, #0]
 80049ea:	291d      	cmp	r1, #29
 80049ec:	d82b      	bhi.n	8004a46 <__sflush_r+0xb2>
 80049ee:	4a2a      	ldr	r2, [pc, #168]	@ (8004a98 <__sflush_r+0x104>)
 80049f0:	410a      	asrs	r2, r1
 80049f2:	07d6      	lsls	r6, r2, #31
 80049f4:	d427      	bmi.n	8004a46 <__sflush_r+0xb2>
 80049f6:	2200      	movs	r2, #0
 80049f8:	6062      	str	r2, [r4, #4]
 80049fa:	04d9      	lsls	r1, r3, #19
 80049fc:	6922      	ldr	r2, [r4, #16]
 80049fe:	6022      	str	r2, [r4, #0]
 8004a00:	d504      	bpl.n	8004a0c <__sflush_r+0x78>
 8004a02:	1c42      	adds	r2, r0, #1
 8004a04:	d101      	bne.n	8004a0a <__sflush_r+0x76>
 8004a06:	682b      	ldr	r3, [r5, #0]
 8004a08:	b903      	cbnz	r3, 8004a0c <__sflush_r+0x78>
 8004a0a:	6560      	str	r0, [r4, #84]	@ 0x54
 8004a0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004a0e:	602f      	str	r7, [r5, #0]
 8004a10:	b1b9      	cbz	r1, 8004a42 <__sflush_r+0xae>
 8004a12:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004a16:	4299      	cmp	r1, r3
 8004a18:	d002      	beq.n	8004a20 <__sflush_r+0x8c>
 8004a1a:	4628      	mov	r0, r5
 8004a1c:	f7ff fca0 	bl	8004360 <_free_r>
 8004a20:	2300      	movs	r3, #0
 8004a22:	6363      	str	r3, [r4, #52]	@ 0x34
 8004a24:	e00d      	b.n	8004a42 <__sflush_r+0xae>
 8004a26:	2301      	movs	r3, #1
 8004a28:	4628      	mov	r0, r5
 8004a2a:	47b0      	blx	r6
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	1c50      	adds	r0, r2, #1
 8004a30:	d1c9      	bne.n	80049c6 <__sflush_r+0x32>
 8004a32:	682b      	ldr	r3, [r5, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d0c6      	beq.n	80049c6 <__sflush_r+0x32>
 8004a38:	2b1d      	cmp	r3, #29
 8004a3a:	d001      	beq.n	8004a40 <__sflush_r+0xac>
 8004a3c:	2b16      	cmp	r3, #22
 8004a3e:	d11e      	bne.n	8004a7e <__sflush_r+0xea>
 8004a40:	602f      	str	r7, [r5, #0]
 8004a42:	2000      	movs	r0, #0
 8004a44:	e022      	b.n	8004a8c <__sflush_r+0xf8>
 8004a46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a4a:	b21b      	sxth	r3, r3
 8004a4c:	e01b      	b.n	8004a86 <__sflush_r+0xf2>
 8004a4e:	690f      	ldr	r7, [r1, #16]
 8004a50:	2f00      	cmp	r7, #0
 8004a52:	d0f6      	beq.n	8004a42 <__sflush_r+0xae>
 8004a54:	0793      	lsls	r3, r2, #30
 8004a56:	680e      	ldr	r6, [r1, #0]
 8004a58:	bf08      	it	eq
 8004a5a:	694b      	ldreq	r3, [r1, #20]
 8004a5c:	600f      	str	r7, [r1, #0]
 8004a5e:	bf18      	it	ne
 8004a60:	2300      	movne	r3, #0
 8004a62:	eba6 0807 	sub.w	r8, r6, r7
 8004a66:	608b      	str	r3, [r1, #8]
 8004a68:	f1b8 0f00 	cmp.w	r8, #0
 8004a6c:	dde9      	ble.n	8004a42 <__sflush_r+0xae>
 8004a6e:	6a21      	ldr	r1, [r4, #32]
 8004a70:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004a72:	4643      	mov	r3, r8
 8004a74:	463a      	mov	r2, r7
 8004a76:	4628      	mov	r0, r5
 8004a78:	47b0      	blx	r6
 8004a7a:	2800      	cmp	r0, #0
 8004a7c:	dc08      	bgt.n	8004a90 <__sflush_r+0xfc>
 8004a7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a86:	81a3      	strh	r3, [r4, #12]
 8004a88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a90:	4407      	add	r7, r0
 8004a92:	eba8 0800 	sub.w	r8, r8, r0
 8004a96:	e7e7      	b.n	8004a68 <__sflush_r+0xd4>
 8004a98:	dfbffffe 	.word	0xdfbffffe

08004a9c <_fflush_r>:
 8004a9c:	b538      	push	{r3, r4, r5, lr}
 8004a9e:	690b      	ldr	r3, [r1, #16]
 8004aa0:	4605      	mov	r5, r0
 8004aa2:	460c      	mov	r4, r1
 8004aa4:	b913      	cbnz	r3, 8004aac <_fflush_r+0x10>
 8004aa6:	2500      	movs	r5, #0
 8004aa8:	4628      	mov	r0, r5
 8004aaa:	bd38      	pop	{r3, r4, r5, pc}
 8004aac:	b118      	cbz	r0, 8004ab6 <_fflush_r+0x1a>
 8004aae:	6a03      	ldr	r3, [r0, #32]
 8004ab0:	b90b      	cbnz	r3, 8004ab6 <_fflush_r+0x1a>
 8004ab2:	f7ff fb5b 	bl	800416c <__sinit>
 8004ab6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d0f3      	beq.n	8004aa6 <_fflush_r+0xa>
 8004abe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004ac0:	07d0      	lsls	r0, r2, #31
 8004ac2:	d404      	bmi.n	8004ace <_fflush_r+0x32>
 8004ac4:	0599      	lsls	r1, r3, #22
 8004ac6:	d402      	bmi.n	8004ace <_fflush_r+0x32>
 8004ac8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004aca:	f7ff fc38 	bl	800433e <__retarget_lock_acquire_recursive>
 8004ace:	4628      	mov	r0, r5
 8004ad0:	4621      	mov	r1, r4
 8004ad2:	f7ff ff5f 	bl	8004994 <__sflush_r>
 8004ad6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004ad8:	07da      	lsls	r2, r3, #31
 8004ada:	4605      	mov	r5, r0
 8004adc:	d4e4      	bmi.n	8004aa8 <_fflush_r+0xc>
 8004ade:	89a3      	ldrh	r3, [r4, #12]
 8004ae0:	059b      	lsls	r3, r3, #22
 8004ae2:	d4e1      	bmi.n	8004aa8 <_fflush_r+0xc>
 8004ae4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004ae6:	f7ff fc2b 	bl	8004340 <__retarget_lock_release_recursive>
 8004aea:	e7dd      	b.n	8004aa8 <_fflush_r+0xc>

08004aec <__sread>:
 8004aec:	b510      	push	{r4, lr}
 8004aee:	460c      	mov	r4, r1
 8004af0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004af4:	f000 f978 	bl	8004de8 <_read_r>
 8004af8:	2800      	cmp	r0, #0
 8004afa:	bfab      	itete	ge
 8004afc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004afe:	89a3      	ldrhlt	r3, [r4, #12]
 8004b00:	181b      	addge	r3, r3, r0
 8004b02:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004b06:	bfac      	ite	ge
 8004b08:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004b0a:	81a3      	strhlt	r3, [r4, #12]
 8004b0c:	bd10      	pop	{r4, pc}

08004b0e <__swrite>:
 8004b0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b12:	461f      	mov	r7, r3
 8004b14:	898b      	ldrh	r3, [r1, #12]
 8004b16:	05db      	lsls	r3, r3, #23
 8004b18:	4605      	mov	r5, r0
 8004b1a:	460c      	mov	r4, r1
 8004b1c:	4616      	mov	r6, r2
 8004b1e:	d505      	bpl.n	8004b2c <__swrite+0x1e>
 8004b20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b24:	2302      	movs	r3, #2
 8004b26:	2200      	movs	r2, #0
 8004b28:	f000 f94c 	bl	8004dc4 <_lseek_r>
 8004b2c:	89a3      	ldrh	r3, [r4, #12]
 8004b2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b32:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004b36:	81a3      	strh	r3, [r4, #12]
 8004b38:	4632      	mov	r2, r6
 8004b3a:	463b      	mov	r3, r7
 8004b3c:	4628      	mov	r0, r5
 8004b3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b42:	f000 b963 	b.w	8004e0c <_write_r>

08004b46 <__sseek>:
 8004b46:	b510      	push	{r4, lr}
 8004b48:	460c      	mov	r4, r1
 8004b4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b4e:	f000 f939 	bl	8004dc4 <_lseek_r>
 8004b52:	1c43      	adds	r3, r0, #1
 8004b54:	89a3      	ldrh	r3, [r4, #12]
 8004b56:	bf15      	itete	ne
 8004b58:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004b5a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004b5e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004b62:	81a3      	strheq	r3, [r4, #12]
 8004b64:	bf18      	it	ne
 8004b66:	81a3      	strhne	r3, [r4, #12]
 8004b68:	bd10      	pop	{r4, pc}

08004b6a <__sclose>:
 8004b6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b6e:	f000 b8f7 	b.w	8004d60 <_close_r>

08004b72 <__swbuf_r>:
 8004b72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b74:	460e      	mov	r6, r1
 8004b76:	4614      	mov	r4, r2
 8004b78:	4605      	mov	r5, r0
 8004b7a:	b118      	cbz	r0, 8004b84 <__swbuf_r+0x12>
 8004b7c:	6a03      	ldr	r3, [r0, #32]
 8004b7e:	b90b      	cbnz	r3, 8004b84 <__swbuf_r+0x12>
 8004b80:	f7ff faf4 	bl	800416c <__sinit>
 8004b84:	69a3      	ldr	r3, [r4, #24]
 8004b86:	60a3      	str	r3, [r4, #8]
 8004b88:	89a3      	ldrh	r3, [r4, #12]
 8004b8a:	071a      	lsls	r2, r3, #28
 8004b8c:	d501      	bpl.n	8004b92 <__swbuf_r+0x20>
 8004b8e:	6923      	ldr	r3, [r4, #16]
 8004b90:	b943      	cbnz	r3, 8004ba4 <__swbuf_r+0x32>
 8004b92:	4621      	mov	r1, r4
 8004b94:	4628      	mov	r0, r5
 8004b96:	f000 f82b 	bl	8004bf0 <__swsetup_r>
 8004b9a:	b118      	cbz	r0, 8004ba4 <__swbuf_r+0x32>
 8004b9c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8004ba0:	4638      	mov	r0, r7
 8004ba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ba4:	6823      	ldr	r3, [r4, #0]
 8004ba6:	6922      	ldr	r2, [r4, #16]
 8004ba8:	1a98      	subs	r0, r3, r2
 8004baa:	6963      	ldr	r3, [r4, #20]
 8004bac:	b2f6      	uxtb	r6, r6
 8004bae:	4283      	cmp	r3, r0
 8004bb0:	4637      	mov	r7, r6
 8004bb2:	dc05      	bgt.n	8004bc0 <__swbuf_r+0x4e>
 8004bb4:	4621      	mov	r1, r4
 8004bb6:	4628      	mov	r0, r5
 8004bb8:	f7ff ff70 	bl	8004a9c <_fflush_r>
 8004bbc:	2800      	cmp	r0, #0
 8004bbe:	d1ed      	bne.n	8004b9c <__swbuf_r+0x2a>
 8004bc0:	68a3      	ldr	r3, [r4, #8]
 8004bc2:	3b01      	subs	r3, #1
 8004bc4:	60a3      	str	r3, [r4, #8]
 8004bc6:	6823      	ldr	r3, [r4, #0]
 8004bc8:	1c5a      	adds	r2, r3, #1
 8004bca:	6022      	str	r2, [r4, #0]
 8004bcc:	701e      	strb	r6, [r3, #0]
 8004bce:	6962      	ldr	r2, [r4, #20]
 8004bd0:	1c43      	adds	r3, r0, #1
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d004      	beq.n	8004be0 <__swbuf_r+0x6e>
 8004bd6:	89a3      	ldrh	r3, [r4, #12]
 8004bd8:	07db      	lsls	r3, r3, #31
 8004bda:	d5e1      	bpl.n	8004ba0 <__swbuf_r+0x2e>
 8004bdc:	2e0a      	cmp	r6, #10
 8004bde:	d1df      	bne.n	8004ba0 <__swbuf_r+0x2e>
 8004be0:	4621      	mov	r1, r4
 8004be2:	4628      	mov	r0, r5
 8004be4:	f7ff ff5a 	bl	8004a9c <_fflush_r>
 8004be8:	2800      	cmp	r0, #0
 8004bea:	d0d9      	beq.n	8004ba0 <__swbuf_r+0x2e>
 8004bec:	e7d6      	b.n	8004b9c <__swbuf_r+0x2a>
	...

08004bf0 <__swsetup_r>:
 8004bf0:	b538      	push	{r3, r4, r5, lr}
 8004bf2:	4b29      	ldr	r3, [pc, #164]	@ (8004c98 <__swsetup_r+0xa8>)
 8004bf4:	4605      	mov	r5, r0
 8004bf6:	6818      	ldr	r0, [r3, #0]
 8004bf8:	460c      	mov	r4, r1
 8004bfa:	b118      	cbz	r0, 8004c04 <__swsetup_r+0x14>
 8004bfc:	6a03      	ldr	r3, [r0, #32]
 8004bfe:	b90b      	cbnz	r3, 8004c04 <__swsetup_r+0x14>
 8004c00:	f7ff fab4 	bl	800416c <__sinit>
 8004c04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c08:	0719      	lsls	r1, r3, #28
 8004c0a:	d422      	bmi.n	8004c52 <__swsetup_r+0x62>
 8004c0c:	06da      	lsls	r2, r3, #27
 8004c0e:	d407      	bmi.n	8004c20 <__swsetup_r+0x30>
 8004c10:	2209      	movs	r2, #9
 8004c12:	602a      	str	r2, [r5, #0]
 8004c14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c18:	81a3      	strh	r3, [r4, #12]
 8004c1a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004c1e:	e033      	b.n	8004c88 <__swsetup_r+0x98>
 8004c20:	0758      	lsls	r0, r3, #29
 8004c22:	d512      	bpl.n	8004c4a <__swsetup_r+0x5a>
 8004c24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004c26:	b141      	cbz	r1, 8004c3a <__swsetup_r+0x4a>
 8004c28:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004c2c:	4299      	cmp	r1, r3
 8004c2e:	d002      	beq.n	8004c36 <__swsetup_r+0x46>
 8004c30:	4628      	mov	r0, r5
 8004c32:	f7ff fb95 	bl	8004360 <_free_r>
 8004c36:	2300      	movs	r3, #0
 8004c38:	6363      	str	r3, [r4, #52]	@ 0x34
 8004c3a:	89a3      	ldrh	r3, [r4, #12]
 8004c3c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004c40:	81a3      	strh	r3, [r4, #12]
 8004c42:	2300      	movs	r3, #0
 8004c44:	6063      	str	r3, [r4, #4]
 8004c46:	6923      	ldr	r3, [r4, #16]
 8004c48:	6023      	str	r3, [r4, #0]
 8004c4a:	89a3      	ldrh	r3, [r4, #12]
 8004c4c:	f043 0308 	orr.w	r3, r3, #8
 8004c50:	81a3      	strh	r3, [r4, #12]
 8004c52:	6923      	ldr	r3, [r4, #16]
 8004c54:	b94b      	cbnz	r3, 8004c6a <__swsetup_r+0x7a>
 8004c56:	89a3      	ldrh	r3, [r4, #12]
 8004c58:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004c5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c60:	d003      	beq.n	8004c6a <__swsetup_r+0x7a>
 8004c62:	4621      	mov	r1, r4
 8004c64:	4628      	mov	r0, r5
 8004c66:	f000 f83f 	bl	8004ce8 <__smakebuf_r>
 8004c6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c6e:	f013 0201 	ands.w	r2, r3, #1
 8004c72:	d00a      	beq.n	8004c8a <__swsetup_r+0x9a>
 8004c74:	2200      	movs	r2, #0
 8004c76:	60a2      	str	r2, [r4, #8]
 8004c78:	6962      	ldr	r2, [r4, #20]
 8004c7a:	4252      	negs	r2, r2
 8004c7c:	61a2      	str	r2, [r4, #24]
 8004c7e:	6922      	ldr	r2, [r4, #16]
 8004c80:	b942      	cbnz	r2, 8004c94 <__swsetup_r+0xa4>
 8004c82:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004c86:	d1c5      	bne.n	8004c14 <__swsetup_r+0x24>
 8004c88:	bd38      	pop	{r3, r4, r5, pc}
 8004c8a:	0799      	lsls	r1, r3, #30
 8004c8c:	bf58      	it	pl
 8004c8e:	6962      	ldrpl	r2, [r4, #20]
 8004c90:	60a2      	str	r2, [r4, #8]
 8004c92:	e7f4      	b.n	8004c7e <__swsetup_r+0x8e>
 8004c94:	2000      	movs	r0, #0
 8004c96:	e7f7      	b.n	8004c88 <__swsetup_r+0x98>
 8004c98:	2000014c 	.word	0x2000014c

08004c9c <__swhatbuf_r>:
 8004c9c:	b570      	push	{r4, r5, r6, lr}
 8004c9e:	460c      	mov	r4, r1
 8004ca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ca4:	2900      	cmp	r1, #0
 8004ca6:	b096      	sub	sp, #88	@ 0x58
 8004ca8:	4615      	mov	r5, r2
 8004caa:	461e      	mov	r6, r3
 8004cac:	da0d      	bge.n	8004cca <__swhatbuf_r+0x2e>
 8004cae:	89a3      	ldrh	r3, [r4, #12]
 8004cb0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004cb4:	f04f 0100 	mov.w	r1, #0
 8004cb8:	bf14      	ite	ne
 8004cba:	2340      	movne	r3, #64	@ 0x40
 8004cbc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004cc0:	2000      	movs	r0, #0
 8004cc2:	6031      	str	r1, [r6, #0]
 8004cc4:	602b      	str	r3, [r5, #0]
 8004cc6:	b016      	add	sp, #88	@ 0x58
 8004cc8:	bd70      	pop	{r4, r5, r6, pc}
 8004cca:	466a      	mov	r2, sp
 8004ccc:	f000 f858 	bl	8004d80 <_fstat_r>
 8004cd0:	2800      	cmp	r0, #0
 8004cd2:	dbec      	blt.n	8004cae <__swhatbuf_r+0x12>
 8004cd4:	9901      	ldr	r1, [sp, #4]
 8004cd6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004cda:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004cde:	4259      	negs	r1, r3
 8004ce0:	4159      	adcs	r1, r3
 8004ce2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004ce6:	e7eb      	b.n	8004cc0 <__swhatbuf_r+0x24>

08004ce8 <__smakebuf_r>:
 8004ce8:	898b      	ldrh	r3, [r1, #12]
 8004cea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004cec:	079d      	lsls	r5, r3, #30
 8004cee:	4606      	mov	r6, r0
 8004cf0:	460c      	mov	r4, r1
 8004cf2:	d507      	bpl.n	8004d04 <__smakebuf_r+0x1c>
 8004cf4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004cf8:	6023      	str	r3, [r4, #0]
 8004cfa:	6123      	str	r3, [r4, #16]
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	6163      	str	r3, [r4, #20]
 8004d00:	b003      	add	sp, #12
 8004d02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d04:	ab01      	add	r3, sp, #4
 8004d06:	466a      	mov	r2, sp
 8004d08:	f7ff ffc8 	bl	8004c9c <__swhatbuf_r>
 8004d0c:	9f00      	ldr	r7, [sp, #0]
 8004d0e:	4605      	mov	r5, r0
 8004d10:	4639      	mov	r1, r7
 8004d12:	4630      	mov	r0, r6
 8004d14:	f7ff f912 	bl	8003f3c <_malloc_r>
 8004d18:	b948      	cbnz	r0, 8004d2e <__smakebuf_r+0x46>
 8004d1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d1e:	059a      	lsls	r2, r3, #22
 8004d20:	d4ee      	bmi.n	8004d00 <__smakebuf_r+0x18>
 8004d22:	f023 0303 	bic.w	r3, r3, #3
 8004d26:	f043 0302 	orr.w	r3, r3, #2
 8004d2a:	81a3      	strh	r3, [r4, #12]
 8004d2c:	e7e2      	b.n	8004cf4 <__smakebuf_r+0xc>
 8004d2e:	89a3      	ldrh	r3, [r4, #12]
 8004d30:	6020      	str	r0, [r4, #0]
 8004d32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d36:	81a3      	strh	r3, [r4, #12]
 8004d38:	9b01      	ldr	r3, [sp, #4]
 8004d3a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004d3e:	b15b      	cbz	r3, 8004d58 <__smakebuf_r+0x70>
 8004d40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d44:	4630      	mov	r0, r6
 8004d46:	f000 f82d 	bl	8004da4 <_isatty_r>
 8004d4a:	b128      	cbz	r0, 8004d58 <__smakebuf_r+0x70>
 8004d4c:	89a3      	ldrh	r3, [r4, #12]
 8004d4e:	f023 0303 	bic.w	r3, r3, #3
 8004d52:	f043 0301 	orr.w	r3, r3, #1
 8004d56:	81a3      	strh	r3, [r4, #12]
 8004d58:	89a3      	ldrh	r3, [r4, #12]
 8004d5a:	431d      	orrs	r5, r3
 8004d5c:	81a5      	strh	r5, [r4, #12]
 8004d5e:	e7cf      	b.n	8004d00 <__smakebuf_r+0x18>

08004d60 <_close_r>:
 8004d60:	b538      	push	{r3, r4, r5, lr}
 8004d62:	4d06      	ldr	r5, [pc, #24]	@ (8004d7c <_close_r+0x1c>)
 8004d64:	2300      	movs	r3, #0
 8004d66:	4604      	mov	r4, r0
 8004d68:	4608      	mov	r0, r1
 8004d6a:	602b      	str	r3, [r5, #0]
 8004d6c:	f7fd f802 	bl	8001d74 <_close>
 8004d70:	1c43      	adds	r3, r0, #1
 8004d72:	d102      	bne.n	8004d7a <_close_r+0x1a>
 8004d74:	682b      	ldr	r3, [r5, #0]
 8004d76:	b103      	cbz	r3, 8004d7a <_close_r+0x1a>
 8004d78:	6023      	str	r3, [r4, #0]
 8004d7a:	bd38      	pop	{r3, r4, r5, pc}
 8004d7c:	200004a4 	.word	0x200004a4

08004d80 <_fstat_r>:
 8004d80:	b538      	push	{r3, r4, r5, lr}
 8004d82:	4d07      	ldr	r5, [pc, #28]	@ (8004da0 <_fstat_r+0x20>)
 8004d84:	2300      	movs	r3, #0
 8004d86:	4604      	mov	r4, r0
 8004d88:	4608      	mov	r0, r1
 8004d8a:	4611      	mov	r1, r2
 8004d8c:	602b      	str	r3, [r5, #0]
 8004d8e:	f7fc fffd 	bl	8001d8c <_fstat>
 8004d92:	1c43      	adds	r3, r0, #1
 8004d94:	d102      	bne.n	8004d9c <_fstat_r+0x1c>
 8004d96:	682b      	ldr	r3, [r5, #0]
 8004d98:	b103      	cbz	r3, 8004d9c <_fstat_r+0x1c>
 8004d9a:	6023      	str	r3, [r4, #0]
 8004d9c:	bd38      	pop	{r3, r4, r5, pc}
 8004d9e:	bf00      	nop
 8004da0:	200004a4 	.word	0x200004a4

08004da4 <_isatty_r>:
 8004da4:	b538      	push	{r3, r4, r5, lr}
 8004da6:	4d06      	ldr	r5, [pc, #24]	@ (8004dc0 <_isatty_r+0x1c>)
 8004da8:	2300      	movs	r3, #0
 8004daa:	4604      	mov	r4, r0
 8004dac:	4608      	mov	r0, r1
 8004dae:	602b      	str	r3, [r5, #0]
 8004db0:	f7fc fffc 	bl	8001dac <_isatty>
 8004db4:	1c43      	adds	r3, r0, #1
 8004db6:	d102      	bne.n	8004dbe <_isatty_r+0x1a>
 8004db8:	682b      	ldr	r3, [r5, #0]
 8004dba:	b103      	cbz	r3, 8004dbe <_isatty_r+0x1a>
 8004dbc:	6023      	str	r3, [r4, #0]
 8004dbe:	bd38      	pop	{r3, r4, r5, pc}
 8004dc0:	200004a4 	.word	0x200004a4

08004dc4 <_lseek_r>:
 8004dc4:	b538      	push	{r3, r4, r5, lr}
 8004dc6:	4d07      	ldr	r5, [pc, #28]	@ (8004de4 <_lseek_r+0x20>)
 8004dc8:	4604      	mov	r4, r0
 8004dca:	4608      	mov	r0, r1
 8004dcc:	4611      	mov	r1, r2
 8004dce:	2200      	movs	r2, #0
 8004dd0:	602a      	str	r2, [r5, #0]
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	f7fc fff5 	bl	8001dc2 <_lseek>
 8004dd8:	1c43      	adds	r3, r0, #1
 8004dda:	d102      	bne.n	8004de2 <_lseek_r+0x1e>
 8004ddc:	682b      	ldr	r3, [r5, #0]
 8004dde:	b103      	cbz	r3, 8004de2 <_lseek_r+0x1e>
 8004de0:	6023      	str	r3, [r4, #0]
 8004de2:	bd38      	pop	{r3, r4, r5, pc}
 8004de4:	200004a4 	.word	0x200004a4

08004de8 <_read_r>:
 8004de8:	b538      	push	{r3, r4, r5, lr}
 8004dea:	4d07      	ldr	r5, [pc, #28]	@ (8004e08 <_read_r+0x20>)
 8004dec:	4604      	mov	r4, r0
 8004dee:	4608      	mov	r0, r1
 8004df0:	4611      	mov	r1, r2
 8004df2:	2200      	movs	r2, #0
 8004df4:	602a      	str	r2, [r5, #0]
 8004df6:	461a      	mov	r2, r3
 8004df8:	f7fc ff72 	bl	8001ce0 <_read>
 8004dfc:	1c43      	adds	r3, r0, #1
 8004dfe:	d102      	bne.n	8004e06 <_read_r+0x1e>
 8004e00:	682b      	ldr	r3, [r5, #0]
 8004e02:	b103      	cbz	r3, 8004e06 <_read_r+0x1e>
 8004e04:	6023      	str	r3, [r4, #0]
 8004e06:	bd38      	pop	{r3, r4, r5, pc}
 8004e08:	200004a4 	.word	0x200004a4

08004e0c <_write_r>:
 8004e0c:	b538      	push	{r3, r4, r5, lr}
 8004e0e:	4d07      	ldr	r5, [pc, #28]	@ (8004e2c <_write_r+0x20>)
 8004e10:	4604      	mov	r4, r0
 8004e12:	4608      	mov	r0, r1
 8004e14:	4611      	mov	r1, r2
 8004e16:	2200      	movs	r2, #0
 8004e18:	602a      	str	r2, [r5, #0]
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	f7fc fc05 	bl	800162a <_write>
 8004e20:	1c43      	adds	r3, r0, #1
 8004e22:	d102      	bne.n	8004e2a <_write_r+0x1e>
 8004e24:	682b      	ldr	r3, [r5, #0]
 8004e26:	b103      	cbz	r3, 8004e2a <_write_r+0x1e>
 8004e28:	6023      	str	r3, [r4, #0]
 8004e2a:	bd38      	pop	{r3, r4, r5, pc}
 8004e2c:	200004a4 	.word	0x200004a4

08004e30 <_init>:
 8004e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e32:	bf00      	nop
 8004e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e36:	bc08      	pop	{r3}
 8004e38:	469e      	mov	lr, r3
 8004e3a:	4770      	bx	lr

08004e3c <_fini>:
 8004e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e3e:	bf00      	nop
 8004e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e42:	bc08      	pop	{r3}
 8004e44:	469e      	mov	lr, r3
 8004e46:	4770      	bx	lr
